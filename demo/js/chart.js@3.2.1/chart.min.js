/*!
 * Chart.js v3.2.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
!(function (t, e) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = e() : typeof define === 'function' && define.amd ? define(e) : (t = typeof globalThis !== 'undefined' ? globalThis : t || self).Chart = e() }(this, function () {
  'use strict'; const t = typeof window === 'undefined' ? function (t) { return t() } : window.requestAnimationFrame; function e (e, i, n) { const o = n || (t => Array.prototype.slice.call(t)); let s = !1; let a = []; return function (...n) { a = o(n), s || (s = !0, t.call(window, () => { s = !1, e.apply(i, a) })) } } function i (t, e) { let i; return function () { return e ? (clearTimeout(i), i = setTimeout(t, e)) : t(), e } } const n = t => t === 'start' ? 'left' : t === 'end' ? 'right' : 'center'; const o = (t, e, i) => t === 'start' ? e : t === 'end' ? i : (e + i) / 2; const s = (t, e, i) => t === 'right' ? i : t === 'center' ? (e + i) / 2 : e; const a = new class {constructor () { this._request = null, this._charts = new Map(), this._running = !1, this._lastDate = void 0 }_notify (t, e, i, n) { const o = e.listeners[n]; const s = e.duration; o.forEach(n => n({ chart: t, initial: e.initial, numSteps: s, currentStep: Math.min(i - e.start, s) })) }_refresh () { const e = this; e._request || (e._running = !0, e._request = t.call(window, () => { e._update(), e._request = null, e._running && e._refresh() })) }_update (t = Date.now()) { const e = this; let i = 0; e._charts.forEach((n, o) => { if (!n.running || !n.items.length) { return } const s = n.items; let a; let r = s.length - 1; let l = !1; for (;r >= 0; --r) { a = s[r], a._active ? (a._total > n.duration && (n.duration = a._total), a.tick(t), l = !0) : (s[r] = s[s.length - 1], s.pop()) }l && (o.draw(), e._notify(o, n, t, 'progress')), s.length || (n.running = !1, e._notify(o, n, t, 'complete'), n.initial = !1), i += s.length }), e._lastDate = t, i === 0 && (e._running = !1) }_getAnims (t) { const e = this._charts; let i = e.get(t); return i || (i = { running: !1, initial: !0, items: [], listeners: { complete: [], progress: [] } }, e.set(t, i)), i }listen (t, e, i) { this._getAnims(t).listeners[e].push(i) }add (t, e) { e && e.length && this._getAnims(t).items.push(...e) }has (t) { return this._getAnims(t).items.length > 0 }start (t) { const e = this._charts.get(t); e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce((t, e) => Math.max(t, e._duration), 0), this._refresh()) }running (t) { if (!this._running) { return !1 } const e = this._charts.get(t); return !!(e && e.running && e.items.length) }stop (t) { const e = this._charts.get(t); if (!e || !e.items.length) { return } const i = e.items; let n = i.length - 1; for (;n >= 0; --n) { i[n].cancel() }e.items = [], this._notify(t, e, Date.now(), 'complete') }remove (t) { return this._charts.delete(t) }}()
  /*!
 * @kurkle/color v0.1.9
 * https://github.com/kurkle/color#readme
 * (c) 2020 Jukka Kurkela
 * Released under the MIT License
 */const r = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 }; const l = '0123456789ABCDEF'; const c = t => l[15 & t]; const h = t => l[(240 & t) >> 4] + l[15 & t]; const d = t => (240 & t) >> 4 == (15 & t); function u (t) { const e = (function (t) { return d(t.r) && d(t.g) && d(t.b) && d(t.a) }(t)) ? c : h; return t ? '#' + e(t.r) + e(t.g) + e(t.b) + (t.a < 255 ? e(t.a) : '') : t } function f (t) { return t + 0.5 | 0 } const g = (t, e, i) => Math.max(Math.min(t, i), e); function p (t) { return g(f(2.55 * t), 0, 255) } function m (t) { return g(f(255 * t), 0, 255) } function x (t) { return g(f(t / 2.55) / 100, 0, 1) } function b (t) { return g(f(100 * t), 0, 100) } const _ = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/; const y = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/; function v (t, e, i) { const n = e * Math.min(i, 1 - i); const o = (e, o = (e + t / 30) % 12) => i - n * Math.max(Math.min(o - 3, 9 - o, 1), -1); return [o(0), o(8), o(4)] } function w (t, e, i) { const n = (n, o = (n + t / 60) % 6) => i - i * e * Math.max(Math.min(o, 4 - o, 1), 0); return [n(5), n(3), n(1)] } function M (t, e, i) { const n = v(t, 1, 0.5); let o; for (e + i > 1 && (o = 1 / (e + i), e *= o, i *= o), o = 0; o < 3; o++) { n[o] *= 1 - e - i, n[o] += e } return n } function k (t) { const e = t.r / 255; const i = t.g / 255; const n = t.b / 255; const o = Math.max(e, i, n); const s = Math.min(e, i, n); const a = (o + s) / 2; let r, l, c; return o !== s && (c = o - s, l = a > 0.5 ? c / (2 - o - s) : c / (o + s), r = o === e ? (i - n) / c + (i < n ? 6 : 0) : o === i ? (n - e) / c + 2 : (e - i) / c + 4, r = 60 * r + 0.5), [0 | r, l || 0, a] } function S (t, e, i, n) { return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, i, n)).map(m) } function P (t, e, i) { return S(v, t, e, i) } function D (t) { return (t % 360 + 360) % 360 } function C (t) { const e = y.exec(t); let i; let n = 255; if (!e) { return } e[5] !== i && (n = e[6] ? p(+e[5]) : m(+e[5])); const o = D(+e[2]); const s = +e[3] / 100; const a = +e[4] / 100; return i = e[1] === 'hwb' ? (function (t, e, i) { return S(M, t, e, i) }(o, s, a)) : e[1] === 'hsv' ? (function (t, e, i) { return S(w, t, e, i) }(o, s, a)) : P(o, s, a), { r: i[0], g: i[1], b: i[2], a: n } } const O = { x: 'dark', Z: 'light', Y: 're', X: 'blu', W: 'gr', V: 'medium', U: 'slate', A: 'ee', T: 'ol', S: 'or', B: 'ra', C: 'lateg', D: 'ights', R: 'in', Q: 'turquois', E: 'hi', P: 'ro', O: 'al', N: 'le', M: 'de', L: 'yello', F: 'en', K: 'ch', G: 'arks', H: 'ea', I: 'ightg', J: 'wh' }; const A = { OiceXe: 'f0f8ff', antiquewEte: 'faebd7', aqua: 'ffff', aquamarRe: '7fffd4', azuY: 'f0ffff', beige: 'f5f5dc', bisque: 'ffe4c4', black: '0', blanKedOmond: 'ffebcd', Xe: 'ff', XeviTet: '8a2be2', bPwn: 'a52a2a', burlywood: 'deb887', caMtXe: '5f9ea0', KartYuse: '7fff00', KocTate: 'd2691e', cSO: 'ff7f50', cSnflowerXe: '6495ed', cSnsilk: 'fff8dc', crimson: 'dc143c', cyan: 'ffff', xXe: '8b', xcyan: '8b8b', xgTMnPd: 'b8860b', xWay: 'a9a9a9', xgYF: '6400', xgYy: 'a9a9a9', xkhaki: 'bdb76b', xmagFta: '8b008b', xTivegYF: '556b2f', xSange: 'ff8c00', xScEd: '9932cc', xYd: '8b0000', xsOmon: 'e9967a', xsHgYF: '8fbc8f', xUXe: '483d8b', xUWay: '2f4f4f', xUgYy: '2f4f4f', xQe: 'ced1', xviTet: '9400d3', dAppRk: 'ff1493', dApskyXe: 'bfff', dimWay: '696969', dimgYy: '696969', dodgerXe: '1e90ff', fiYbrick: 'b22222', flSOwEte: 'fffaf0', foYstWAn: '228b22', fuKsia: 'ff00ff', gaRsbSo: 'dcdcdc', ghostwEte: 'f8f8ff', gTd: 'ffd700', gTMnPd: 'daa520', Way: '808080', gYF: '8000', gYFLw: 'adff2f', gYy: '808080', honeyMw: 'f0fff0', hotpRk: 'ff69b4', RdianYd: 'cd5c5c', Rdigo: '4b0082', ivSy: 'fffff0', khaki: 'f0e68c', lavFMr: 'e6e6fa', lavFMrXsh: 'fff0f5', lawngYF: '7cfc00', NmoncEffon: 'fffacd', ZXe: 'add8e6', ZcSO: 'f08080', Zcyan: 'e0ffff', ZgTMnPdLw: 'fafad2', ZWay: 'd3d3d3', ZgYF: '90ee90', ZgYy: 'd3d3d3', ZpRk: 'ffb6c1', ZsOmon: 'ffa07a', ZsHgYF: '20b2aa', ZskyXe: '87cefa', ZUWay: '778899', ZUgYy: '778899', ZstAlXe: 'b0c4de', ZLw: 'ffffe0', lime: 'ff00', limegYF: '32cd32', lRF: 'faf0e6', magFta: 'ff00ff', maPon: '800000', VaquamarRe: '66cdaa', VXe: 'cd', VScEd: 'ba55d3', VpurpN: '9370db', VsHgYF: '3cb371', VUXe: '7b68ee', VsprRggYF: 'fa9a', VQe: '48d1cc', VviTetYd: 'c71585', midnightXe: '191970', mRtcYam: 'f5fffa', mistyPse: 'ffe4e1', moccasR: 'ffe4b5', navajowEte: 'ffdead', navy: '80', Tdlace: 'fdf5e6', Tive: '808000', TivedBb: '6b8e23', Sange: 'ffa500', SangeYd: 'ff4500', ScEd: 'da70d6', pOegTMnPd: 'eee8aa', pOegYF: '98fb98', pOeQe: 'afeeee', pOeviTetYd: 'db7093', papayawEp: 'ffefd5', pHKpuff: 'ffdab9', peru: 'cd853f', pRk: 'ffc0cb', plum: 'dda0dd', powMrXe: 'b0e0e6', purpN: '800080', YbeccapurpN: '663399', Yd: 'ff0000', Psybrown: 'bc8f8f', PyOXe: '4169e1', saddNbPwn: '8b4513', sOmon: 'fa8072', sandybPwn: 'f4a460', sHgYF: '2e8b57', sHshell: 'fff5ee', siFna: 'a0522d', silver: 'c0c0c0', skyXe: '87ceeb', UXe: '6a5acd', UWay: '708090', UgYy: '708090', snow: 'fffafa', sprRggYF: 'ff7f', stAlXe: '4682b4', tan: 'd2b48c', teO: '8080', tEstN: 'd8bfd8', tomato: 'ff6347', Qe: '40e0d0', viTet: 'ee82ee', JHt: 'f5deb3', wEte: 'ffffff', wEtesmoke: 'f5f5f5', Lw: 'ffff00', LwgYF: '9acd32' }; let T; function R (t) { T || (T = (function () { const t = {}; const e = Object.keys(A); const i = Object.keys(O); let n, o, s, a, r; for (n = 0; n < e.length; n++) { for (a = r = e[n], o = 0; o < i.length; o++) { s = i[o], r = r.replace(s, O[s]) }s = parseInt(A[a], 16), t[r] = [s >> 16 & 255, s >> 8 & 255, 255 & s] } return t }()), T.transparent = [0, 0, 0, 0]); const e = T[t.toLowerCase()]; return e && { r: e[0], g: e[1], b: e[2], a: e.length === 4 ? e[3] : 255 } } function L (t, e, i) { if (t) { let n = k(t); n[e] = Math.max(0, Math.min(n[e] + n[e] * i, e === 0 ? 360 : 1)), n = P(n), t.r = n[0], t.g = n[1], t.b = n[2] } } function E (t, e) { return t ? Object.assign(e || {}, t) : t } function I (t) { let e = { r: 0, g: 0, b: 0, a: 255 }; return Array.isArray(t) ? t.length >= 3 && (e = { r: t[0], g: t[1], b: t[2], a: 255 }, t.length > 3 && (e.a = m(t[3]))) : (e = E(t, { r: 0, g: 0, b: 0, a: 1 })).a = m(e.a), e } function z (t) { return t.charAt(0) === 'r' ? (function (t) { const e = _.exec(t); let i; let n; let o; let s = 255; if (e) { if (e[7] !== i) { const t = +e[7]; s = 255 & (e[8] ? p(t) : 255 * t) } return i = +e[1], n = +e[3], o = +e[5], i = 255 & (e[2] ? p(i) : i), n = 255 & (e[4] ? p(n) : n), o = 255 & (e[6] ? p(o) : o), { r: i, g: n, b: o, a: s } } }(t)) : C(t) } class F {constructor (t) { if (t instanceof F) { return t } const e = typeof t; let i; let n, o, s; e === 'object' ? i = I(t) : e === 'string' && (s = (n = t).length, n[0] === '#' && (s === 4 || s === 5 ? o = { r: 255 & 17 * r[n[1]], g: 255 & 17 * r[n[2]], b: 255 & 17 * r[n[3]], a: s === 5 ? 17 * r[n[4]] : 255 } : s !== 7 && s !== 9 || (o = { r: r[n[1]] << 4 | r[n[2]], g: r[n[3]] << 4 | r[n[4]], b: r[n[5]] << 4 | r[n[6]], a: s === 9 ? r[n[7]] << 4 | r[n[8]] : 255 })), i = o || R(t) || z(t)), this._rgb = i, this._valid = !!i } get valid () { return this._valid } get rgb () { const t = E(this._rgb); return t && (t.a = x(t.a)), t } set rgb (t) { this._rgb = I(t) }rgbString () { return this._valid ? (t = this._rgb) && (t.a < 255 ? `rgba(${t.r}, ${t.g}, ${t.b}, ${x(t.a)})` : `rgb(${t.r}, ${t.g}, ${t.b})`) : this._rgb; let t }hexString () { return this._valid ? u(this._rgb) : this._rgb }hslString () { return this._valid ? (function (t) { if (!t) { return } const e = k(t); const i = e[0]; const n = b(e[1]); const o = b(e[2]); return t.a < 255 ? `hsla(${i}, ${n}%, ${o}%, ${x(t.a)})` : `hsl(${i}, ${n}%, ${o}%)` }(this._rgb)) : this._rgb }mix (t, e) { const i = this; if (t) { const n = i.rgb; const o = t.rgb; let s; const a = e === s ? 0.5 : e; const r = 2 * a - 1; const l = n.a - o.a; const c = ((r * l == -1 ? r : (r + l) / (1 + r * l)) + 1) / 2; s = 1 - c, n.r = 255 & c * n.r + s * o.r + 0.5, n.g = 255 & c * n.g + s * o.g + 0.5, n.b = 255 & c * n.b + s * o.b + 0.5, n.a = a * n.a + (1 - a) * o.a, i.rgb = n } return i }clone () { return new F(this.rgb) }alpha (t) { return this._rgb.a = m(t), this }clearer (t) { return this._rgb.a *= 1 - t, this }greyscale () { const t = this._rgb; const e = f(0.3 * t.r + 0.59 * t.g + 0.11 * t.b); return t.r = t.g = t.b = e, this }opaquer (t) { return this._rgb.a *= 1 + t, this }negate () { const t = this._rgb; return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this }lighten (t) { return L(this._rgb, 2, t), this }darken (t) { return L(this._rgb, 2, -t), this }saturate (t) { return L(this._rgb, 1, t), this }desaturate (t) { return L(this._rgb, 1, -t), this }rotate (t) { return (function (t, e) { let i = k(t); i[0] = D(i[0] + e), i = P(i), t.r = i[0], t.g = i[1], t.b = i[2] }(this._rgb, t)), this }} function V (t) { return new F(t) } const B = t => t instanceof CanvasGradient || t instanceof CanvasPattern; function W (t) { return B(t) ? t : V(t) } function H (t) { return B(t) ? t : V(t).saturate(0.5).darken(0.1).hexString() } function N () {} const j = (function () { let t = 0; return function () { return t++ } }()); function $ (t) { return t == null } function Y (t) { if (Array.isArray && Array.isArray(t)) { return !0 } const e = Object.prototype.toString.call(t); return e.substr(0, 7) === '[object' && e.substr(-6) === 'Array]' } function U (t) { return t !== null && Object.prototype.toString.call(t) === '[object Object]' } const X = t => (typeof t === 'number' || t instanceof Number) && isFinite(+t); function q (t, e) { return X(t) ? t : e } function K (t, e) { return void 0 === t ? e : t } const G = (t, e) => typeof t === 'string' && t.endsWith('%') ? parseFloat(t) / 100 : t / e; const Z = (t, e) => typeof t === 'string' && t.endsWith('%') ? parseFloat(t) / 100 * e : +t; function Q (t, e, i) { if (t && typeof t.call === 'function') { return t.apply(i, e) } } function J (t, e, i, n) { let o, s, a; if (Y(t)) { if (s = t.length, n) { for (o = s - 1; o >= 0; o--) { e.call(i, t[o], o) } } else { for (o = 0; o < s; o++) { e.call(i, t[o], o) } } } else if (U(t)) { for (a = Object.keys(t), s = a.length, o = 0; o < s; o++) { e.call(i, t[a[o]], a[o]) } } } function tt (t, e) { let i, n, o, s; if (!t || !e || t.length !== e.length) { return !1 } for (i = 0, n = t.length; i < n; ++i) { if (o = t[i], s = e[i], o.datasetIndex !== s.datasetIndex || o.index !== s.index) { return !1 } } return !0 } function et (t) { if (Y(t)) { return t.map(et) } if (U(t)) { const e = Object.create(null); const i = Object.keys(t); const n = i.length; let o = 0; for (;o < n; ++o) { e[i[o]] = et(t[i[o]]) } return e } return t } function it (t) { return ['__proto__', 'prototype', 'constructor'].indexOf(t) === -1 } function nt (t, e, i, n) { if (!it(t)) { return } const o = e[t]; const s = i[t]; U(o) && U(s) ? ot(o, s, n) : e[t] = et(s) } function ot (t, e, i) { const n = Y(e) ? e : [e]; const o = n.length; if (!U(t)) { return t } const s = (i = i || {}).merger || nt; for (let a = 0; a < o; ++a) { if (!U(e = n[a])) { continue } const o = Object.keys(e); for (let n = 0, a = o.length; n < a; ++n) { s(o[n], t, e, i) } } return t } function st (t, e) { return ot(t, e, { merger: at }) } function at (t, e, i) { if (!it(t)) { return } const n = e[t]; const o = i[t]; U(n) && U(o) ? st(n, o) : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = et(o)) } function rt (t, e) { const i = t.indexOf('.', e); return i === -1 ? t.length : i } function lt (t, e) { if (e === '') { return t } let i = 0; let n = rt(e, i); for (;t && n > i;) { t = t[e.substr(i, n - i)], i = n + 1, n = rt(e, i) } return t } function ct (t) { return t.charAt(0).toUpperCase() + t.slice(1) } const ht = t => void 0 !== t; const dt = t => typeof t === 'function'; const ut = (t, e) => { if (t.size !== e.size) { return !1 } for (const i of t) { if (!e.has(i)) { return !1 } } return !0 }; const ft = Object.create(null); const gt = Object.create(null); function pt (t, e) { if (!e) { return t } const i = e.split('.'); for (let e = 0, n = i.length; e < n; ++e) { const n = i[e]; t = t[n] || (t[n] = Object.create(null)) } return t } function mt (t, e, i) { return typeof e === 'string' ? ot(pt(t, e), i) : ot(pt(t, ''), e) } const xt = new class {constructor (t) { this.animation = void 0, this.backgroundColor = 'rgba(0,0,0,0.1)', this.borderColor = 'rgba(0,0,0,0.1)', this.color = '#666', this.datasets = {}, this.devicePixelRatio = t => t.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'], this.font = { family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", size: 12, style: 'normal', lineHeight: 1.2, weight: null }, this.hover = {}, this.hoverBackgroundColor = (t, e) => H(e.backgroundColor), this.hoverBorderColor = (t, e) => H(e.borderColor), this.hoverColor = (t, e) => H(e.color), this.indexAxis = 'x', this.interaction = { mode: 'nearest', intersect: !0 }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.describe(t) }set (t, e) { return mt(this, t, e) }get (t) { return pt(this, t) }describe (t, e) { return mt(gt, t, e) }override (t, e) { return mt(ft, t, e) }route (t, e, i, n) { const o = pt(this, t); const s = pt(this, i); const a = '_' + e; Object.defineProperties(o, { [a]: { value: o[e], writable: !0 }, [e]: { enumerable: !0, get () { const t = this[a]; const e = s[n]; return U(t) ? Object.assign({}, e, t) : K(t, e) }, set (t) { this[a] = t } } }) }}({ _scriptable: t => !t.startsWith('on'), _indexable: t => t !== 'events', hover: { _fallback: 'interaction' }, interaction: { _scriptable: !1, _indexable: !1 } }); const bt = Math.PI; const _t = 2 * bt; const yt = _t + bt; const vt = Number.POSITIVE_INFINITY; const wt = bt / 180; const Mt = bt / 2; const kt = bt / 4; const St = 2 * bt / 3; const Pt = Math.log10; const Dt = Math.sign; function Ct (t) { const e = Math.pow(10, Math.floor(Pt(t))); const i = t / e; return (i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * e } function Ot (t) { const e = []; const i = Math.sqrt(t); let n; for (n = 1; n < i; n++) { t % n == 0 && (e.push(n), e.push(t / n)) } return i === (0 | i) && e.push(i), e.sort((t, e) => t - e).pop(), e } function At (t) { return !isNaN(parseFloat(t)) && isFinite(t) } function Tt (t, e, i) { return Math.abs(t - e) < i } function Rt (t, e) { const i = Math.round(t); return i - e <= t && i + e >= t } function Lt (t, e, i) { let n, o, s; for (n = 0, o = t.length; n < o; n++) { s = t[n][i], isNaN(s) || (e.min = Math.min(e.min, s), e.max = Math.max(e.max, s)) } } function Et (t) { return t * (bt / 180) } function It (t) { return t * (180 / bt) } function zt (t) { if (!X(t)) { return } let e = 1; let i = 0; for (;Math.round(t * e) / e !== t;) { e *= 10, i++ } return i } function Ft (t, e) { const i = e.x - t.x; const n = e.y - t.y; const o = Math.sqrt(i * i + n * n); let s = Math.atan2(n, i); return s < -0.5 * bt && (s += _t), { angle: s, distance: o } } function Vt (t, e) { return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)) } function Bt (t, e) { return (t - e + yt) % _t - bt } function Wt (t) { return (t % _t + _t) % _t } function Ht (t, e, i) { const n = Wt(t); const o = Wt(e); const s = Wt(i); const a = Wt(o - n); const r = Wt(s - n); const l = Wt(n - o); const c = Wt(n - s); return n === o || n === s || a > r && l < c } function Nt (t, e, i) { return Math.max(e, Math.min(i, t)) } function jt (t) { return Nt(t, -32768, 32767) } function $t (t) { return !t || $(t.size) || $(t.family) ? null : (t.style ? t.style + ' ' : '') + (t.weight ? t.weight + ' ' : '') + t.size + 'px ' + t.family } function Yt (t, e, i, n, o) { let s = e[o]; return s || (s = e[o] = t.measureText(o).width, i.push(o)), s > n && (n = s), n } function Ut (t, e, i, n) { let o = (n = n || {}).data = n.data || {}; let s = n.garbageCollect = n.garbageCollect || []; n.font !== e && (o = n.data = {}, s = n.garbageCollect = [], n.font = e), t.save(), t.font = e; let a = 0; const r = i.length; let l, c, h, d, u; for (l = 0; l < r; l++) { if (d = i[l], d != null && !0 !== Y(d)) { a = Yt(t, o, s, a, d) } else if (Y(d)) { for (c = 0, h = d.length; c < h; c++) { u = d[c], u == null || Y(u) || (a = Yt(t, o, s, a, u)) } } }t.restore(); const f = s.length / 2; if (f > i.length) { for (l = 0; l < f; l++) { delete o[s[l]] } s.splice(0, f) } return a } function Xt (t, e, i) { const n = t.currentDevicePixelRatio; const o = i !== 0 ? Math.max(i / 2, 0.5) : 0; return Math.round((e - o) * n) / n + o } function qt (t, e) { (e = e || t.getContext('2d')).save(), e.resetTransform(), e.clearRect(0, 0, t.width, t.height), e.restore() } function Kt (t, e, i, n) { let o, s, a, r, l; const c = e.pointStyle; const h = e.rotation; const d = e.radius; let u = (h || 0) * wt; if (c && typeof c === 'object' && (o = c.toString(), o === '[object HTMLImageElement]' || o === '[object HTMLCanvasElement]')) { return t.save(), t.translate(i, n), t.rotate(u), t.drawImage(c, -c.width / 2, -c.height / 2, c.width, c.height), void t.restore() } if (!(isNaN(d) || d <= 0)) { switch (t.beginPath(), c) { default:t.arc(i, n, d, 0, _t), t.closePath(); break; case 'triangle':t.moveTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), t.closePath(); break; case 'rectRounded':l = 0.516 * d, r = d - l, s = Math.cos(u + kt) * r, a = Math.sin(u + kt) * r, t.arc(i - s, n - a, l, u - bt, u - Mt), t.arc(i + a, n - s, l, u - Mt, u), t.arc(i + s, n + a, l, u, u + Mt), t.arc(i - a, n + s, l, u + Mt, u + bt), t.closePath(); break; case 'rect':if (!h) { r = Math.SQRT1_2 * d, t.rect(i - r, n - r, 2 * r, 2 * r); break }u += kt; case 'rectRot':s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + a, n - s), t.lineTo(i + s, n + a), t.lineTo(i - a, n + s), t.closePath(); break; case 'crossRot':u += kt; case 'cross':s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s); break; case 'star':s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s), u += kt, s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s); break; case 'line':s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a); break; case 'dash':t.moveTo(i, n), t.lineTo(i + Math.cos(u) * d, n + Math.sin(u) * d) }t.fill(), e.borderWidth > 0 && t.stroke() } } function Gt (t, e, i) { return i = i || 0.5, t && t.x > e.left - i && t.x < e.right + i && t.y > e.top - i && t.y < e.bottom + i } function Zt (t, e) { t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip() } function Qt (t) { t.restore() } function Jt (t, e, i, n, o) { if (!e) { return t.lineTo(i.x, i.y) } if (o === 'middle') { const n = (e.x + i.x) / 2; t.lineTo(n, e.y), t.lineTo(n, i.y) } else { o === 'after' != !!n ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y) } t.lineTo(i.x, i.y) } function te (t, e, i, n) { if (!e) { return t.lineTo(i.x, i.y) } t.bezierCurveTo(n ? e.cp1x : e.cp2x, n ? e.cp1y : e.cp2y, n ? i.cp2x : i.cp1x, n ? i.cp2y : i.cp1y, i.x, i.y) } function ee (t, e, i, n, o, s = {}) { const a = Y(e) ? e : [e]; const r = s.strokeWidth > 0 && s.strokeColor !== ''; let l, c; for (t.save(), s.translation && t.translate(s.translation[0], s.translation[1]), $(s.rotation) || t.rotate(s.rotation), t.font = o.string, s.color && (t.fillStyle = s.color), s.textAlign && (t.textAlign = s.textAlign), s.textBaseline && (t.textBaseline = s.textBaseline), l = 0; l < a.length; ++l) { if (c = a[l], r && (s.strokeColor && (t.strokeStyle = s.strokeColor), $(s.strokeWidth) || (t.lineWidth = s.strokeWidth), t.strokeText(c, i, n, s.maxWidth)), t.fillText(c, i, n, s.maxWidth), s.strikethrough || s.underline) { const e = t.measureText(c); const o = i - e.actualBoundingBoxLeft; const a = i + e.actualBoundingBoxRight; const r = n - e.actualBoundingBoxAscent; const l = n + e.actualBoundingBoxDescent; const h = s.strikethrough ? (r + l) / 2 : l; t.strokeStyle = t.fillStyle, t.beginPath(), t.lineWidth = s.decorationWidth || 2, t.moveTo(o, h), t.lineTo(a, h), t.stroke() }n += o.lineHeight }t.restore() } function ie (t, e) { const { x: i, y: n, w: o, h: s, radius: a } = e; t.arc(i + a.topLeft, n + a.topLeft, a.topLeft, -Mt, bt, !0), t.lineTo(i, n + s - a.bottomLeft), t.arc(i + a.bottomLeft, n + s - a.bottomLeft, a.bottomLeft, bt, Mt, !0), t.lineTo(i + o - a.bottomRight, n + s), t.arc(i + o - a.bottomRight, n + s - a.bottomRight, a.bottomRight, Mt, 0, !0), t.lineTo(i + o, n + a.topRight), t.arc(i + o - a.topRight, n + a.topRight, a.topRight, 0, -Mt, !0), t.lineTo(i + a.topLeft, n) } function ne (t, e, i) { i = i || (i => t[i] < e); let n; let o = t.length - 1; let s = 0; for (;o - s > 1;) { n = s + o >> 1, i(n) ? s = n : o = n } return { lo: s, hi: o } } const oe = (t, e, i) => ne(t, i, n => t[n][e] < i); const se = (t, e, i) => ne(t, i, n => t[n][e] >= i); function ae (t, e, i) { let n = 0; let o = t.length; for (;n < o && t[n] < e;) { n++ } for (;o > n && t[o - 1] > i;) { o-- } return n > 0 || o < t.length ? t.slice(n, o) : t } const re = ['push', 'pop', 'shift', 'splice', 'unshift']; function le (t, e) { t._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, '_chartjs', { configurable: !0, enumerable: !1, value: { listeners: [e] } }), re.forEach(e => { const i = '_onData' + ct(e); const n = t[e]; Object.defineProperty(t, e, { configurable: !0, enumerable: !1, value (...e) { const o = n.apply(this, e); return t._chartjs.listeners.forEach(t => { typeof t[i] === 'function' && t[i](...e) }), o } }) })) } function ce (t, e) { const i = t._chartjs; if (!i) { return } const n = i.listeners; const o = n.indexOf(e); o !== -1 && n.splice(o, 1), n.length > 0 || (re.forEach(e => { delete t[e] }), delete t._chartjs) } function he (t) { const e = new Set(); let i, n; for (i = 0, n = t.length; i < n; ++i) { e.add(t[i]) } if (e.size === n) { return t } const o = []; return e.forEach(t => { o.push(t) }), o } function de (t) { let e = t.parentNode; return e && e.toString() === '[object ShadowRoot]' && (e = e.host), e } function ue (t, e, i) { let n; return typeof t === 'string' ? (n = parseInt(t, 10), t.indexOf('%') !== -1 && (n = n / 100 * e.parentNode[i])) : n = t, n } const fe = t => window.getComputedStyle(t, null); function ge (t, e) { return fe(t).getPropertyValue(e) } const pe = ['top', 'right', 'bottom', 'left']; function me (t, e, i) { const n = {}; i = i ? '-' + i : ''; for (let o = 0; o < 4; o++) { const s = pe[o]; n[s] = parseFloat(t[e + '-' + s + i]) || 0 } return n.width = n.left + n.right, n.height = n.top + n.bottom, n } function xe (t, e) { const { canvas: i, currentDevicePixelRatio: n } = e; const o = fe(i); const s = o.boxSizing === 'border-box'; const a = me(o, 'padding'); const r = me(o, 'border', 'width'); const { x: l, y: c, box: h } = (function (t, e) { const i = t.native || t; const n = i.touches; const o = n && n.length ? n[0] : i; const { offsetX: s, offsetY: a } = o; let r; let l; let c = !1; if (((t, e, i) => (t > 0 || e > 0) && (!i || !i.shadowRoot))(s, a, i.target)) { r = s, l = a } else { const t = e.getBoundingClientRect(); r = o.clientX - t.left, l = o.clientY - t.top, c = !0 } return { x: r, y: l, box: c } }(t, i)); const d = a.left + (h && r.left); const u = a.top + (h && r.top); let { width: f, height: g } = e; return s && (f -= a.width + r.width, g -= a.height + r.height), { x: Math.round((l - d) / f * i.width / n), y: Math.round((c - u) / g * i.height / n) } } const be = t => Math.round(10 * t) / 10; function _e (t, e, i, n) { const o = fe(t); const s = me(o, 'margin'); const a = ue(o.maxWidth, t, 'clientWidth') || vt; const r = ue(o.maxHeight, t, 'clientHeight') || vt; const l = (function (t, e, i) { let n, o; if (void 0 === e || void 0 === i) { const s = de(t); if (s) { const t = s.getBoundingClientRect(); const a = fe(s); const r = me(a, 'border', 'width'); const l = me(a, 'padding'); e = t.width - l.width - r.width, i = t.height - l.height - r.height, n = ue(a.maxWidth, s, 'clientWidth'), o = ue(a.maxHeight, s, 'clientHeight') } else { e = t.clientWidth, i = t.clientHeight } } return { width: e, height: i, maxWidth: n || vt, maxHeight: o || vt } }(t, e, i)); let { width: c, height: h } = l; if (o.boxSizing === 'content-box') { const t = me(o, 'border', 'width'); const e = me(o, 'padding'); c -= e.width + t.width, h -= e.height + t.height } return c = Math.max(0, c - s.width), h = Math.max(0, n ? Math.floor(c / n) : h - s.height), c = be(Math.min(c, a, l.maxWidth)), h = be(Math.min(h, r, l.maxHeight)), c && !h && (h = be(c / 2)), { width: c, height: h } } function ye (t, e, i) { const n = t.currentDevicePixelRatio = e || 1; const { canvas: o, width: s, height: a } = t; o.height = a * n, o.width = s * n, t.ctx.setTransform(n, 0, 0, n, 0, 0), o.style && (i || !o.style.height && !o.style.width) && (o.style.height = a + 'px', o.style.width = s + 'px') } const ve = (function () { let t = !1; try { const e = { get passive () { return t = !0, !1 } }; window.addEventListener('test', null, e), window.removeEventListener('test', null, e) } catch (t) {} return t }()); function we (t, e) { const i = ge(t, e); const n = i && i.match(/^(\d+)(\.\d+)?px$/); return n ? +n[1] : void 0 } function Me (t, e) { return 'native' in t ? { x: t.x, y: t.y } : xe(t, e) } function ke (t, e, i, n) { const { controller: o, data: s, _sorted: a } = t; const r = o._cachedMeta.iScale; if (r && e === r.axis && a && s.length) { const t = r._reversePixels ? se : oe; if (!n) { return t(s, e, i) } if (o._sharedOptions) { const n = s[0]; const o = typeof n.getRange === 'function' && n.getRange(e); if (o) { const n = t(s, e, i - o); const a = t(s, e, i + o); return { lo: n.lo, hi: a.hi } } } } return { lo: 0, hi: s.length - 1 } } function Se (t, e, i, n, o) { const s = t.getSortedVisibleDatasetMetas(); const a = i[e]; for (let t = 0, i = s.length; t < i; ++t) { const { index: i, data: r } = s[t]; const { lo: l, hi: c } = ke(s[t], e, a, o); for (let t = l; t <= c; ++t) { const e = r[t]; e.skip || n(e, i, t) } } } function Pe (t, e, i, n) { const o = []; if (!Gt(e, t.chartArea, t._minPadding)) { return o } return Se(t, i, e, function (t, i, s) { t.inRange(e.x, e.y, n) && o.push({ element: t, datasetIndex: i, index: s }) }, !0), o } function De (t, e, i, n, o) { const s = (function (t) { const e = t.indexOf('x') !== -1; const i = t.indexOf('y') !== -1; return function (t, n) { const o = e ? Math.abs(t.x - n.x) : 0; const s = i ? Math.abs(t.y - n.y) : 0; return Math.sqrt(Math.pow(o, 2) + Math.pow(s, 2)) } }(i)); let a = Number.POSITIVE_INFINITY; let r = []; if (!Gt(e, t.chartArea, t._minPadding)) { return r } return Se(t, i, e, function (t, i, l) { if (n && !t.inRange(e.x, e.y, o)) { return } const c = t.getCenterPoint(o); const h = s(e, c); h < a ? (r = [{ element: t, datasetIndex: i, index: l }], a = h) : h === a && r.push({ element: t, datasetIndex: i, index: l }) }), r } function Ce (t, e, i, n) { const o = Me(e, t); const s = []; const a = i.axis; const r = a === 'x' ? 'inXRange' : 'inYRange'; let l = !1; return (function (t, e) { const i = t.getSortedVisibleDatasetMetas(); let n, o, s; for (let t = 0, a = i.length; t < a; ++t) { ({ index: n, data: o } = i[t]); for (let t = 0, i = o.length; t < i; ++t) { s = o[t], s.skip || e(s, n, t) } } }(t, (t, e, i) => { t[r](o[a], n) && s.push({ element: t, datasetIndex: e, index: i }), t.inRange(o.x, o.y, n) && (l = !0) })), i.intersect && !l ? [] : s } const Oe = { modes: { index (t, e, i, n) { const o = Me(e, t); const s = i.axis || 'x'; const a = i.intersect ? Pe(t, o, s, n) : De(t, o, s, !1, n); const r = []; return a.length ? (t.getSortedVisibleDatasetMetas().forEach(t => { const e = a[0].index; const i = t.data[e]; i && !i.skip && r.push({ element: i, datasetIndex: t.index, index: e }) }), r) : [] }, dataset (t, e, i, n) { const o = Me(e, t); const s = i.axis || 'xy'; let a = i.intersect ? Pe(t, o, s, n) : De(t, o, s, !1, n); if (a.length > 0) { const e = a[0].datasetIndex; const i = t.getDatasetMeta(e).data; a = []; for (let t = 0; t < i.length; ++t) { a.push({ element: i[t], datasetIndex: e, index: t }) } } return a }, point: (t, e, i, n) => Pe(t, Me(e, t), i.axis || 'xy', n), nearest: (t, e, i, n) => De(t, Me(e, t), i.axis || 'xy', i.intersect, n), x: (t, e, i, n) => (i.axis = 'x', Ce(t, e, i, n)), y: (t, e, i, n) => (i.axis = 'y', Ce(t, e, i, n)) } }; const Ae = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/); const Te = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/); function Re (t, e) { const i = ('' + t).match(Ae); if (!i || i[1] === 'normal') { return 1.2 * e } switch (t = +i[2], i[3]) { case 'px':return t; case '%':t /= 100 } return e * t } function Le (t, e) { const i = {}; const n = U(e); const o = n ? Object.keys(e) : e; const s = U(t) ? n ? i => K(t[i], t[e[i]]) : e => t[e] : () => t; for (const t of o) { i[t] = +s(t) || 0 } return i } function Ee (t) { return Le(t, { top: 'y', right: 'x', bottom: 'y', left: 'x' }) } function Ie (t) { return Le(t, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) } function ze (t) { const e = Ee(t); return e.width = e.left + e.right, e.height = e.top + e.bottom, e } function Fe (t, e) { t = t || {}, e = e || xt.font; let i = K(t.size, e.size); typeof i === 'string' && (i = parseInt(i, 10)); let n = K(t.style, e.style); n && !('' + n).match(Te) && (console.warn('Invalid font style specified: "' + n + '"'), n = ''); const o = { family: K(t.family, e.family), lineHeight: Re(K(t.lineHeight, e.lineHeight), i), size: i, style: n, weight: K(t.weight, e.weight), string: '' }; return o.string = $t(o), o } function Ve (t, e, i, n) { let o; let s; let a; let r = !0; for (o = 0, s = t.length; o < s; ++o) { if (a = t[o], void 0 !== a && (void 0 !== e && typeof a === 'function' && (a = a(e), r = !1), void 0 !== i && Y(a) && (a = a[i % a.length], r = !1), void 0 !== a)) { return n && !r && (n.cacheable = !1), a } } } function Be (t, e) { const { min: i, max: n } = t; return { min: i - Math.abs(Z(e, i)), max: n + Z(e, n) } } const We = ['left', 'top', 'right', 'bottom']; function He (t, e) { return t.filter(t => t.pos === e) } function Ne (t, e) { return t.filter(t => We.indexOf(t.pos) === -1 && t.box.axis === e) } function je (t, e) { return t.sort((t, i) => { const n = e ? i : t; const o = e ? t : i; return n.weight === o.weight ? n.index - o.index : n.weight - o.weight }) } function $e (t, e, i, n) { return Math.max(t[i], e[i]) + Math.max(t[n], e[n]) } function Ye (t, e) { t.top = Math.max(t.top, e.top), t.left = Math.max(t.left, e.left), t.bottom = Math.max(t.bottom, e.bottom), t.right = Math.max(t.right, e.right) } function Ue (t, e, i) { const n = i.box; const o = t.maxPadding; U(i.pos) || (i.size && (t[i.pos] -= i.size), i.size = i.horizontal ? n.height : n.width, t[i.pos] += i.size), n.getPadding && Ye(o, n.getPadding()); const s = Math.max(0, e.outerWidth - $e(o, t, 'left', 'right')); const a = Math.max(0, e.outerHeight - $e(o, t, 'top', 'bottom')); const r = s !== t.w; const l = a !== t.h; return t.w = s, t.h = a, i.horizontal ? { same: r, other: l } : { same: l, other: r } } function Xe (t, e) { const i = e.maxPadding; function n (t) { const n = { left: 0, top: 0, right: 0, bottom: 0 }; return t.forEach(t => { n[t] = Math.max(e[t], i[t]) }), n } return n(t ? ['left', 'right'] : ['top', 'bottom']) } function qe (t, e, i) { const n = []; let o, s, a, r, l, c; for (o = 0, s = t.length, l = 0; o < s; ++o) { a = t[o], r = a.box, r.update(a.width || e.w, a.height || e.h, Xe(a.horizontal, e)); const { same: s, other: h } = Ue(e, i, a); l |= s && n.length, c = c || h, r.fullSize || n.push(a) } return l && qe(n, e, i) || c } function Ke (t, e, i) { const n = i.padding; let o; let s; let a; let r; let l = e.x; let c = e.y; for (o = 0, s = t.length; o < s; ++o) { a = t[o], r = a.box, a.horizontal ? (r.left = r.fullSize ? n.left : e.left, r.right = r.fullSize ? i.outerWidth - n.right : e.left + e.w, r.top = c, r.bottom = c + r.height, r.width = r.right - r.left, c = r.bottom) : (r.left = l, r.right = l + r.width, r.top = r.fullSize ? n.top : e.top, r.bottom = r.fullSize ? i.outerHeight - n.right : e.top + e.h, r.height = r.bottom - r.top, l = r.right) }e.x = l, e.y = c }xt.set('layout', { padding: { top: 0, right: 0, bottom: 0, left: 0 } }); const Ge = { addBox (t, e) { t.boxes || (t.boxes = []), e.fullSize = e.fullSize || !1, e.position = e.position || 'top', e.weight = e.weight || 0, e._layers = e._layers || function () { return [{ z: 0, draw (t) { e.draw(t) } }] }, t.boxes.push(e) }, removeBox (t, e) { const i = t.boxes ? t.boxes.indexOf(e) : -1; i !== -1 && t.boxes.splice(i, 1) }, configure (t, e, i) { e.fullSize = i.fullSize, e.position = i.position, e.weight = i.weight }, update (t, e, i, n) { if (!t) { return } const o = ze(t.options.layout.padding); const s = e - o.width; const a = i - o.height; const r = (function (t) { const e = (function (t) { const e = []; let i, n, o; for (i = 0, n = (t || []).length; i < n; ++i) { o = t[i], e.push({ index: i, box: o, pos: o.position, horizontal: o.isHorizontal(), weight: o.weight }) } return e }(t)); const i = je(e.filter(t => t.box.fullSize), !0); const n = je(He(e, 'left'), !0); const o = je(He(e, 'right')); const s = je(He(e, 'top'), !0); const a = je(He(e, 'bottom')); const r = Ne(e, 'x'); const l = Ne(e, 'y'); return { fullSize: i, leftAndTop: n.concat(s), rightAndBottom: o.concat(l).concat(a).concat(r), chartArea: He(e, 'chartArea'), vertical: n.concat(o).concat(l), horizontal: s.concat(a).concat(r) } }(t.boxes)); const l = r.vertical; const c = r.horizontal; J(t.boxes, t => { typeof t.beforeLayout === 'function' && t.beforeLayout() }); const h = l.reduce((t, e) => e.box.options && !1 === e.box.options.display ? t : t + 1, 0) || 1; const d = Object.freeze({ outerWidth: e, outerHeight: i, padding: o, availableWidth: s, availableHeight: a, vBoxMaxWidth: s / 2 / h, hBoxMaxHeight: a / 2 }); const u = Object.assign({}, o); Ye(u, ze(n)); const f = Object.assign({ maxPadding: u, w: s, h: a, x: o.left, y: o.top }, o); !(function (t, e) { let i, n, o; for (i = 0, n = t.length; i < n; ++i) { o = t[i], o.horizontal ? (o.width = o.box.fullSize && e.availableWidth, o.height = e.hBoxMaxHeight) : (o.width = e.vBoxMaxWidth, o.height = o.box.fullSize && e.availableHeight) } }(l.concat(c), d)), qe(r.fullSize, f, d), qe(l, f, d), qe(c, f, d) && qe(l, f, d), (function (t) { const e = t.maxPadding; function i (i) { const n = Math.max(e[i] - t[i], 0); return t[i] += n, n }t.y += i('top'), t.x += i('left'), i('right'), i('bottom') }(f)), Ke(r.leftAndTop, f, d), f.x += f.w, f.y += f.h, Ke(r.rightAndBottom, f, d), t.chartArea = { left: f.left, top: f.top, right: f.left + f.w, bottom: f.top + f.h, height: f.h, width: f.w }, J(r.chartArea, e => { const i = e.box; Object.assign(i, t.chartArea), i.update(f.w, f.h) }) } }; class Ze {acquireContext (t, e) {}releaseContext (t) { return !1 }addEventListener (t, e, i) {}removeEventListener (t, e, i) {}getDevicePixelRatio () { return 1 }getMaximumSize (t, e, i, n) { return e = Math.max(0, e || t.width), i = i || t.height, { width: e, height: Math.max(0, n ? Math.floor(e / n) : i) } }isAttached (t) { return !0 }} class Qe extends Ze {acquireContext (t) { return t && t.getContext && t.getContext('2d') || null }} const Je = { touchstart: 'mousedown', touchmove: 'mousemove', touchend: 'mouseup', pointerenter: 'mouseenter', pointerdown: 'mousedown', pointermove: 'mousemove', pointerup: 'mouseup', pointerleave: 'mouseout', pointerout: 'mouseout' }; const ti = t => t === null || t === ''; const ei = !!ve && { passive: !0 }; function ii (t, e, i) { t.canvas.removeEventListener(e, i, ei) } function ni (t, e, i) { const n = t.canvas; const o = n && de(n) || n; const s = new MutationObserver(t => { const e = de(o); t.forEach(t => { for (let n = 0; n < t.addedNodes.length; n++) { const s = t.addedNodes[n]; s !== o && s !== e || i(t.target) } }) }); return s.observe(document, { childList: !0, subtree: !0 }), s } function oi (t, e, i) { const n = t.canvas; const o = n && de(n); if (!o) { return } const s = new MutationObserver(t => { t.forEach(t => { for (let e = 0; e < t.removedNodes.length; e++) { if (t.removedNodes[e] === n) { i(); break } } }) }); return s.observe(o, { childList: !0 }), s } const si = new Map(); let ai = 0; function ri () { const t = window.devicePixelRatio; t !== ai && (ai = t, si.forEach((e, i) => { i.currentDevicePixelRatio !== t && e() })) } function li (t, i, n) { const o = t.canvas; const s = o && de(o); if (!s) { return } const a = e((t, e) => { const i = s.clientWidth; n(t, e), i < s.clientWidth && n() }, window); const r = new ResizeObserver(t => { const e = t[0]; const i = e.contentRect.width; const n = e.contentRect.height; i === 0 && n === 0 || a(i, n) }); return r.observe(s), (function (t, e) { si.size || window.addEventListener('resize', ri), si.set(t, e) }(t, a)), r } function ci (t, e, i) { i && i.disconnect(), e === 'resize' && (function (t) { si.delete(t), si.size || window.removeEventListener('resize', ri) }(t)) } function hi (t, i, n) { const o = t.canvas; const s = e(e => { t.ctx !== null && n(function (t, e) { const i = Je[t.type] || t.type; const { x: n, y: o } = xe(t, e); return { type: i, chart: e, native: t, x: void 0 !== n ? n : null, y: void 0 !== o ? o : null } }(e, t)) }, t, t => { const e = t[0]; return [e, e.offsetX, e.offsetY] }); return (function (t, e, i) { t.addEventListener(e, i, ei) }(o, i, s)), s } class di extends Ze {acquireContext (t, e) { const i = t && t.getContext && t.getContext('2d'); return i && i.canvas === t ? ((function (t, e) { const i = t.style; const n = t.getAttribute('height'); const o = t.getAttribute('width'); if (t.$chartjs = { initial: { height: n, width: o, style: { display: i.display, height: i.height, width: i.width } } }, i.display = i.display || 'block', i.boxSizing = i.boxSizing || 'border-box', ti(o)) { const e = we(t, 'width'); void 0 !== e && (t.width = e) } if (ti(n)) { if (t.style.height === '') { t.height = t.width / (e || 2) } else { const e = we(t, 'height'); void 0 !== e && (t.height = e) } } }(t, e)), i) : null }releaseContext (t) { const e = t.canvas; if (!e.$chartjs) { return !1 } const i = e.$chartjs.initial; ['height', 'width'].forEach(t => { const n = i[t]; $(n) ? e.removeAttribute(t) : e.setAttribute(t, n) }); const n = i.style || {}; return Object.keys(n).forEach(t => { e.style[t] = n[t] }), e.width = e.width, delete e.$chartjs, !0 }addEventListener (t, e, i) { this.removeEventListener(t, e); const n = t.$proxies || (t.$proxies = {}); const o = { attach: ni, detach: oi, resize: li }[e] || hi; n[e] = o(t, e, i) }removeEventListener (t, e) { const i = t.$proxies || (t.$proxies = {}); const n = i[e]; if (!n) { return } ({ attach: ci, detach: ci, resize: ci }[e] || ii)(t, e, n), i[e] = void 0 }getDevicePixelRatio () { return window.devicePixelRatio }getMaximumSize (t, e, i, n) { return _e(t, e, i, n) }isAttached (t) { const e = de(t); return !(!e || !de(e)) }} const ui = Object.freeze({ __proto__: null, BasePlatform: Ze, BasicPlatform: Qe, DomPlatform: di }); const fi = t => t === 0 || t === 1; const gi = (t, e, i) => -Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * _t / i); const pi = (t, e, i) => Math.pow(2, -10 * t) * Math.sin((t - e) * _t / i) + 1; const mi = { linear: t => t, easeInQuad: t => t * t, easeOutQuad: t => -t * (t - 2), easeInOutQuad: t => (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1), easeInCubic: t => t * t * t, easeOutCubic: t => (t -= 1) * t * t + 1, easeInOutCubic: t => (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2), easeInQuart: t => t * t * t * t, easeOutQuart: t => -((t -= 1) * t * t * t - 1), easeInOutQuart: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2), easeInQuint: t => t * t * t * t * t, easeOutQuint: t => (t -= 1) * t * t * t * t + 1, easeInOutQuint: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2), easeInSine: t => 1 - Math.cos(t * Mt), easeOutSine: t => Math.sin(t * Mt), easeInOutSine: t => -0.5 * (Math.cos(bt * t) - 1), easeInExpo: t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)), easeOutExpo: t => t === 1 ? 1 : 1 - Math.pow(2, -10 * t), easeInOutExpo: t => fi(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (2 * t - 1)) : 0.5 * (2 - Math.pow(2, -10 * (2 * t - 1))), easeInCirc: t => t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1), easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t), easeInOutCirc: t => (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1), easeInElastic: t => fi(t) ? t : gi(t, 0.075, 0.3), easeOutElastic: t => fi(t) ? t : pi(t, 0.075, 0.3), easeInOutElastic (t) { const e = 0.1125; return fi(t) ? t : t < 0.5 ? 0.5 * gi(2 * t, e, 0.45) : 0.5 + 0.5 * pi(2 * t - 1, e, 0.45) }, easeInBack (t) { const e = 1.70158; return t * t * ((e + 1) * t - e) }, easeOutBack (t) { const e = 1.70158; return (t -= 1) * t * ((e + 1) * t + e) + 1 }, easeInOutBack (t) { let e = 1.70158; return (t /= 0.5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * 0.5 : 0.5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2) }, easeInBounce: t => 1 - mi.easeOutBounce(1 - t), easeOutBounce (t) { const e = 7.5625; const i = 2.75; return t < 1 / i ? e * t * t : t < 2 / i ? e * (t -= 1.5 / i) * t + 0.75 : t < 2.5 / i ? e * (t -= 2.25 / i) * t + 0.9375 : e * (t -= 2.625 / i) * t + 0.984375 }, easeInOutBounce: t => t < 0.5 ? 0.5 * mi.easeInBounce(2 * t) : 0.5 * mi.easeOutBounce(2 * t - 1) + 0.5 }; const xi = 'transparent'; const bi = { boolean: (t, e, i) => i > 0.5 ? e : t, color (t, e, i) { const n = W(t || xi); const o = n.valid && W(e || xi); return o && o.valid ? o.mix(n, i).hexString() : e }, number: (t, e, i) => t + (e - t) * i }; class _i {constructor (t, e, i, n) { const o = e[i]; n = Ve([t.to, n, o, t.from]); const s = Ve([t.from, o, n]); this._active = !0, this._fn = t.fn || bi[t.type || typeof s], this._easing = mi[t.easing] || mi.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = i, this._from = s, this._to = n, this._promises = void 0 }active () { return this._active }update (t, e, i) { const n = this; if (n._active) { n._notify(!1); const o = n._target[n._prop]; const s = i - n._start; const a = n._duration - s; n._start = i, n._duration = Math.floor(Math.max(a, t.duration)), n._total += s, n._loop = !!t.loop, n._to = Ve([t.to, e, o, t.from]), n._from = Ve([t.from, o, e]) } }cancel () { const t = this; t._active && (t.tick(Date.now()), t._active = !1, t._notify(!1)) }tick (t) { const e = this; const i = t - e._start; const n = e._duration; const o = e._prop; const s = e._from; const a = e._loop; const r = e._to; let l; if (e._active = s !== r && (a || i < n), !e._active) { return e._target[o] = r, void e._notify(!0) } i < 0 ? e._target[o] = s : (l = i / n % 2, l = a && l > 1 ? 2 - l : l, l = e._easing(Math.min(1, Math.max(0, l))), e._target[o] = e._fn(s, r, l)) }wait () { const t = this._promises || (this._promises = []); return new Promise((e, i) => { t.push({ res: e, rej: i }) }) }_notify (t) { const e = t ? 'res' : 'rej'; const i = this._promises || []; for (let t = 0; t < i.length; t++) { i[t][e]() } }}xt.set('animation', { delay: void 0, duration: 1e3, easing: 'easeOutQuart', fn: void 0, from: void 0, loop: void 0, to: void 0, type: void 0 }); const yi = Object.keys(xt.animation); xt.describe('animation', { _fallback: !1, _indexable: !1, _scriptable: t => t !== 'onProgress' && t !== 'onComplete' && t !== 'fn' }), xt.set('animations', { colors: { type: 'color', properties: ['color', 'borderColor', 'backgroundColor'] }, numbers: { type: 'number', properties: ['x', 'y', 'borderWidth', 'radius', 'tension'] } }), xt.describe('animations', { _fallback: 'animation' }), xt.set('transitions', { active: { animation: { duration: 400 } }, resize: { animation: { duration: 0 } }, show: { animations: { colors: { from: 'transparent' }, visible: { type: 'boolean', duration: 0 } } }, hide: { animations: { colors: { to: 'transparent' }, visible: { type: 'boolean', easing: 'linear', fn: t => 0 | t } } } }); class vi {constructor (t, e) { this._chart = t, this._properties = new Map(), this.configure(e) }configure (t) { if (!U(t)) { return } const e = this._properties; Object.getOwnPropertyNames(t).forEach(i => { const n = t[i]; if (!U(n)) { return } const o = {}; for (const t of yi) { o[t] = n[t] }(Y(n.properties) && n.properties || [i]).forEach(t => { t !== i && e.has(t) || e.set(t, o) }) }) }_animateOptions (t, e) { const i = e.options; const n = (function (t, e) { if (!e) { return } let i = t.options; if (!i) { return void (t.options = e) } i.$shared && (t.options = i = Object.assign({}, i, { $shared: !1, $animations: {} })); return i }(t, i)); if (!n) { return [] } const o = this._createAnimations(n, i); return i.$shared && (function (t, e) { const i = []; const n = Object.keys(e); for (let e = 0; e < n.length; e++) { const o = t[n[e]]; o && o.active() && i.push(o.wait()) } return Promise.all(i) }(t.options.$animations, i)).then(() => { t.options = i }, () => {}), o }_createAnimations (t, e) { const i = this._properties; const n = []; const o = t.$animations || (t.$animations = {}); const s = Object.keys(e); const a = Date.now(); let r; for (r = s.length - 1; r >= 0; --r) { const l = s[r]; if (l.charAt(0) === '$') { continue } if (l === 'options') { n.push(...this._animateOptions(t, e)); continue } const c = e[l]; let h = o[l]; const d = i.get(l); if (h) { if (d && h.active()) { h.update(d, c, a); continue }h.cancel() }d && d.duration ? (o[l] = h = new _i(d, t, l, c), n.push(h)) : t[l] = c } return n }update (t, e) { if (this._properties.size === 0) { return void Object.assign(t, e) } const i = this._createAnimations(t, e); return i.length ? (a.add(this._chart, i), !0) : void 0 }} function wi (t, e) { const i = t && t.options || {}; const n = i.reverse; const o = void 0 === i.min ? e : 0; const s = void 0 === i.max ? e : 0; return { start: n ? s : o, end: n ? o : s } } function Mi (t, e) { const i = []; const n = t._getSortedDatasetMetas(e); let o, s; for (o = 0, s = n.length; o < s; ++o) { i.push(n[o].index) } return i } function ki (t, e, i, n) { const o = t.keys; const s = n.mode === 'single'; let a, r, l, c; if (e !== null) { for (a = 0, r = o.length; a < r; ++a) { if (l = +o[a], l === i) { if (n.all) { continue } break }c = t.values[l], X(c) && (s || e === 0 || Dt(e) === Dt(c)) && (e += c) } return e } } function Si (t, e) { const i = t && t.options.stacked; return i || void 0 === i && void 0 !== e.stack } function Pi (t, e, i) { const n = t[e] || (t[e] = {}); return n[i] || (n[i] = {}) } function Di (t, e, i) { for (const n of e.getMatchingVisibleMetas('bar').reverse()) { const e = t[n.index]; if (i && e > 0 || !i && e < 0) { return n.index } } return null } function Ci (t, e) { const { chart: i, _cachedMeta: n } = t; const o = i._stacks || (i._stacks = {}); const { iScale: s, vScale: a, index: r } = n; const l = s.axis; const c = a.axis; const h = (function (t, e, i) { return `${t.id}.${e.id}.${i.stack || i.type}` }(s, a, n)); const d = e.length; let u; for (let t = 0; t < d; ++t) { const i = e[t]; const { [l]: n, [c]: s } = i; u = (i._stacks || (i._stacks = {}))[c] = Pi(o, h, n), u[r] = s, u._top = Di(u, a, !0), u._bottom = Di(u, a, !1) } } function Oi (t, e) { const i = t.scales; return Object.keys(i).filter(t => i[t].axis === e).shift() } function Ai (t, e) { e = e || t._parsed; for (const i of e) { const e = i._stacks; if (!e || void 0 === e[t.vScale.id] || void 0 === e[t.vScale.id][t.index]) { return } delete e[t.vScale.id][t.index] } } const Ti = t => t === 'reset' || t === 'none'; const Ri = (t, e) => e ? t : Object.assign({}, t); class Li {constructor (t, e) { this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.$context = void 0, this.initialize() }initialize () { const t = this; const e = t._cachedMeta; t.configure(), t.linkScales(), e._stacked = Si(e.vScale, e), t.addElements() }updateIndex (t) { this.index = t }linkScales () { const t = this; const e = t.chart; const i = t._cachedMeta; const n = t.getDataset(); const o = (t, e, i, n) => t === 'x' ? e : t === 'r' ? n : i; const s = i.xAxisID = K(n.xAxisID, Oi(e, 'x')); const a = i.yAxisID = K(n.yAxisID, Oi(e, 'y')); const r = i.rAxisID = K(n.rAxisID, Oi(e, 'r')); const l = i.indexAxis; const c = i.iAxisID = o(l, s, a, r); const h = i.vAxisID = o(l, a, s, r); i.xScale = t.getScaleForId(s), i.yScale = t.getScaleForId(a), i.rScale = t.getScaleForId(r), i.iScale = t.getScaleForId(c), i.vScale = t.getScaleForId(h) }getDataset () { return this.chart.data.datasets[this.index] }getMeta () { return this.chart.getDatasetMeta(this.index) }getScaleForId (t) { return this.chart.scales[t] }_getOtherScale (t) { const e = this._cachedMeta; return t === e.iScale ? e.vScale : e.iScale }reset () { this._update('reset') }_destroy () { const t = this._cachedMeta; this._data && ce(this._data, this), t._stacked && Ai(t) }_dataCheck () { const t = this; const e = t.getDataset(); const i = e.data || (e.data = []); U(i) ? t._data = (function (t) { const e = Object.keys(t); const i = new Array(e.length); let n, o, s; for (n = 0, o = e.length; n < o; ++n) { s = e[n], i[n] = { x: s, y: t[s] } } return i }(i)) : t._data !== i && (t._data && (ce(t._data, t), Ai(t._cachedMeta)), i && Object.isExtensible(i) && le(i, t), t._data = i) }addElements () { const t = this; const e = t._cachedMeta; t._dataCheck(), t.datasetElementType && (e.dataset = new t.datasetElementType()) }buildOrUpdateElements (t) { const e = this; const i = e._cachedMeta; const n = e.getDataset(); let o = !1; e._dataCheck(), i._stacked = Si(i.vScale, i), i.stack !== n.stack && (o = !0, Ai(i), i.stack = n.stack), e._resyncElements(t), o && Ci(e, i._parsed) }configure () { const t = this; const e = t.chart.config; const i = e.datasetScopeKeys(t._type); const n = e.getOptionScopes(t.getDataset(), i, !0); t.options = e.createResolver(n, t.getContext()), t._parsing = t.options.parsing }parse (t, e) { const i = this; const { _cachedMeta: n, _data: o } = i; const { iScale: s, _stacked: a } = n; const r = s.axis; let l; let c; let h; let d = t === 0 && e === o.length || n._sorted; let u = t > 0 && n._parsed[t - 1]; if (!1 === i._parsing) { n._parsed = o, n._sorted = !0, h = o } else { h = Y(o[t]) ? i.parseArrayData(n, o, t, e) : U(o[t]) ? i.parseObjectData(n, o, t, e) : i.parsePrimitiveData(n, o, t, e); const s = () => c[r] === null || u && c[r] < u[r]; for (l = 0; l < e; ++l) { n._parsed[l + t] = c = h[l], d && (s() && (d = !1), u = c) }n._sorted = d }a && Ci(i, h) }parsePrimitiveData (t, e, i, n) { const { iScale: o, vScale: s } = t; const a = o.axis; const r = s.axis; const l = o.getLabels(); const c = o === s; const h = new Array(n); let d, u, f; for (d = 0, u = n; d < u; ++d) { f = d + i, h[d] = { [a]: c || o.parse(l[f], f), [r]: s.parse(e[f], f) } } return h }parseArrayData (t, e, i, n) { const { xScale: o, yScale: s } = t; const a = new Array(n); let r, l, c, h; for (r = 0, l = n; r < l; ++r) { c = r + i, h = e[c], a[r] = { x: o.parse(h[0], c), y: s.parse(h[1], c) } } return a }parseObjectData (t, e, i, n) { const { xScale: o, yScale: s } = t; const { xAxisKey: a = 'x', yAxisKey: r = 'y' } = this._parsing; const l = new Array(n); let c, h, d, u; for (c = 0, h = n; c < h; ++c) { d = c + i, u = e[d], l[c] = { x: o.parse(lt(u, a), d), y: s.parse(lt(u, r), d) } } return l }getParsed (t) { return this._cachedMeta._parsed[t] }getDataElement (t) { return this._cachedMeta.data[t] }applyStack (t, e, i) { const n = this.chart; const o = this._cachedMeta; const s = e[t.axis]; return ki({ keys: Mi(n, !0), values: e._stacks[t.axis] }, s, o.index, { mode: i }) }updateRangeFromParsed (t, e, i, n) { const o = i[e.axis]; let s = o === null ? NaN : o; const a = n && i._stacks[e.axis]; n && a && (n.values = a, t.min = Math.min(t.min, s), t.max = Math.max(t.max, s), s = ki(n, o, this._cachedMeta.index, { all: !0 })), t.min = Math.min(t.min, s), t.max = Math.max(t.max, s) }getMinMax (t, e) { const i = this; const n = i._cachedMeta; const o = n._parsed; const s = n._sorted && t === n.iScale; const a = o.length; const r = i._getOtherScale(t); const l = e && n._stacked && { keys: Mi(i.chart, !0), values: null }; const c = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY }; const { min: h, max: d } = (function (t) { const { min: e, max: i, minDefined: n, maxDefined: o } = t.getUserBounds(); return { min: n ? e : Number.NEGATIVE_INFINITY, max: o ? i : Number.POSITIVE_INFINITY } }(r)); let u, f, g, p; function m () { return g = o[u], f = g[t.axis], p = g[r.axis], !X(f) || h > p || d < p } for (u = 0; u < a && (m() || (i.updateRangeFromParsed(c, t, g, l), !s)); ++u) { } if (s) { for (u = a - 1; u >= 0; --u) { if (!m()) { i.updateRangeFromParsed(c, t, g, l); break } } } return c }getAllParsedValues (t) { const e = this._cachedMeta._parsed; const i = []; let n, o, s; for (n = 0, o = e.length; n < o; ++n) { s = e[n][t.axis], X(s) && i.push(s) } return i }getMaxOverflow () { return !1 }getLabelAndValue (t) { const e = this._cachedMeta; const i = e.iScale; const n = e.vScale; const o = this.getParsed(t); return { label: i ? '' + i.getLabelForValue(o[i.axis]) : '', value: n ? '' + n.getLabelForValue(o[n.axis]) : '' } }_update (t) { const e = this; const i = e._cachedMeta; e.configure(), e._cachedDataOpts = {}, e.update(t || 'default'), i._clip = (function (t) { let e, i, n, o; return U(t) ? (e = t.top, i = t.right, n = t.bottom, o = t.left) : e = i = n = o = t, { top: e, right: i, bottom: n, left: o } }(K(e.options.clip, (function (t, e, i) { if (!1 === i) { return !1 } const n = wi(t, i); const o = wi(e, i); return { top: o.end, right: n.end, bottom: o.start, left: n.start } }(i.xScale, i.yScale, e.getMaxOverflow()))))) }update (t) {}draw () { const t = this; const e = t._ctx; const i = t.chart; const n = t._cachedMeta; const o = n.data || []; const s = i.chartArea; const a = []; const r = t._drawStart || 0; const l = t._drawCount || o.length - r; let c; for (n.dataset && n.dataset.draw(e, s, r, l), c = r; c < r + l; ++c) { const t = o[c]; t.active ? a.push(t) : t.draw(e, s) } for (c = 0; c < a.length; ++c) { a[c].draw(e, s) } }getStyle (t, e) { const i = e ? 'active' : 'default'; return void 0 === t && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(i) : this.resolveDataElementOptions(t || 0, i) }getContext (t, e, i) { const n = this; const o = n.getDataset(); let s; if (t >= 0 && t < n._cachedMeta.data.length) { const e = n._cachedMeta.data[t]; s = e.$context || (e.$context = (function (t, e, i) { return Object.assign(Object.create(t), { active: !1, dataIndex: e, parsed: void 0, raw: void 0, element: i, index: e, mode: 'default', type: 'data' }) }(n.getContext(), t, e))), s.parsed = n.getParsed(t), s.raw = o.data[t] } else { s = n.$context || (n.$context = (function (t, e) { return Object.assign(Object.create(t), { active: !1, dataset: void 0, datasetIndex: e, index: e, mode: 'default', type: 'dataset' }) }(n.chart.getContext(), n.index))), s.dataset = o } return s.active = !!e, s.mode = i, s }resolveDatasetElementOptions (t) { return this._resolveElementOptions(this.datasetElementType.id, t) }resolveDataElementOptions (t, e) { return this._resolveElementOptions(this.dataElementType.id, e, t) }_resolveElementOptions (t, e = 'default', i) { const n = this; const o = e === 'active'; const s = n._cachedDataOpts; const a = t + '-' + e; const r = s[a]; const l = n.enableOptionSharing && ht(i); if (r) { return Ri(r, l) } const c = n.chart.config; const h = c.datasetElementScopeKeys(n._type, t); const d = o ? [t + 'Hover', 'hover', t, ''] : [t, '']; const u = c.getOptionScopes(n.getDataset(), h); const f = Object.keys(xt.elements[t]); const g = c.resolveNamedOptions(u, f, () => n.getContext(i, o), d); return g.$shared && (g.$shared = l, s[a] = Object.freeze(Ri(g, l))), g }_resolveAnimations (t, e, i) { const n = this; const o = n.chart; const s = n._cachedDataOpts; const a = 'animation-' + e; const r = s[a]; if (r) { return r } let l; if (!1 !== o.options.animation) { const o = n.chart.config; const s = o.datasetAnimationScopeKeys(n._type, e); const a = o.getOptionScopes(n.getDataset(), s); l = o.createResolver(a, n.getContext(t, i, e)) } const c = new vi(o, l && l.animations); return l && l._cacheable && (s[a] = Object.freeze(c)), c }getSharedOptions (t) { if (t.$shared) { return this._sharedOptions || (this._sharedOptions = Object.assign({}, t)) } }includeOptions (t, e) { return !e || Ti(t) || this.chart._animationsDisabled }updateElement (t, e, i, n) { Ti(n) ? Object.assign(t, i) : this._resolveAnimations(e, n).update(t, i) }updateSharedOptions (t, e, i) { t && !Ti(e) && this._resolveAnimations(void 0, e).update(t, i) }_setStyle (t, e, i, n) { t.active = n; const o = this.getStyle(e, n); this._resolveAnimations(e, i, n).update(t, { options: !n && this.getSharedOptions(o) || o }) }removeHoverStyle (t, e, i) { this._setStyle(t, i, 'active', !1) }setHoverStyle (t, e, i) { this._setStyle(t, i, 'active', !0) }_removeDatasetHoverStyle () { const t = this._cachedMeta.dataset; t && this._setStyle(t, void 0, 'active', !1) }_setDatasetHoverStyle () { const t = this._cachedMeta.dataset; t && this._setStyle(t, void 0, 'active', !0) }_resyncElements (t) { const e = this; const i = e._cachedMeta.data.length; const n = e._data.length; n > i ? e._insertElements(i, n - i, t) : n < i && e._removeElements(n, i - n); const o = Math.min(n, i); o && e.parse(0, o) }_insertElements (t, e, i = !0) { const n = this; const o = n._cachedMeta; const s = o.data; const a = t + e; let r; const l = t => { for (t.length += e, r = t.length - 1; r >= a; r--) { t[r] = t[r - e] } }; for (l(s), r = t; r < a; ++r) { s[r] = new n.dataElementType() }n._parsing && l(o._parsed), n.parse(t, e), i && n.updateElements(s, t, e, 'reset') }updateElements (t, e, i, n) {}_removeElements (t, e) { const i = this._cachedMeta; if (this._parsing) { const n = i._parsed.splice(t, e); i._stacked && Ai(i, n) }i.data.splice(t, e) }_onDataPush () { const t = arguments.length; this._insertElements(this.getDataset().data.length - t, t) }_onDataPop () { this._removeElements(this._cachedMeta.data.length - 1, 1) }_onDataShift () { this._removeElements(0, 1) }_onDataSplice (t, e) { this._removeElements(t, e), this._insertElements(t, arguments.length - 2) }_onDataUnshift () { this._insertElements(0, arguments.length) }}Li.defaults = {}, Li.prototype.datasetElementType = null, Li.prototype.dataElementType = null; class Ei {constructor () { this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0 }tooltipPosition (t) { const { x: e, y: i } = this.getProps(['x', 'y'], t); return { x: e, y: i } }hasValue () { return At(this.x) && At(this.y) }getProps (t, e) { const i = this; const n = this.$animations; if (!e || !n) { return i } const o = {}; return t.forEach(t => { o[t] = n[t] && n[t].active() ? n[t]._to : i[t] }), o }}Ei.defaults = {}, Ei.defaultRoutes = void 0; const Ii = new Map(); function zi (t, e, i) { return (function (t, e) { e = e || {}; const i = t + JSON.stringify(e); let n = Ii.get(i); return n || (n = new Intl.NumberFormat(t, e), Ii.set(i, n)), n }(e, i)).format(t) } const Fi = { values: t => Y(t) ? t : '' + t, numeric (t, e, i) { if (t === 0) { return '0' } const n = this.chart.options.locale; let o; let s = t; if (i.length > 1) { const e = Math.max(Math.abs(i[0].value), Math.abs(i[i.length - 1].value)); (e < 1e-4 || e > 1e15) && (o = 'scientific'), s = (function (t, e) { let i = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value; Math.abs(i) > 1 && t !== Math.floor(t) && (i = t - Math.floor(t)); return i }(t, i)) } const a = Pt(Math.abs(s)); const r = Math.max(Math.min(-1 * Math.floor(a), 20), 0); const l = { notation: o, minimumFractionDigits: r, maximumFractionDigits: r }; return Object.assign(l, this.options.ticks.format), zi(t, n, l) }, logarithmic (t, e, i) { if (t === 0) { return '0' } const n = t / Math.pow(10, Math.floor(Pt(t))); return n === 1 || n === 2 || n === 5 ? Fi.numeric.call(this, t, e, i) : '' } }; const Vi = { formatters: Fi }; function Bi (t, e) { const i = t.options.ticks; const n = i.maxTicksLimit || (function (t) { const e = t.options.offset; const i = t._tickSize(); const n = t._length / i + (e ? 0 : 1); const o = t._maxLength / i; return Math.floor(Math.min(n, o)) }(t)); const o = i.major.enabled ? (function (t) { const e = []; let i, n; for (i = 0, n = t.length; i < n; i++) { t[i].major && e.push(i) } return e }(e)) : []; const s = o.length; const a = o[0]; const r = o[s - 1]; const l = []; if (s > n) { return (function (t, e, i, n) { let o; let s = 0; let a = i[0]; for (n = Math.ceil(n), o = 0; o < t.length; o++) { o === a && (e.push(t[o]), s++, a = i[s * n]) } }(e, l, o, s / n)), l } const c = (function (t, e, i) { const n = (function (t) { const e = t.length; let i, n; if (e < 2) { return !1 } for (n = t[0], i = 1; i < e; ++i) { if (t[i] - t[i - 1] !== n) { return !1 } } return n }(t)); const o = e.length / i; if (!n) { return Math.max(o, 1) } const s = Ot(n); for (let t = 0, e = s.length - 1; t < e; t++) { const e = s[t]; if (e > o) { return e } } return Math.max(o, 1) }(o, e, n)); if (s > 0) { let t, i; const n = s > 1 ? Math.round((r - a) / (s - 1)) : null; for (Wi(e, l, c, $(n) ? 0 : a - n, a), t = 0, i = s - 1; t < i; t++) { Wi(e, l, c, o[t], o[t + 1]) } return Wi(e, l, c, r, $(n) ? e.length : r + n), l } return Wi(e, l, c), l } function Wi (t, e, i, n, o) { const s = K(n, 0); const a = Math.min(K(o, t.length), t.length); let r; let l; let c; let h = 0; for (i = Math.ceil(i), o && (r = o - n, i = r / Math.floor(r / i)), c = s; c < 0;) { h++, c = Math.round(s + h * i) } for (l = Math.max(s, 0); l < a; l++) { l === c && (e.push(t[l]), h++, c = Math.round(s + h * i)) } }xt.set('scale', { display: !0, offset: !1, reverse: !1, beginAtZero: !1, bounds: 'ticks', grace: 0, grid: { display: !0, lineWidth: 1, drawBorder: !0, drawOnChartArea: !0, drawTicks: !0, tickLength: 8, tickWidth: (t, e) => e.lineWidth, tickColor: (t, e) => e.color, offset: !1, borderDash: [], borderDashOffset: 0, borderWidth: 1 }, title: { display: !1, text: '', padding: { top: 4, bottom: 4 } }, ticks: { minRotation: 0, maxRotation: 50, mirror: !1, textStrokeWidth: 0, textStrokeColor: '', padding: 3, display: !0, autoSkip: !0, autoSkipPadding: 3, labelOffset: 0, callback: Vi.formatters.values, minor: {}, major: {}, align: 'center', crossAlign: 'near', showLabelBackdrop: !1, backdropColor: 'rgba(255, 255, 255, 0.75)', backdropPadding: 2 } }), xt.route('scale.ticks', 'color', '', 'color'), xt.route('scale.grid', 'color', '', 'borderColor'), xt.route('scale.grid', 'borderColor', '', 'borderColor'), xt.route('scale.title', 'color', '', 'color'), xt.describe('scale', { _fallback: !1, _scriptable: t => !t.startsWith('before') && !t.startsWith('after') && t !== 'callback' && t !== 'parser', _indexable: t => t !== 'borderDash' && t !== 'tickBorderDash' }), xt.describe('scales', { _fallback: 'scale' }); const Hi = (t, e, i) => e === 'top' || e === 'left' ? t[e] + i : t[e] - i; function Ni (t, e) { const i = []; const n = t.length / e; const o = t.length; let s = 0; for (;s < o; s += n) { i.push(t[Math.floor(s)]) } return i } function ji (t, e, i) { const n = t.ticks.length; const o = Math.min(e, n - 1); const s = t._startPixel; const a = t._endPixel; const r = 1e-6; let l; let c = t.getPixelForTick(o); if (!(i && (l = n === 1 ? Math.max(c - s, a - c) : e === 0 ? (t.getPixelForTick(1) - c) / 2 : (c - t.getPixelForTick(o - 1)) / 2, c += o < e ? l : -l, c < s - r || c > a + r))) { return c } } function $i (t) { return t.drawTicks ? t.tickLength : 0 } function Yi (t, e) { if (!t.display) { return 0 } const i = Fe(t.font, e); const n = ze(t.padding); return (Y(t.text) ? t.text.length : 1) * i.lineHeight + n.height } function Ui (t, e, i) { let o = n(t); return (i && e !== 'right' || !i && e === 'right') && (o = (t => t === 'left' ? 'right' : t === 'right' ? 'left' : t)(o)), o } class Xi extends Ei {constructor (t) { super(), this.id = t.id, this.type = t.type, this.options = void 0, this.ctx = t.ctx, this.chart = t.chart, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this._margins = { left: 0, right: 0, top: 0, bottom: 0 }, this.maxWidth = void 0, this.maxHeight = void 0, this.paddingTop = void 0, this.paddingBottom = void 0, this.paddingLeft = void 0, this.paddingRight = void 0, this.axis = void 0, this.labelRotation = void 0, this.min = void 0, this.max = void 0, this._range = void 0, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = void 0, this._endPixel = void 0, this._reversePixels = !1, this._userMax = void 0, this._userMin = void 0, this._suggestedMax = void 0, this._suggestedMin = void 0, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = !1, this.$context = void 0 }init (t) { const e = this; e.options = t.setContext(e.getContext()), e.axis = t.axis, e._userMin = e.parse(t.min), e._userMax = e.parse(t.max), e._suggestedMin = e.parse(t.suggestedMin), e._suggestedMax = e.parse(t.suggestedMax) }parse (t, e) { return t }getUserBounds () { let { _userMin: t, _userMax: e, _suggestedMin: i, _suggestedMax: n } = this; return t = q(t, Number.POSITIVE_INFINITY), e = q(e, Number.NEGATIVE_INFINITY), i = q(i, Number.POSITIVE_INFINITY), n = q(n, Number.NEGATIVE_INFINITY), { min: q(t, i), max: q(e, n), minDefined: X(t), maxDefined: X(e) } }getMinMax (t) { const e = this; let i; let { min: n, max: o, minDefined: s, maxDefined: a } = e.getUserBounds(); if (s && a) { return { min: n, max: o } } const r = e.getMatchingVisibleMetas(); for (let l = 0, c = r.length; l < c; ++l) { i = r[l].controller.getMinMax(e, t), s || (n = Math.min(n, i.min)), a || (o = Math.max(o, i.max)) } return { min: q(n, q(o, n)), max: q(o, q(n, o)) } }getPadding () { const t = this; return { left: t.paddingLeft || 0, top: t.paddingTop || 0, right: t.paddingRight || 0, bottom: t.paddingBottom || 0 } }getTicks () { return this.ticks }getLabels () { const t = this.chart.data; return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [] }beforeLayout () { this._cache = {}, this._dataLimitsCached = !1 }beforeUpdate () { Q(this.options.beforeUpdate, [this]) }update (t, e, i) { const n = this; const o = n.options.ticks; const s = o.sampleSize; n.beforeUpdate(), n.maxWidth = t, n.maxHeight = e, n._margins = i = Object.assign({ left: 0, right: 0, top: 0, bottom: 0 }, i), n.ticks = null, n._labelSizes = null, n._gridLineItems = null, n._labelItems = null, n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n._maxLength = n.isHorizontal() ? n.width + i.left + i.right : n.height + i.top + i.bottom, n._dataLimitsCached || (n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n._range = Be(n, n.options.grace), n._dataLimitsCached = !0), n.beforeBuildTicks(), n.ticks = n.buildTicks() || [], n.afterBuildTicks(); const a = s < n.ticks.length; n._convertTicksToLabels(a ? Ni(n.ticks, s) : n.ticks), n.configure(), n.beforeCalculateLabelRotation(), n.calculateLabelRotation(), n.afterCalculateLabelRotation(), o.display && (o.autoSkip || o.source === 'auto') && (n.ticks = Bi(n, n.ticks), n._labelSizes = null), a && n._convertTicksToLabels(n.ticks), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate() }configure () { const t = this; let e; let i; let n = t.options.reverse; t.isHorizontal() ? (e = t.left, i = t.right) : (e = t.top, i = t.bottom, n = !n), t._startPixel = e, t._endPixel = i, t._reversePixels = n, t._length = i - e, t._alignToPixels = t.options.alignToPixels }afterUpdate () { Q(this.options.afterUpdate, [this]) }beforeSetDimensions () { Q(this.options.beforeSetDimensions, [this]) }setDimensions () { const t = this; t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0 }afterSetDimensions () { Q(this.options.afterSetDimensions, [this]) }_callHooks (t) { const e = this; e.chart.notifyPlugins(t, e.getContext()), Q(e.options[t], [e]) }beforeDataLimits () { this._callHooks('beforeDataLimits') }determineDataLimits () {}afterDataLimits () { this._callHooks('afterDataLimits') }beforeBuildTicks () { this._callHooks('beforeBuildTicks') }buildTicks () { return [] }afterBuildTicks () { this._callHooks('afterBuildTicks') }beforeTickToLabelConversion () { Q(this.options.beforeTickToLabelConversion, [this]) }generateTickLabels (t) { const e = this; const i = e.options.ticks; let n, o, s; for (n = 0, o = t.length; n < o; n++) { s = t[n], s.label = Q(i.callback, [s.value, n, t], e) } for (n = 0; n < o; n++) { $(t[n].label) && (t.splice(n, 1), o--, n--) } }afterTickToLabelConversion () { Q(this.options.afterTickToLabelConversion, [this]) }beforeCalculateLabelRotation () { Q(this.options.beforeCalculateLabelRotation, [this]) }calculateLabelRotation () { const t = this; const e = t.options; const i = e.ticks; const n = t.ticks.length; const o = i.minRotation || 0; const s = i.maxRotation; let a; let r; let l; let c = o; if (!t._isVisible() || !i.display || o >= s || n <= 1 || !t.isHorizontal()) { return void (t.labelRotation = o) } const h = t._getLabelSizes(); const d = h.widest.width; const u = h.highest.height; const f = Nt(t.chart.width - d, 0, t.maxWidth); a = e.offset ? t.maxWidth / n : f / (n - 1), d + 6 > a && (a = f / (n - (e.offset ? 0.5 : 1)), r = t.maxHeight - $i(e.grid) - i.padding - Yi(e.title, t.chart.options.font), l = Math.sqrt(d * d + u * u), c = It(Math.min(Math.asin(Math.min((h.highest.height + 6) / a, 1)), Math.asin(Math.min(r / l, 1)) - Math.asin(u / l))), c = Math.max(o, Math.min(s, c))), t.labelRotation = c }afterCalculateLabelRotation () { Q(this.options.afterCalculateLabelRotation, [this]) }beforeFit () { Q(this.options.beforeFit, [this]) }fit () { const t = this; const e = { width: 0, height: 0 }; const { chart: i, options: { ticks: n, title: o, grid: s } } = t; const a = t._isVisible(); const r = t.isHorizontal(); if (a) { const a = Yi(o, i.options.font); if (r ? (e.width = t.maxWidth, e.height = $i(s) + a) : (e.height = t.maxHeight, e.width = $i(s) + a), n.display && t.ticks.length) { const { first: i, last: o, widest: s, highest: a } = t._getLabelSizes(); const l = 2 * n.padding; const c = Et(t.labelRotation); const h = Math.cos(c); const d = Math.sin(c); if (r) { const i = n.mirror ? 0 : d * s.width + h * a.height; e.height = Math.min(t.maxHeight, e.height + i + l) } else { const i = n.mirror ? 0 : h * s.width + d * a.height; e.width = Math.min(t.maxWidth, e.width + i + l) }t._calculatePadding(i, o, d, h) } }t._handleMargins(), r ? (t.width = t._length = i.width - t._margins.left - t._margins.right, t.height = e.height) : (t.width = e.width, t.height = t._length = i.height - t._margins.top - t._margins.bottom) }_calculatePadding (t, e, i, n) { const o = this; const { ticks: { align: s, padding: a }, position: r } = o.options; const l = o.labelRotation !== 0; const c = r !== 'top' && o.axis === 'x'; if (o.isHorizontal()) { const r = o.getPixelForTick(0) - o.left; const h = o.right - o.getPixelForTick(o.ticks.length - 1); let d = 0; let u = 0; l ? c ? (d = n * t.width, u = i * e.height) : (d = i * t.height, u = n * e.width) : s === 'start' ? u = e.width : s === 'end' ? d = t.width : (d = t.width / 2, u = e.width / 2), o.paddingLeft = Math.max((d - r + a) * o.width / (o.width - r), 0), o.paddingRight = Math.max((u - h + a) * o.width / (o.width - h), 0) } else { let i = e.height / 2; let n = t.height / 2; s === 'start' ? (i = 0, n = t.height) : s === 'end' && (i = e.height, n = 0), o.paddingTop = i + a, o.paddingBottom = n + a } }_handleMargins () { const t = this; t._margins && (t._margins.left = Math.max(t.paddingLeft, t._margins.left), t._margins.top = Math.max(t.paddingTop, t._margins.top), t._margins.right = Math.max(t.paddingRight, t._margins.right), t._margins.bottom = Math.max(t.paddingBottom, t._margins.bottom)) }afterFit () { Q(this.options.afterFit, [this]) }isHorizontal () { const { axis: t, position: e } = this.options; return e === 'top' || e === 'bottom' || t === 'x' }isFullSize () { return this.options.fullSize }_convertTicksToLabels (t) { const e = this; e.beforeTickToLabelConversion(), e.generateTickLabels(t), e.afterTickToLabelConversion() }_getLabelSizes () { const t = this; let e = t._labelSizes; if (!e) { const i = t.options.ticks.sampleSize; let n = t.ticks; i < n.length && (n = Ni(n, i)), t._labelSizes = e = t._computeLabelSizes(n, n.length) } return e }_computeLabelSizes (t, e) { const { ctx: i, _longestTextCache: n } = this; const o = []; const s = []; let a; let r; let l; let c; let h; let d; let u; let f; let g; let p; let m; let x = 0; let b = 0; for (a = 0; a < e; ++a) { if (c = t[a].label, h = this._resolveTickFontOptions(a), i.font = d = h.string, u = n[d] = n[d] || { data: {}, gc: [] }, f = h.lineHeight, g = p = 0, $(c) || Y(c)) { if (Y(c)) { for (r = 0, l = c.length; r < l; ++r) { m = c[r], $(m) || Y(m) || (g = Yt(i, u.data, u.gc, g, m), p += f) } } } else { g = Yt(i, u.data, u.gc, g, c), p = f }o.push(g), s.push(p), x = Math.max(g, x), b = Math.max(p, b) }!(function (t, e) { J(t, t => { const i = t.gc; const n = i.length / 2; let o; if (n > e) { for (o = 0; o < n; ++o) { delete t.data[i[o]] } i.splice(0, n) } }) }(n, e)); const _ = o.indexOf(x); const y = s.indexOf(b); const v = t => ({ width: o[t] || 0, height: s[t] || 0 }); return { first: v(0), last: v(e - 1), widest: v(_), highest: v(y), widths: o, heights: s } }getLabelForValue (t) { return t }getPixelForValue (t, e) { return NaN }getValueForPixel (t) {}getPixelForTick (t) { const e = this.ticks; return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value) }getPixelForDecimal (t) { const e = this; e._reversePixels && (t = 1 - t); const i = e._startPixel + t * e._length; return jt(e._alignToPixels ? Xt(e.chart, i, 0) : i) }getDecimalForPixel (t) { const e = (t - this._startPixel) / this._length; return this._reversePixels ? 1 - e : e }getBasePixel () { return this.getPixelForValue(this.getBaseValue()) }getBaseValue () { const { min: t, max: e } = this; return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0 }getContext (t) { const e = this; const i = e.ticks || []; if (t >= 0 && t < i.length) { const n = i[t]; return n.$context || (n.$context = (function (t, e, i) { return Object.assign(Object.create(t), { tick: i, index: e, type: 'tick' }) }(e.getContext(), t, n))) } return e.$context || (e.$context = (n = e.chart.getContext(), o = e, Object.assign(Object.create(n), { scale: o, type: 'scale' }))); let n, o }_tickSize () { const t = this; const e = t.options.ticks; const i = Et(t.labelRotation); const n = Math.abs(Math.cos(i)); const o = Math.abs(Math.sin(i)); const s = t._getLabelSizes(); const a = e.autoSkipPadding || 0; const r = s ? s.widest.width + a : 0; const l = s ? s.highest.height + a : 0; return t.isHorizontal() ? l * n > r * o ? r / n : l / o : l * o < r * n ? l / n : r / o }_isVisible () { const t = this.options.display; return t !== 'auto' ? !!t : this.getMatchingVisibleMetas().length > 0 }_computeGridLineItems (t) { const e = this; const i = e.axis; const n = e.chart; const o = e.options; const { grid: s, position: a } = o; const r = s.offset; const l = e.isHorizontal(); const c = e.ticks.length + (r ? 1 : 0); const h = $i(s); const d = []; const u = s.setContext(e.getContext()); const f = u.drawBorder ? u.borderWidth : 0; const g = f / 2; const p = function (t) { return Xt(n, t, f) }; let m, x, b, _, y, v, w, M, k, S, P, D; if (a === 'top') { m = p(e.bottom), v = e.bottom - h, M = m - g, S = p(t.top) + g, D = t.bottom } else if (a === 'bottom') { m = p(e.top), S = t.top, D = p(t.bottom) - g, v = m + g, M = e.top + h } else if (a === 'left') { m = p(e.right), y = e.right - h, w = m - g, k = p(t.left) + g, P = t.right } else if (a === 'right') { m = p(e.left), k = t.left, P = p(t.right) - g, y = m + g, w = e.left + h } else if (i === 'x') { if (a === 'center') { m = p((t.top + t.bottom) / 2 + 0.5) } else if (U(a)) { const t = Object.keys(a)[0]; const i = a[t]; m = p(e.chart.scales[t].getPixelForValue(i)) }S = t.top, D = t.bottom, v = m + g, M = v + h } else if (i === 'y') { if (a === 'center') { m = p((t.left + t.right) / 2) } else if (U(a)) { const t = Object.keys(a)[0]; const i = a[t]; m = p(e.chart.scales[t].getPixelForValue(i)) }y = m - g, w = y - h, k = t.left, P = t.right } for (x = 0; x < c; ++x) { const t = s.setContext(e.getContext(x)); const i = t.lineWidth; const o = t.color; const a = s.borderDash || []; const c = t.borderDashOffset; const h = t.tickWidth; const u = t.tickColor; const f = t.tickBorderDash || []; const g = t.tickBorderDashOffset; b = ji(e, x, r), void 0 !== b && (_ = Xt(n, b, i), l ? y = w = k = P = _ : v = M = S = D = _, d.push({ tx1: y, ty1: v, tx2: w, ty2: M, x1: k, y1: S, x2: P, y2: D, width: i, color: o, borderDash: a, borderDashOffset: c, tickWidth: h, tickColor: u, tickBorderDash: f, tickBorderDashOffset: g })) } return e._ticksLength = c, e._borderValue = m, d }_computeLabelItems (t) { const e = this; const i = e.axis; const n = e.options; const { position: o, ticks: s } = n; const a = e.isHorizontal(); const r = e.ticks; const { align: l, crossAlign: c, padding: h, mirror: d } = s; const u = $i(n.grid); const f = u + h; const g = d ? -h : f; const p = -Et(e.labelRotation); const m = []; let x; let b; let _; let y; let v; let w; let M; let k; let S; let P; let D; let C; let O = 'middle'; if (o === 'top') { w = e.bottom - g, M = e._getXAxisLabelAlignment() } else if (o === 'bottom') { w = e.top + g, M = e._getXAxisLabelAlignment() } else if (o === 'left') { const t = e._getYAxisLabelAlignment(u); M = t.textAlign, v = t.x } else if (o === 'right') { const t = e._getYAxisLabelAlignment(u); M = t.textAlign, v = t.x } else if (i === 'x') { if (o === 'center') { w = (t.top + t.bottom) / 2 + f } else if (U(o)) { const t = Object.keys(o)[0]; const i = o[t]; w = e.chart.scales[t].getPixelForValue(i) + f }M = e._getXAxisLabelAlignment() } else if (i === 'y') { if (o === 'center') { v = (t.left + t.right) / 2 - f } else if (U(o)) { const t = Object.keys(o)[0]; const i = o[t]; v = e.chart.scales[t].getPixelForValue(i) }M = e._getYAxisLabelAlignment(u).textAlign }i === 'y' && (l === 'start' ? O = 'top' : l === 'end' && (O = 'bottom')); const A = e._getLabelSizes(); for (x = 0, b = r.length; x < b; ++x) { _ = r[x], y = _.label; const t = s.setContext(e.getContext(x)); k = e.getPixelForTick(x) + s.labelOffset, S = e._resolveTickFontOptions(x), P = S.lineHeight, D = Y(y) ? y.length : 1; const i = D / 2; const n = t.color; const l = t.textStrokeColor; const h = t.textStrokeWidth; let u; if (a ? (v = k, C = o === 'top' ? c === 'near' || p !== 0 ? -D * P + P / 2 : c === 'center' ? -A.highest.height / 2 - i * P + P : -A.highest.height + P / 2 : c === 'near' || p !== 0 ? P / 2 : c === 'center' ? A.highest.height / 2 - i * P : A.highest.height - D * P, d && (C *= -1)) : (w = k, C = (1 - D) * P / 2), t.showLabelBackdrop) { const e = ze(t.backdropPadding); const i = A.heights[x]; const n = A.widths[x]; let o = w + C - e.top; let s = v - e.left; switch (O) { case 'middle':o -= i / 2; break; case 'bottom':o -= i } switch (M) { case 'center':s -= n / 2; break; case 'right':s -= n }u = { left: s, top: o, width: n + e.width, height: i + e.height, color: t.backdropColor } }m.push({ rotation: p, label: y, font: S, color: n, strokeColor: l, strokeWidth: h, textOffset: C, textAlign: M, textBaseline: O, translation: [v, w], backdrop: u }) } return m }_getXAxisLabelAlignment () { const { position: t, ticks: e } = this.options; if (-Et(this.labelRotation)) { return t === 'top' ? 'left' : 'right' } let i = 'center'; return e.align === 'start' ? i = 'left' : e.align === 'end' && (i = 'right'), i }_getYAxisLabelAlignment (t) { const e = this; const { position: i, ticks: { crossAlign: n, mirror: o, padding: s } } = e.options; const a = t + s; const r = e._getLabelSizes().widest.width; let l, c; return i === 'left' ? o ? (l = 'left', c = e.right + s) : (c = e.right - a, n === 'near' ? l = 'right' : n === 'center' ? (l = 'center', c -= r / 2) : (l = 'left', c = e.left)) : i === 'right' ? o ? (l = 'right', c = e.left + s) : (c = e.left + a, n === 'near' ? l = 'left' : n === 'center' ? (l = 'center', c += r / 2) : (l = 'right', c = e.right)) : l = 'right', { textAlign: l, x: c } }_computeLabelArea () { const t = this; if (t.options.ticks.mirror) { return } const e = t.chart; const i = t.options.position; return i === 'left' || i === 'right' ? { top: 0, left: t.left, bottom: e.height, right: t.right } : i === 'top' || i === 'bottom' ? { top: t.top, left: 0, bottom: t.bottom, right: e.width } : void 0 }drawBackground () { const { ctx: t, options: { backgroundColor: e }, left: i, top: n, width: o, height: s } = this; e && (t.save(), t.fillStyle = e, t.fillRect(i, n, o, s), t.restore()) }getLineWidthForValue (t) { const e = this; const i = e.options.grid; if (!e._isVisible() || !i.display) { return 0 } const n = e.ticks.findIndex(e => e.value === t); if (n >= 0) { return i.setContext(e.getContext(n)).lineWidth } return 0 }drawGrid (t) { const e = this; const i = e.options.grid; const n = e.ctx; const o = e._gridLineItems || (e._gridLineItems = e._computeGridLineItems(t)); let s, a; const r = (t, e, i) => { i.width && i.color && (n.save(), n.lineWidth = i.width, n.strokeStyle = i.color, n.setLineDash(i.borderDash || []), n.lineDashOffset = i.borderDashOffset, n.beginPath(), n.moveTo(t.x, t.y), n.lineTo(e.x, e.y), n.stroke(), n.restore()) }; if (i.display) { for (s = 0, a = o.length; s < a; ++s) { const t = o[s]; i.drawOnChartArea && r({ x: t.x1, y: t.y1 }, { x: t.x2, y: t.y2 }, t), i.drawTicks && r({ x: t.tx1, y: t.ty1 }, { x: t.tx2, y: t.ty2 }, { color: t.tickColor, width: t.tickWidth, borderDash: t.tickBorderDash, borderDashOffset: t.tickBorderDashOffset }) } } }drawBorder () { const t = this; const { chart: e, ctx: i, options: { grid: n } } = t; const o = n.setContext(t.getContext()); const s = n.drawBorder ? o.borderWidth : 0; if (!s) { return } const a = n.setContext(t.getContext(0)).lineWidth; const r = t._borderValue; let l, c, h, d; t.isHorizontal() ? (l = Xt(e, t.left, s) - s / 2, c = Xt(e, t.right, a) + a / 2, h = d = r) : (h = Xt(e, t.top, s) - s / 2, d = Xt(e, t.bottom, a) + a / 2, l = c = r), i.save(), i.lineWidth = o.borderWidth, i.strokeStyle = o.borderColor, i.beginPath(), i.moveTo(l, h), i.lineTo(c, d), i.stroke(), i.restore() }drawLabels (t) { const e = this; if (!e.options.ticks.display) { return } const i = e.ctx; const n = e._computeLabelArea(); n && Zt(i, n); const o = e._labelItems || (e._labelItems = e._computeLabelItems(t)); let s, a; for (s = 0, a = o.length; s < a; ++s) { const t = o[s]; const e = t.font; const n = t.label; t.backdrop && (i.fillStyle = t.backdrop.color, i.fillRect(t.backdrop.left, t.backdrop.top, t.backdrop.width, t.backdrop.height)), ee(i, n, 0, t.textOffset, e, t) }n && Qt(i) }drawTitle () { const { ctx: t, options: { position: e, title: i, reverse: n } } = this; if (!i.display) { return } const s = Fe(i.font); const a = ze(i.padding); const r = i.align; let l = s.lineHeight / 2; e === 'bottom' ? (l += a.bottom, Y(i.text) && (l += s.lineHeight * (i.text.length - 1))) : l += a.top; const { titleX: c, titleY: h, maxWidth: d, rotation: u } = (function (t, e, i, n) { const { top: s, left: a, bottom: r, right: l } = t; let c; let h; let d; let u = 0; return t.isHorizontal() ? (h = o(n, a, l), d = Hi(t, i, e), c = l - a) : (h = Hi(t, i, e), d = o(n, r, s), u = i === 'left' ? -Mt : Mt), { titleX: h, titleY: d, maxWidth: c, rotation: u } }(this, l, e, r)); ee(t, i.text, 0, 0, s, { color: i.color, maxWidth: d, rotation: u, textAlign: Ui(r, e, n), textBaseline: 'middle', translation: [c, h] }) }draw (t) { const e = this; e._isVisible() && (e.drawBackground(), e.drawGrid(t), e.drawBorder(), e.drawTitle(), e.drawLabels(t)) }_layers () { const t = this; const e = t.options; const i = e.ticks && e.ticks.z || 0; const n = e.grid && e.grid.z || 0; return t._isVisible() && t.draw === Xi.prototype.draw ? [{ z: n, draw (e) { t.drawBackground(), t.drawGrid(e), t.drawTitle() } }, { z: n + 1, draw () { t.drawBorder() } }, { z: i, draw (e) { t.drawLabels(e) } }] : [{ z: i, draw (e) { t.draw(e) } }] }getMatchingVisibleMetas (t) { const e = this; const i = e.chart.getSortedVisibleDatasetMetas(); const n = e.axis + 'AxisID'; const o = []; let s, a; for (s = 0, a = i.length; s < a; ++s) { const a = i[s]; a[n] !== e.id || t && a.type !== t || o.push(a) } return o }_resolveTickFontOptions (t) { return Fe(this.options.ticks.setContext(this.getContext(t)).font) }_maxDigits () { const t = this; const e = t._resolveTickFontOptions(0).lineHeight; return t.isHorizontal() ? t.width / e / 0.7 : t.height / e }} function qi (t, e = [''], i = t, n, o = () => t[0]) { ht(n) || (n = an('_fallback', t)); const s = { [Symbol.toStringTag]: 'Object', _cacheable: !0, _scopes: t, _rootScopes: i, _fallback: n, _getTarget: o, override: o => qi([o, ...t], e, i, n) }; return new Proxy(s, { deleteProperty: (e, i) => (delete e[i], delete e._keys, delete t[0][i], !0), get: (i, n) => Ji(i, n, () => (function (t, e, i, n) { let o; for (const s of e) { if (o = an(Zi(s, t), i), ht(o)) { return Qi(t, o) ? on(i, n, t, o) : o } } }(n, e, t, i))), getOwnPropertyDescriptor: (t, e) => Reflect.getOwnPropertyDescriptor(t._scopes[0], e), getPrototypeOf: () => Reflect.getPrototypeOf(t[0]), has: (t, e) => rn(t).includes(e), ownKeys: t => rn(t), set: (t, e, i) => ((t._storage || (t._storage = o()))[e] = i, delete t[e], delete t._keys, !0) }) } function Ki (t, e, i, n) { const o = { _cacheable: !1, _proxy: t, _context: e, _subProxy: i, _stack: new Set(), _descriptors: Gi(t, n), setContext: e => Ki(t, e, i, n), override: o => Ki(t.override(o), e, i, n) }; return new Proxy(o, { deleteProperty: (e, i) => (delete e[i], delete t[i], !0), get: (t, e, i) => Ji(t, e, () => (function (t, e, i) { const { _proxy: n, _context: o, _subProxy: s, _descriptors: a } = t; let r = n[e]; dt(r) && a.isScriptable(e) && (r = (function (t, e, i, n) { const { _proxy: o, _context: s, _subProxy: a, _stack: r } = i; if (r.has(t)) { throw new Error('Recursion detected: ' + [...r].join('->') + '->' + t) } r.add(t), e = e(s, a || n), r.delete(t), U(e) && (e = on(o._scopes, o, t, e)); return e }(e, r, t, i))); Y(r) && r.length && (r = (function (t, e, i, n) { const { _proxy: o, _context: s, _subProxy: a, _descriptors: r } = i; if (ht(s.index) && n(t)) { e = e[s.index % e.length] } else if (U(e[0])) { const i = e; const n = o._scopes.filter(t => t !== i); e = []; for (const l of i) { const i = on(n, o, t, l); e.push(Ki(i, s, a && a[t], r)) } } return e }(e, r, t, a.isIndexable))); Qi(e, r) && (r = Ki(r, o, s && s[e], a)); return r }(t, e, i))), getOwnPropertyDescriptor: (e, i) => e._descriptors.allKeys ? Reflect.has(t, i) ? { enumerable: !0, configurable: !0 } : void 0 : Reflect.getOwnPropertyDescriptor(t, i), getPrototypeOf: () => Reflect.getPrototypeOf(t), has: (e, i) => Reflect.has(t, i), ownKeys: () => Reflect.ownKeys(t), set: (e, i, n) => (t[i] = n, delete e[i], !0) }) } function Gi (t, e = { scriptable: !0, indexable: !0 }) { const { _scriptable: i = e.scriptable, _indexable: n = e.indexable, _allKeys: o = e.allKeys } = t; return { allKeys: o, scriptable: i, indexable: n, isScriptable: dt(i) ? i : () => i, isIndexable: dt(n) ? n : () => n } } const Zi = (t, e) => t ? t + ct(e) : e; const Qi = (t, e) => U(e) && t !== 'adapters'; function Ji (t, e, i) { let n = t[e]; return ht(n) || (n = i(), ht(n) && (t[e] = n)), n } function tn (t, e, i) { return dt(t) ? t(e, i) : t } const en = (t, e) => !0 === t ? e : typeof t === 'string' ? lt(e, t) : void 0; function nn (t, e, i, n) { for (const o of e) { const e = en(i, o); if (e) { t.add(e); const o = tn(e._fallback, i, e); if (ht(o) && o !== i && o !== n) { return o } } else if (!1 === e && ht(n) && i !== n) { return null } } return !1 } function on (t, e, i, n) { const o = e._rootScopes; const s = tn(e._fallback, i, n); const a = [...t, ...o]; const r = new Set(); r.add(n); let l = sn(r, a, i, s || i); return l !== null && ((!ht(s) || s === i || (l = sn(r, a, s, l), l !== null)) && qi([...r], [''], o, s, () => { const t = e._getTarget(); return i in t || (t[i] = {}), t[i] })) } function sn (t, e, i, n) { for (;i;) { i = nn(t, e, i, n) } return i } function an (t, e) { for (const i of e) { if (!i) { continue } const e = i[t]; if (ht(e)) { return e } } } function rn (t) { let e = t._keys; return e || (e = t._keys = (function (t) { const e = new Set(); for (const i of t) { for (const t of Object.keys(i).filter(t => !t.startsWith('_'))) { e.add(t) } } return [...e] }(t._scopes))), e } const ln = Number.EPSILON || 1e-14; const cn = (t, e) => e < t.length && !t[e].skip && t[e]; function hn (t, e, i, n) { const o = t.skip ? e : t; const s = e; const a = i.skip ? e : i; const r = Vt(s, o); const l = Vt(a, s); let c = r / (r + l); let h = l / (r + l); c = isNaN(c) ? 0 : c, h = isNaN(h) ? 0 : h; const d = n * c; const u = n * h; return { previous: { x: s.x - d * (a.x - o.x), y: s.y - d * (a.y - o.y) }, next: { x: s.x + u * (a.x - o.x), y: s.y + u * (a.y - o.y) } } } function dn (t) { const e = t.length; const i = Array(e).fill(0); const n = Array(e); let o; let s; let a; let r = cn(t, 0); for (o = 0; o < e; ++o) { if (s = a, a = r, r = cn(t, o + 1), a) { if (r) { const t = r.x - a.x; i[o] = t !== 0 ? (r.y - a.y) / t : 0 }n[o] = s ? r ? Dt(i[o - 1]) !== Dt(i[o]) ? 0 : (i[o - 1] + i[o]) / 2 : i[o - 1] : i[o] } }!(function (t, e, i) { const n = t.length; let o; let s; let a; let r; let l; let c = cn(t, 0); for (let h = 0; h < n - 1; ++h) { l = c, c = cn(t, h + 1), l && c && (Tt(e[h], 0, ln) ? i[h] = i[h + 1] = 0 : (o = i[h] / e[h], s = i[h + 1] / e[h], r = Math.pow(o, 2) + Math.pow(s, 2), r <= 9 || (a = 3 / Math.sqrt(r), i[h] = o * a * e[h], i[h + 1] = s * a * e[h]))) } }(t, i, n)), (function (t, e) { const i = t.length; let n; let o; let s; let a = cn(t, 0); for (let r = 0; r < i; ++r) { if (o = s, s = a, a = cn(t, r + 1), !s) { continue } const { x: i, y: l } = s; o && (n = (i - o.x) / 3, s.cp1x = i - n, s.cp1y = l - n * e[r]), a && (n = (a.x - i) / 3, s.cp2x = i + n, s.cp2y = l + n * e[r]) } }(t, n)) } function un (t, e, i) { return Math.max(Math.min(t, i), e) } function fn (t, e, i, n) { let o, s, a, r; if (e.spanGaps && (t = t.filter(t => !t.skip)), e.cubicInterpolationMode === 'monotone') { dn(t) } else { let i = n ? t[t.length - 1] : t[0]; for (o = 0, s = t.length; o < s; ++o) { a = t[o], r = hn(i, a, t[Math.min(o + 1, s - (n ? 0 : 1)) % s], e.tension), a.cp1x = r.previous.x, a.cp1y = r.previous.y, a.cp2x = r.next.x, a.cp2y = r.next.y, i = a } }e.capBezierPoints && (function (t, e) { let i; let n; let o; let s; let a; let r = Gt(t[0], e); for (i = 0, n = t.length; i < n; ++i) { a = s, s = r, r = i < n - 1 && Gt(t[i + 1], e), s && (o = t[i], a && (o.cp1x = un(o.cp1x, e.left, e.right), o.cp1y = un(o.cp1y, e.top, e.bottom)), r && (o.cp2x = un(o.cp2x, e.left, e.right), o.cp2y = un(o.cp2y, e.top, e.bottom))) } }(t, i)) } function gn (t, e, i, n) { return { x: t.x + i * (e.x - t.x), y: t.y + i * (e.y - t.y) } } function pn (t, e, i, n) { return { x: t.x + i * (e.x - t.x), y: n === 'middle' ? i < 0.5 ? t.y : e.y : n === 'after' ? i < 1 ? t.y : e.y : i > 0 ? e.y : t.y } } function mn (t, e, i, n) { const o = { x: t.cp2x, y: t.cp2y }; const s = { x: e.cp1x, y: e.cp1y }; const a = gn(t, o, i); const r = gn(o, s, i); const l = gn(s, e, i); const c = gn(a, r, i); const h = gn(r, l, i); return gn(c, h, i) } function xn (t, e, i) { return t ? (function (t, e) { return { x: i => t + t + e - i, setWidth (t) { e = t }, textAlign: t => t === 'center' ? t : t === 'right' ? 'left' : 'right', xPlus: (t, e) => t - e, leftForLtr: (t, e) => t - e } }(e, i)) : { x: t => t, setWidth (t) {}, textAlign: t => t, xPlus: (t, e) => t + e, leftForLtr: (t, e) => t } } function bn (t, e) { let i, n; e !== 'ltr' && e !== 'rtl' || (i = t.canvas.style, n = [i.getPropertyValue('direction'), i.getPropertyPriority('direction')], i.setProperty('direction', e, 'important'), t.prevTextDirection = n) } function _n (t, e) { void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty('direction', e[0], e[1])) } function yn (t) { return t === 'angle' ? { between: Ht, compare: Bt, normalize: Wt } : { between: (t, e, i) => t >= Math.min(e, i) && t <= Math.max(i, e), compare: (t, e) => t - e, normalize: t => t } } function vn ({ start: t, end: e, count: i, loop: n, style: o }) { return { start: t % i, end: e % i, loop: n && (e - t + 1) % i == 0, style: o } } function wn (t, e, i) { if (!i) { return [t] } const { property: n, start: o, end: s } = i; const a = e.length; const { compare: r, between: l, normalize: c } = yn(n); const { start: h, end: d, loop: u, style: f } = (function (t, e, i) { const { property: n, start: o, end: s } = i; const { between: a, normalize: r } = yn(n); const l = e.length; let c; let h; let { start: d, end: u, loop: f } = t; if (f) { for (d += l, u += l, c = 0, h = l; c < h && a(r(e[d % l][n]), o, s); ++c) { d--, u-- }d %= l, u %= l } return u < d && (u += l), { start: d, end: u, loop: f, style: t.style } }(t, e, i)); const g = []; let p; let m; let x; let b = !1; let _ = null; const y = () => b || l(o, x, p) && r(o, x) !== 0; const v = () => !b || r(s, p) === 0 || l(s, x, p); for (let t = h, i = h; t <= d; ++t) { m = e[t % a], m.skip || (p = c(m[n]), b = l(p, o, s), _ === null && y() && (_ = r(p, o) === 0 ? t : i), _ !== null && v() && (g.push(vn({ start: _, end: t, loop: u, count: a, style: f })), _ = null), i = t, x = p) } return _ !== null && g.push(vn({ start: _, end: d, loop: u, count: a, style: f })), g } function Mn (t, e) { const i = []; const n = t.segments; for (let o = 0; o < n.length; o++) { const s = wn(n[o], t.points, e); s.length && i.push(...s) } return i } function kn (t, e) { const i = t.points; const n = t.options.spanGaps; const o = i.length; if (!o) { return [] } const s = !!t._loop; const { start: a, end: r } = (function (t, e, i, n) { let o = 0; let s = e - 1; if (i && !n) { for (;o < e && !t[o].skip;) { o++ } } for (;o < e && t[o].skip;) { o++ } for (o %= e, i && (s += o); s > o && t[s % e].skip;) { s-- } return s %= e, { start: o, end: s } }(i, o, s, n)); if (!0 === n) { return Sn([{ start: a, end: r, loop: s }], i, e) } return Sn((function (t, e, i, n) { const o = t.length; const s = []; let a; let r = e; let l = t[e]; for (a = e + 1; a <= i; ++a) { const i = t[a % o]; i.skip || i.stop ? l.skip || (n = !1, s.push({ start: e % o, end: (a - 1) % o, loop: n }), e = r = i.stop ? a : null) : (r = a, l.skip && (e = a)), l = i } return r !== null && s.push({ start: e % o, end: r % o, loop: n }), s }(i, a, r < a ? r + o : r, !!t._fullLoop && a === 0 && r === o - 1)), i, e) } function Sn (t, e, i) { return i && i.setContext && e ? (function (t, e, i) { const n = e.length; const o = []; let s = t[0].start; let a = s; for (const r of t) { let t; let l; let c = e[s % n]; for (a = s + 1; a <= r.end; a++) { const h = e[a % n]; l = Pn(i.setContext({ type: 'segment', p0: c, p1: h })), Dn(l, t) && (o.push({ start: s, end: a - 1, loop: r.loop, style: t }), t = l, s = a - 1), c = h, t = l }s < a - 1 && (o.push({ start: s, end: a - 1, loop: r.loop, style: l }), s = a - 1) } return o }(t, e, i)) : t } function Pn (t) { return { backgroundColor: t.backgroundColor, borderCapStyle: t.borderCapStyle, borderDash: t.borderDash, borderDashOffset: t.borderDashOffset, borderJoinStyle: t.borderJoinStyle, borderWidth: t.borderWidth, borderColor: t.borderColor } } function Dn (t, e) { return e && JSON.stringify(t) !== JSON.stringify(e) } const Cn = Object.freeze({ __proto__: null, easingEffects: mi, color: W, getHoverColor: H, noop: N, uid: j, isNullOrUndef: $, isArray: Y, isObject: U, isFinite: X, finiteOrDefault: q, valueOrDefault: K, toPercentage: G, toDimension: Z, callback: Q, each: J, _elementsEqual: tt, clone: et, _merger: nt, merge: ot, mergeIf: st, _mergerIf: at, _deprecated: function (t, e, i, n) { void 0 !== e && console.warn(t + ': "' + i + '" is deprecated. Please use "' + n + '" instead') }, resolveObjectKey: lt, _capitalize: ct, defined: ht, isFunction: dt, setsEqual: ut, toFontString: $t, _measureText: Yt, _longestText: Ut, _alignPixel: Xt, clearCanvas: qt, drawPoint: Kt, _isPointInArea: Gt, clipArea: Zt, unclipArea: Qt, _steppedLineTo: Jt, _bezierCurveTo: te, renderText: ee, addRoundedRectPath: ie, _lookup: ne, _lookupByKey: oe, _rlookupByKey: se, _filterBetween: ae, listenArrayEvents: le, unlistenArrayEvents: ce, _arrayUnique: he, _createResolver: qi, _attachContext: Ki, _descriptors: Gi, splineCurve: hn, splineCurveMonotone: dn, _updateBezierControlPoints: fn, _getParentNode: de, getStyle: ge, getRelativePosition: xe, getMaximumSize: _e, retinaScale: ye, supportsEventListenerOptions: ve, readUsedSize: we, fontString: function (t, e, i) { return e + ' ' + t + 'px ' + i }, requestAnimFrame: t, throttled: e, debounce: i, _toLeftRightCenter: n, _alignStartEnd: o, _textX: s, _pointInLine: gn, _steppedInterpolation: pn, _bezierInterpolation: mn, formatNumber: zi, toLineHeight: Re, _readValueToProps: Le, toTRBL: Ee, toTRBLCorners: Ie, toPadding: ze, toFont: Fe, resolve: Ve, _addGrace: Be, PI: bt, TAU: _t, PITAU: yt, INFINITY: vt, RAD_PER_DEG: wt, HALF_PI: Mt, QUARTER_PI: kt, TWO_THIRDS_PI: St, log10: Pt, sign: Dt, niceNum: Ct, _factorize: Ot, isNumber: At, almostEquals: Tt, almostWhole: Rt, _setMinAndMaxByKey: Lt, toRadians: Et, toDegrees: It, _decimalPlaces: zt, getAngleFromPoint: Ft, distanceBetweenPoints: Vt, _angleDiff: Bt, _normalizeAngle: Wt, _angleBetween: Ht, _limitValue: Nt, _int16Range: jt, getRtlAdapter: xn, overrideTextDirection: bn, restoreTextDirection: _n, _boundSegment: wn, _boundSegments: Mn, _computeSegments: kn }); class On {constructor (t, e, i) { this.type = t, this.scope = e, this.override = i, this.items = Object.create(null) }isForType (t) { return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype) }register (t) { const e = this; const i = Object.getPrototypeOf(t); let n; (function (t) { return 'id' in t && 'defaults' in t })(i) && (n = e.register(i)); const o = e.items; const s = t.id; const a = e.scope + '.' + s; if (!s) { throw new Error('class does not have id: ' + t) } return s in o || (o[s] = t, (function (t, e, i) { const n = ot(Object.create(null), [i ? xt.get(i) : {}, xt.get(e), t.defaults]); xt.set(e, n), t.defaultRoutes && (function (t, e) { Object.keys(e).forEach(i => { const n = i.split('.'); const o = n.pop(); const s = [t].concat(n).join('.'); const a = e[i].split('.'); const r = a.pop(); const l = a.join('.'); xt.route(s, o, l, r) }) }(e, t.defaultRoutes)); t.descriptors && xt.describe(e, t.descriptors) }(t, a, n)), e.override && xt.override(t.id, t.overrides)), a }get (t) { return this.items[t] }unregister (t) { const e = this.items; const i = t.id; const n = this.scope; i in e && delete e[i], n && i in xt[n] && (delete xt[n][i], this.override && delete ft[i]) }} const An = new class {constructor () { this.controllers = new On(Li, 'datasets', !0), this.elements = new On(Ei, 'elements'), this.plugins = new On(Object, 'plugins'), this.scales = new On(Xi, 'scales'), this._typedRegistries = [this.controllers, this.scales, this.elements] }add (...t) { this._each('register', t) }remove (...t) { this._each('unregister', t) }addControllers (...t) { this._each('register', t, this.controllers) }addElements (...t) { this._each('register', t, this.elements) }addPlugins (...t) { this._each('register', t, this.plugins) }addScales (...t) { this._each('register', t, this.scales) }getController (t) { return this._get(t, this.controllers, 'controller') }getElement (t) { return this._get(t, this.elements, 'element') }getPlugin (t) { return this._get(t, this.plugins, 'plugin') }getScale (t) { return this._get(t, this.scales, 'scale') }removeControllers (...t) { this._each('unregister', t, this.controllers) }removeElements (...t) { this._each('unregister', t, this.elements) }removePlugins (...t) { this._each('unregister', t, this.plugins) }removeScales (...t) { this._each('unregister', t, this.scales) }_each (t, e, i) { const n = this; [...e].forEach(e => { const o = i || n._getRegistryForType(e); i || o.isForType(e) || o === n.plugins && e.id ? n._exec(t, o, e) : J(e, e => { const o = i || n._getRegistryForType(e); n._exec(t, o, e) }) }) }_exec (t, e, i) { const n = ct(t); Q(i['before' + n], [], i), e[t](i), Q(i['after' + n], [], i) }_getRegistryForType (t) { for (let e = 0; e < this._typedRegistries.length; e++) { const i = this._typedRegistries[e]; if (i.isForType(t)) { return i } } return this.plugins }_get (t, e, i) { const n = e.get(t); if (void 0 === n) { throw new Error('"' + t + '" is not a registered ' + i + '.') } return n }}(); class Tn {constructor () { this._init = [] }notify (t, e, i, n) { const o = this; e === 'beforeInit' && (o._init = o._createDescriptors(t, !0), o._notify(o._init, t, 'install')); const s = n ? o._descriptors(t).filter(n) : o._descriptors(t); const a = o._notify(s, t, e, i); return e === 'destroy' && (o._notify(s, t, 'stop'), o._notify(o._init, t, 'uninstall')), a }_notify (t, e, i, n) { n = n || {}; for (const o of t) { const t = o.plugin; if (!1 === Q(t[i], [e, n, o.options], t) && n.cancelable) { return !1 } } return !0 }invalidate () { $(this._cache) || (this._oldCache = this._cache, this._cache = void 0) }_descriptors (t) { if (this._cache) { return this._cache } const e = this._cache = this._createDescriptors(t); return this._notifyStateChanges(t), e }_createDescriptors (t, e) { const i = t && t.config; const n = K(i.options && i.options.plugins, {}); const o = (function (t) { const e = []; const i = Object.keys(An.plugins.items); for (let t = 0; t < i.length; t++) { e.push(An.getPlugin(i[t])) } const n = t.plugins || []; for (let t = 0; t < n.length; t++) { const i = n[t]; e.indexOf(i) === -1 && e.push(i) } return e }(i)); return !1 !== n || e ? (function (t, e, i, n) { const o = []; const s = t.getContext(); for (let a = 0; a < e.length; a++) { const r = e[a]; const l = Rn(i[r.id], n); l !== null && o.push({ plugin: r, options: Ln(t.config, r, l, s) }) } return o }(t, o, n, e)) : [] }_notifyStateChanges (t) { const e = this._oldCache || []; const i = this._cache; const n = (t, e) => t.filter(t => !e.some(e => t.plugin.id === e.plugin.id)); this._notify(n(e, i), t, 'stop'), this._notify(n(i, e), t, 'start') }} function Rn (t, e) { return e || !1 !== t ? !0 === t ? {} : t : null } function Ln (t, e, i, n) { const o = t.pluginScopeKeys(e); const s = t.getOptionScopes(i, o); return t.createResolver(s, n, [''], { scriptable: !1, indexable: !1, allKeys: !0 }) } function En (t, e) { const i = xt.datasets[t] || {}; return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || i.indexAxis || 'x' } function In (t, e) { return t === 'x' || t === 'y' ? t : e.axis || ((i = e.position) === 'top' || i === 'bottom' ? 'x' : i === 'left' || i === 'right' ? 'y' : void 0) || t.charAt(0).toLowerCase(); let i } function zn (t) { const e = t.options || (t.options = {}); e.plugins = K(e.plugins, {}), e.scales = (function (t, e) { const i = ft[t.type] || { scales: {} }; const n = e.scales || {}; const o = En(t.type, e); const s = Object.create(null); const a = Object.create(null); return Object.keys(n).forEach(t => { const e = n[t]; const r = In(t, e); const l = (function (t, e) { return t === e ? '_index_' : '_value_' }(r, o)); const c = i.scales || {}; s[r] = s[r] || t, a[t] = st(Object.create(null), [{ axis: r }, e, c[r], c[l]]) }), t.data.datasets.forEach(i => { const o = i.type || t.type; const r = i.indexAxis || En(o, e); const l = (ft[o] || {}).scales || {}; Object.keys(l).forEach(t => { const e = (function (t, e) { let i = t; return t === '_index_' ? i = e : t === '_value_' && (i = e === 'x' ? 'y' : 'x'), i }(t, r)); const o = i[e + 'AxisID'] || s[e] || e; a[o] = a[o] || Object.create(null), st(a[o], [{ axis: e }, n[o], l[t]]) }) }), Object.keys(a).forEach(t => { const e = a[t]; st(e, [xt.scales[e.type], xt.scale]) }), a }(t, e)) } function Fn (t) { return (t = t || {}).datasets = t.datasets || [], t.labels = t.labels || [], t } const Vn = new Map(); const Bn = new Set(); function Wn (t, e) { let i = Vn.get(t); return i || (i = e(), Vn.set(t, i), Bn.add(i)), i } const Hn = (t, e, i) => { const n = lt(e, i); void 0 !== n && t.add(n) }; class Nn {constructor (t) { this._config = (function (t) { return (t = t || {}).data = Fn(t.data), zn(t), t }(t)), this._scopeCache = new Map(), this._resolverCache = new Map() } get type () { return this._config.type } set type (t) { this._config.type = t } get data () { return this._config.data } set data (t) { this._config.data = Fn(t) } get options () { return this._config.options } set options (t) { this._config.options = t } get plugins () { return this._config.plugins }update () { const t = this._config; this.clearCache(), zn(t) }clearCache () { this._scopeCache.clear(), this._resolverCache.clear() }datasetScopeKeys (t) { return Wn(t, () => [['datasets.' + t, '']]) }datasetAnimationScopeKeys (t, e) { return Wn(`${t}.transition.${e}`, () => [[`datasets.${t}.transitions.${e}`, 'transitions.' + e], ['datasets.' + t, '']]) }datasetElementScopeKeys (t, e) { return Wn(`${t}-${e}`, () => [[`datasets.${t}.elements.${e}`, 'datasets.' + t, 'elements.' + e, '']]) }pluginScopeKeys (t) { const e = t.id; return Wn(`${this.type}-plugin-${e}`, () => [['plugins.' + e, ...t.additionalOptionScopes || []]]) }_cachedScopes (t, e) { const i = this._scopeCache; let n = i.get(t); return n && !e || (n = new Map(), i.set(t, n)), n }getOptionScopes (t, e, i) { const { options: n, type: o } = this; const s = this._cachedScopes(t, i); const a = s.get(e); if (a) { return a } const r = new Set(); e.forEach(e => { t && (r.add(t), e.forEach(e => Hn(r, t, e))), e.forEach(t => Hn(r, n, t)), e.forEach(t => Hn(r, ft[o] || {}, t)), e.forEach(t => Hn(r, xt, t)), e.forEach(t => Hn(r, gt, t)) }); const l = [...r]; return Bn.has(e) && s.set(e, l), l }chartOptionScopes () { const { options: t, type: e } = this; return [t, ft[e] || {}, xt.datasets[e] || {}, { type: e }, xt, gt] }resolveNamedOptions (t, e, i, n = ['']) { const o = { $shared: !0 }; const { resolver: s, subPrefixes: a } = jn(this._resolverCache, t, n); let r = s; if (function (t, e) { const { isScriptable: i, isIndexable: n } = Gi(t); for (const o of e) { if (i(o) && dt(t[o]) || n(o) && Y(t[o])) { return !0 } } return !1 }(s, e)) { o.$shared = !1; r = Ki(s, i = dt(i) ? i() : i, this.createResolver(t, i, a)) } for (const t of e) { o[t] = r[t] } return o }createResolver (t, e, i = [''], n) { const { resolver: o } = jn(this._resolverCache, t, i); return U(e) ? Ki(o, e, void 0, n) : o }} function jn (t, e, i) { let n = t.get(e); n || (n = new Map(), t.set(e, n)); const o = i.join(); let s = n.get(o); if (!s) { s = { resolver: qi(e, i), subPrefixes: i.filter(t => !t.toLowerCase().includes('hover')) }, n.set(o, s) } return s } const $n = ['top', 'bottom', 'left', 'right', 'chartArea']; function Yn (t, e) { return t === 'top' || t === 'bottom' || $n.indexOf(t) === -1 && e === 'x' } function Un (t, e) { return function (i, n) { return i[t] === n[t] ? i[e] - n[e] : i[t] - n[t] } } function Xn (t) { const e = t.chart; const i = e.options.animation; e.notifyPlugins('afterRender'), Q(i && i.onComplete, [t], e) } function qn (t) { const e = t.chart; const i = e.options.animation; Q(i && i.onProgress, [t], e) } function Kn () { return typeof window !== 'undefined' && typeof document !== 'undefined' } function Gn (t) { return Kn() && typeof t === 'string' ? t = document.getElementById(t) : t && t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t } const Zn = {}; const Qn = t => { const e = Gn(t); return Object.values(Zn).filter(t => t.canvas === e).pop() }; class Jn {constructor (t, e) { const n = this; this.config = e = new Nn(e); const o = Gn(t); const s = Qn(o); if (s) { throw new Error("Canvas is already in use. Chart with ID '" + s.id + "' must be destroyed before the canvas can be reused.") } const r = e.createResolver(e.chartOptionScopes(), n.getContext()); this.platform = n._initializePlatform(o, e); const l = n.platform.acquireContext(o, r.aspectRatio); const c = l && l.canvas; const h = c && c.height; const d = c && c.width; this.id = j(), this.ctx = l, this.canvas = c, this.width = d, this.height = h, this._options = r, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._sortedMetasets = [], this.scales = {}, this.scale = void 0, this._plugins = new Tn(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = i(() => this.update('resize'), r.resizeDelay || 0), Zn[n.id] = n, l && c ? (a.listen(n, 'complete', Xn), a.listen(n, 'progress', qn), n._initialize(), n.attached && n.update()) : console.error("Failed to create chart: can't acquire context from the given item") } get aspectRatio () { const { options: { aspectRatio: t, maintainAspectRatio: e }, width: i, height: n, _aspectRatio: o } = this; return $(t) ? e && o ? o : n ? i / n : null : t } get data () { return this.config.data } set data (t) { this.config.data = t } get options () { return this._options } set options (t) { this.config.options = t }_initialize () { const t = this; return t.notifyPlugins('beforeInit'), t.options.responsive ? t.resize() : ye(t, t.options.devicePixelRatio), t.bindEvents(), t.notifyPlugins('afterInit'), t }_initializePlatform (t, e) { return e.platform ? new e.platform() : !Kn() || typeof OffscreenCanvas !== 'undefined' && t instanceof OffscreenCanvas ? new Qe() : new di() }clear () { return qt(this.canvas, this.ctx), this }stop () { return a.stop(this), this }resize (t, e) { a.running(this) ? this._resizeBeforeDraw = { width: t, height: e } : this._resize(t, e) }_resize (t, e) { const i = this; const n = i.options; const o = i.canvas; const s = n.maintainAspectRatio && i.aspectRatio; const a = i.platform.getMaximumSize(o, t, e, s); const r = i.currentDevicePixelRatio; const l = n.devicePixelRatio || i.platform.getDevicePixelRatio(); i.width === a.width && i.height === a.height && r === l || (i.width = a.width, i.height = a.height, i._aspectRatio = i.aspectRatio, ye(i, l, !0), i.notifyPlugins('resize', { size: a }), Q(n.onResize, [i, a], i), i.attached && i._doResize() && i.render()) }ensureScalesHaveIDs () { J(this.options.scales || {}, (t, e) => { t.id = e }) }buildOrUpdateScales () { const t = this; const e = t.options; const i = e.scales; const n = t.scales; const o = Object.keys(n).reduce((t, e) => (t[e] = !1, t), {}); let s = []; i && (s = s.concat(Object.keys(i).map(t => { const e = i[t]; const n = In(t, e); const o = n === 'r'; const s = n === 'x'; return { options: e, dposition: o ? 'chartArea' : s ? 'bottom' : 'left', dtype: o ? 'radialLinear' : s ? 'category' : 'linear' } }))), J(s, i => { const s = i.options; const a = s.id; const r = In(a, s); const l = K(s.type, i.dtype); void 0 !== s.position && Yn(s.position, r) === Yn(i.dposition) || (s.position = i.dposition), o[a] = !0; let c = null; if (a in n && n[a].type === l) { c = n[a] } else { c = new (An.getScale(l))({ id: a, type: l, ctx: t.ctx, chart: t }), n[c.id] = c }c.init(s, e) }), J(o, (t, e) => { t || delete n[e] }), J(n, e => { Ge.configure(t, e, e.options), Ge.addBox(t, e) }) }_updateMetasetIndex (t, e) { const i = this._metasets; const n = t.index; n !== e && (i[n] = i[e], i[e] = t, t.index = e) }_updateMetasets () { const t = this; const e = t._metasets; const i = t.data.datasets.length; const n = e.length; if (n > i) { for (let e = i; e < n; ++e) { t._destroyDatasetMeta(e) }e.splice(i, n - i) }t._sortedMetasets = e.slice(0).sort(Un('order', 'index')) }_removeUnreferencedMetasets () { const t = this; const { _metasets: e, data: { datasets: i } } = t; e.length > i.length && delete t._stacks, e.forEach((e, n) => { i.filter(t => t === e._dataset).length === 0 && t._destroyDatasetMeta(n) }) }buildOrUpdateControllers () { const t = this; const e = []; const i = t.data.datasets; let n, o; for (t._removeUnreferencedMetasets(), n = 0, o = i.length; n < o; n++) { const o = i[n]; let s = t.getDatasetMeta(n); const a = o.type || t.config.type; if (s.type && s.type !== a && (t._destroyDatasetMeta(n), s = t.getDatasetMeta(n)), s.type = a, s.indexAxis = o.indexAxis || En(a, t.options), s.order = o.order || 0, t._updateMetasetIndex(s, n), s.label = '' + o.label, s.visible = t.isDatasetVisible(n), s.controller) { s.controller.updateIndex(n), s.controller.linkScales() } else { const i = An.getController(a); const { datasetElementType: o, dataElementType: r } = xt.datasets[a]; Object.assign(i.prototype, { dataElementType: An.getElement(r), datasetElementType: o && An.getElement(o) }), s.controller = new i(t, n), e.push(s.controller) } } return t._updateMetasets(), e }_resetElements () { const t = this; J(t.data.datasets, (e, i) => { t.getDatasetMeta(i).controller.reset() }, t) }reset () { this._resetElements(), this.notifyPlugins('reset') }update (t) { const e = this; const i = e.config; i.update(), e._options = i.createResolver(i.chartOptionScopes(), e.getContext()), J(e.scales, t => { Ge.removeBox(e, t) }); const n = e._animationsDisabled = !e.options.animation; e.ensureScalesHaveIDs(), e.buildOrUpdateScales(); const o = new Set(Object.keys(e._listeners)); const s = new Set(e.options.events); if (ut(o, s) || (e.unbindEvents(), e.bindEvents()), e._plugins.invalidate(), !1 === e.notifyPlugins('beforeUpdate', { mode: t, cancelable: !0 })) { return } const a = e.buildOrUpdateControllers(); e.notifyPlugins('beforeElementsUpdate'); let r = 0; for (let t = 0, i = e.data.datasets.length; t < i; t++) { const { controller: i } = e.getDatasetMeta(t); const o = !n && a.indexOf(i) === -1; i.buildOrUpdateElements(o), r = Math.max(+i.getMaxOverflow(), r) }e._minPadding = r, e._updateLayout(r), n || J(a, t => { t.reset() }), e._updateDatasets(t), e.notifyPlugins('afterUpdate', { mode: t }), e._layers.sort(Un('z', '_idx')), e._lastEvent && e._eventHandler(e._lastEvent, !0), e.render() }_updateLayout (t) { const e = this; if (!1 === e.notifyPlugins('beforeLayout', { cancelable: !0 })) { return } Ge.update(e, e.width, e.height, t); const i = e.chartArea; const n = i.width <= 0 || i.height <= 0; e._layers = [], J(e.boxes, t => { n && t.position === 'chartArea' || (t.configure && t.configure(), e._layers.push(...t._layers())) }, e), e._layers.forEach((t, e) => { t._idx = e }), e.notifyPlugins('afterLayout') }_updateDatasets (t) { const e = this; const i = typeof t === 'function'; if (!1 !== e.notifyPlugins('beforeDatasetsUpdate', { mode: t, cancelable: !0 })) { for (let n = 0, o = e.data.datasets.length; n < o; ++n) { e._updateDataset(n, i ? t({ datasetIndex: n }) : t) }e.notifyPlugins('afterDatasetsUpdate', { mode: t }) } }_updateDataset (t, e) { const i = this; const n = i.getDatasetMeta(t); const o = { meta: n, index: t, mode: e, cancelable: !0 }; !1 !== i.notifyPlugins('beforeDatasetUpdate', o) && (n.controller._update(e), o.cancelable = !1, i.notifyPlugins('afterDatasetUpdate', o)) }render () { const t = this; !1 !== t.notifyPlugins('beforeRender', { cancelable: !0 }) && (a.has(t) ? t.attached && !a.running(t) && a.start(t) : (t.draw(), Xn({ chart: t }))) }draw () { const t = this; let e; if (t._resizeBeforeDraw) { const { width: e, height: i } = t._resizeBeforeDraw; t._resize(e, i), t._resizeBeforeDraw = null } if (t.clear(), t.width <= 0 || t.height <= 0) { return } if (!1 === t.notifyPlugins('beforeDraw', { cancelable: !0 })) { return } const i = t._layers; for (e = 0; e < i.length && i[e].z <= 0; ++e) { i[e].draw(t.chartArea) } for (t._drawDatasets(); e < i.length; ++e) { i[e].draw(t.chartArea) }t.notifyPlugins('afterDraw') }_getSortedDatasetMetas (t) { const e = this._sortedMetasets; const i = []; let n, o; for (n = 0, o = e.length; n < o; ++n) { const o = e[n]; t && !o.visible || i.push(o) } return i }getSortedVisibleDatasetMetas () { return this._getSortedDatasetMetas(!0) }_drawDatasets () { const t = this; if (!1 === t.notifyPlugins('beforeDatasetsDraw', { cancelable: !0 })) { return } const e = t.getSortedVisibleDatasetMetas(); for (let i = e.length - 1; i >= 0; --i) { t._drawDataset(e[i]) }t.notifyPlugins('afterDatasetsDraw') }_drawDataset (t) { const e = this; const i = e.ctx; const n = t._clip; const o = e.chartArea; const s = { meta: t, index: t.index, cancelable: !0 }; !1 !== e.notifyPlugins('beforeDatasetDraw', s) && (Zt(i, { left: !1 === n.left ? 0 : o.left - n.left, right: !1 === n.right ? e.width : o.right + n.right, top: !1 === n.top ? 0 : o.top - n.top, bottom: !1 === n.bottom ? e.height : o.bottom + n.bottom }), t.controller.draw(), Qt(i), s.cancelable = !1, e.notifyPlugins('afterDatasetDraw', s)) }getElementsAtEventForMode (t, e, i, n) { const o = Oe.modes[e]; return typeof o === 'function' ? o(this, t, i, n) : [] }getDatasetMeta (t) { const e = this.data.datasets[t]; const i = this._metasets; let n = i.filter(t => t && t._dataset === e).pop(); return n || (n = i[t] = { type: null, data: [], dataset: null, controller: null, hidden: null, xAxisID: null, yAxisID: null, order: e && e.order || 0, index: t, _dataset: e, _parsed: [], _sorted: !1 }), n }getContext () { return this.$context || (this.$context = { chart: this, type: 'chart' }) }getVisibleDatasetCount () { return this.getSortedVisibleDatasetMetas().length }isDatasetVisible (t) { const e = this.data.datasets[t]; if (!e) { return !1 } const i = this.getDatasetMeta(t); return typeof i.hidden === 'boolean' ? !i.hidden : !e.hidden }setDatasetVisibility (t, e) { this.getDatasetMeta(t).hidden = !e }toggleDataVisibility (t) { this._hiddenIndices[t] = !this._hiddenIndices[t] }getDataVisibility (t) { return !this._hiddenIndices[t] }_updateDatasetVisibility (t, e) { const i = this; const n = e ? 'show' : 'hide'; const o = i.getDatasetMeta(t); const s = o.controller._resolveAnimations(void 0, n); i.setDatasetVisibility(t, e), s.update(o, { visible: e }), i.update(e => e.datasetIndex === t ? n : void 0) }hide (t) { this._updateDatasetVisibility(t, !1) }show (t) { this._updateDatasetVisibility(t, !0) }_destroyDatasetMeta (t) { const e = this; const i = e._metasets && e._metasets[t]; i && i.controller && (i.controller._destroy(), delete e._metasets[t]) }destroy () { const t = this; const { canvas: e, ctx: i } = t; let n, o; for (t.stop(), a.remove(t), n = 0, o = t.data.datasets.length; n < o; ++n) { t._destroyDatasetMeta(n) }t.config.clearCache(), e && (t.unbindEvents(), qt(e, i), t.platform.releaseContext(i), t.canvas = null, t.ctx = null), t.notifyPlugins('destroy'), delete Zn[t.id] }toBase64Image (...t) { return this.canvas.toDataURL(...t) }bindEvents () { const t = this; const e = t._listeners; const i = t.platform; const n = (n, o) => { i.addEventListener(t, n, o), e[n] = o }; const o = (n, o) => { e[n] && (i.removeEventListener(t, n, o), delete e[n]) }; let s = function (e, i, n) { e.offsetX = i, e.offsetY = n, t._eventHandler(e) }; if (J(t.options.events, t => n(t, s)), t.options.responsive) { let e; s = (e, i) => { t.canvas && t.resize(e, i) }; const a = () => { o('attach', a), t.attached = !0, t.resize(), n('resize', s), n('detach', e) }; e = () => { t.attached = !1, o('resize', s), n('attach', a) }, i.isAttached(t.canvas) ? a() : e() } else { t.attached = !0 } }unbindEvents () { const t = this; const e = t._listeners; e && (t._listeners = {}, J(e, (e, i) => { t.platform.removeEventListener(t, i, e) })) }updateHoverStyle (t, e, i) { const n = i ? 'set' : 'remove'; let o, s, a, r; for (e === 'dataset' && (o = this.getDatasetMeta(t[0].datasetIndex), o.controller['_' + n + 'DatasetHoverStyle']()), a = 0, r = t.length; a < r; ++a) { s = t[a]; const e = s && this.getDatasetMeta(s.datasetIndex).controller; e && e[n + 'HoverStyle'](s.element, s.datasetIndex, s.index) } }getActiveElements () { return this._active || [] }setActiveElements (t) { const e = this; const i = e._active || []; const n = t.map(({ datasetIndex: t, index: i }) => { const n = e.getDatasetMeta(t); if (!n) { throw new Error('No dataset found at index ' + t) } return { datasetIndex: t, element: n.data[i], index: i } }); !tt(n, i) && (e._active = n, e._updateHoverStyles(n, i)) }notifyPlugins (t, e, i) { return this._plugins.notify(this, t, e, i) }_updateHoverStyles (t, e, i) { const n = this; const o = n.options.hover; const s = (t, e) => t.filter(t => !e.some(e => t.datasetIndex === e.datasetIndex && t.index === e.index)); const a = s(e, t); const r = i ? t : s(t, e); a.length && n.updateHoverStyle(a, o.mode, !1), r.length && o.mode && n.updateHoverStyle(r, o.mode, !0) }_eventHandler (t, e) { const i = this; const n = { event: t, replay: e, cancelable: !0 }; const o = e => (e.options.events || this.options.events).includes(t.type); if (!1 === i.notifyPlugins('beforeEvent', n, o)) { return } const s = i._handleEvent(t, e); return n.cancelable = !1, i.notifyPlugins('afterEvent', n, o), (s || n.changed) && i.render(), i }_handleEvent (t, e) { const i = this; const { _active: n = [], options: o } = i; const s = o.hover; const a = e; let r = []; let l = !1; let c = null; return t.type !== 'mouseout' && (r = i.getElementsAtEventForMode(t, s.mode, s, a), c = t.type === 'click' ? i._lastEvent : t), i._lastEvent = null, Gt(t, i.chartArea, i._minPadding) && (Q(o.onHover, [t, r, i], i), t.type !== 'mouseup' && t.type !== 'click' && t.type !== 'contextmenu' || Q(o.onClick, [t, r, i], i)), l = !tt(r, n), (l || e) && (i._active = r, i._updateHoverStyles(r, n, e)), i._lastEvent = c, l }} const to = () => J(Jn.instances, t => t._plugins.invalidate()); const eo = !0; function io () { throw new Error('This method is not implemented: either no adapter can be found or an incomplete integration was provided.') }Object.defineProperties(Jn, { defaults: { enumerable: eo, value: xt }, instances: { enumerable: eo, value: Zn }, overrides: { enumerable: eo, value: ft }, registry: { enumerable: eo, value: An }, version: { enumerable: eo, value: '3.2.1' }, getChart: { enumerable: eo, value: Qn }, register: { enumerable: eo, value: (...t) => { An.add(...t), to() } }, unregister: { enumerable: eo, value: (...t) => { An.remove(...t), to() } } }); class no {constructor (t) { this.options = t || {} }formats () { return io() }parse (t, e) { return io() }format (t, e) { return io() }add (t, e, i) { return io() }diff (t, e, i) { return io() }startOf (t, e, i) { return io() }endOf (t, e) { return io() }}no.override = function (t) { Object.assign(no.prototype, t) }; const oo = { _date: no }; function so (t) { const e = (function (t) { if (!t._cache.$bar) { const e = t.getMatchingVisibleMetas('bar'); let i = []; for (let n = 0, o = e.length; n < o; n++) { i = i.concat(e[n].controller.getAllParsedValues(t)) }t._cache.$bar = he(i.sort((t, e) => t - e)) } return t._cache.$bar }(t)); let i; let n; let o; let s; let a = t._length; const r = () => { o !== 32767 && o !== -32768 && (ht(s) && (a = Math.min(a, Math.abs(o - s) || a)), s = o) }; for (i = 0, n = e.length; i < n; ++i) { o = t.getPixelForValue(e[i]), r() } for (s = void 0, i = 0, n = t.ticks.length; i < n; ++i) { o = t.getPixelForTick(i), r() } return a } function ao (t, e, i, n) { return Y(t) ? (function (t, e, i, n) { const o = i.parse(t[0], n); const s = i.parse(t[1], n); const a = Math.min(o, s); const r = Math.max(o, s); let l = a; let c = r; Math.abs(a) > Math.abs(r) && (l = r, c = a), e[i.axis] = c, e._custom = { barStart: l, barEnd: c, start: o, end: s, min: a, max: r } }(t, e, i, n)) : e[i.axis] = i.parse(t, n), e } function ro (t, e, i, n) { const o = t.iScale; const s = t.vScale; const a = o.getLabels(); const r = o === s; const l = []; let c, h, d, u; for (c = i, h = i + n; c < h; ++c) { u = e[c], d = {}, d[o.axis] = r || o.parse(a[c], c), l.push(ao(u, d, s, c)) } return l } function lo (t) { return t && void 0 !== t.barStart && void 0 !== t.barEnd } class co extends Li {parsePrimitiveData (t, e, i, n) { return ro(t, e, i, n) }parseArrayData (t, e, i, n) { return ro(t, e, i, n) }parseObjectData (t, e, i, n) { const { iScale: o, vScale: s } = t; const { xAxisKey: a = 'x', yAxisKey: r = 'y' } = this._parsing; const l = o.axis === 'x' ? a : r; const c = s.axis === 'x' ? a : r; const h = []; let d, u, f, g; for (d = i, u = i + n; d < u; ++d) { g = e[d], f = {}, f[o.axis] = o.parse(lt(g, l), d), h.push(ao(lt(g, c), f, s, d)) } return h }updateRangeFromParsed (t, e, i, n) { super.updateRangeFromParsed(t, e, i, n); const o = i._custom; o && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, o.min), t.max = Math.max(t.max, o.max)) }getLabelAndValue (t) { const e = this._cachedMeta; const { iScale: i, vScale: n } = e; const o = this.getParsed(t); const s = o._custom; const a = lo(s) ? '[' + s.start + ', ' + s.end + ']' : '' + n.getLabelForValue(o[n.axis]); return { label: '' + i.getLabelForValue(o[i.axis]), value: a } }initialize () { const t = this; t.enableOptionSharing = !0, super.initialize(); t._cachedMeta.stack = t.getDataset().stack }update (t) { const e = this._cachedMeta; this.updateElements(e.data, 0, e.data.length, t) }updateElements (t, e, i, n) { const o = this; const s = n === 'reset'; const a = o._cachedMeta.vScale; const r = a.getBasePixel(); const l = a.isHorizontal(); const c = o._getRuler(); const h = o.resolveDataElementOptions(e, n); const d = o.getSharedOptions(h); const u = o.includeOptions(n, d); o.updateSharedOptions(d, n, h); for (let h = e; h < e + i; h++) { const e = o.getParsed(h); const i = s || $(e[a.axis]) ? { base: r, head: r } : o._calculateBarValuePixels(h); const f = o._calculateBarIndexPixels(h, c); const g = (e._stacks || {})[a.axis]; const p = { horizontal: l, base: i.base, enableBorderRadius: !g || lo(e._custom) || o.index === g._top || o.index === g._bottom, x: l ? i.head : f.center, y: l ? f.center : i.head, height: l ? f.size : void 0, width: l ? void 0 : f.size }; u && (p.options = d || o.resolveDataElementOptions(h, n)), o.updateElement(t[h], h, p, n) } }_getStacks (t, e) { const i = this._cachedMeta.iScale; const n = i.getMatchingVisibleMetas(this._type); const o = i.options.stacked; const s = n.length; const a = []; let r, l; for (r = 0; r < s; ++r) { if (l = n[r], void 0 !== e) { const t = l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis]; if ($(t) || isNaN(t)) { continue } } if ((!1 === o || a.indexOf(l.stack) === -1 || void 0 === o && void 0 === l.stack) && a.push(l.stack), l.index === t) { break } } return a.length || a.push(void 0), a }_getStackCount (t) { return this._getStacks(void 0, t).length }_getStackIndex (t, e, i) { const n = this._getStacks(t, i); const o = void 0 !== e ? n.indexOf(e) : -1; return o === -1 ? n.length - 1 : o }_getRuler () { const t = this; const e = t.options; const i = t._cachedMeta; const n = i.iScale; const o = []; let s, a; for (s = 0, a = i.data.length; s < a; ++s) { o.push(n.getPixelForValue(t.getParsed(s)[n.axis], s)) } const r = e.barThickness; return { min: r || so(n), pixels: o, start: n._startPixel, end: n._endPixel, stackCount: t._getStackCount(), scale: n, grouped: e.grouped, ratio: r ? 1 : e.categoryPercentage * e.barPercentage } }_calculateBarValuePixels (t) { const e = this; const { vScale: i, _stacked: n } = e._cachedMeta; const { base: o, minBarLength: s } = e.options; const a = e.getParsed(t); const r = a._custom; const l = lo(r); let c; let h; let d = a[i.axis]; let u = 0; let f = n ? e.applyStack(i, a, n) : d; f !== d && (u = f - d, f = d), l && (d = r.barStart, f = r.barEnd - r.barStart, d !== 0 && Dt(d) !== Dt(r.barEnd) && (u = 0), u += d); const g = $(o) || l ? u : o; let p = i.getPixelForValue(g); c = this.chart.getDataVisibility(t) ? i.getPixelForValue(u + f) : p, h = c - p, void 0 !== s && Math.abs(h) < s && (h = h < 0 ? -s : s, d === 0 && (p -= h / 2), c = p + h); const m = o || 0; if (p === i.getPixelForValue(m)) { const t = i.getLineWidthForValue(m) / 2; h > 0 ? (p += t, h -= t) : h < 0 && (p -= t, h += t) } return { size: h, base: p, head: c, center: c + h / 2 } }_calculateBarIndexPixels (t, e) { const i = this; const n = e.scale; const o = i.options; const s = o.skipNull; const a = K(o.maxBarThickness, 1 / 0); let r, l; if (e.grouped) { const n = s ? i._getStackCount(t) : e.stackCount; const c = o.barThickness === 'flex' ? (function (t, e, i, n) { const o = e.pixels; const s = o[t]; let a = t > 0 ? o[t - 1] : null; let r = t < o.length - 1 ? o[t + 1] : null; const l = i.categoryPercentage; a === null && (a = s - (r === null ? e.end - e.start : r - s)), r === null && (r = s + s - a); const c = s - (s - Math.min(a, r)) / 2 * l; return { chunk: Math.abs(r - a) / 2 * l / n, ratio: i.barPercentage, start: c } }(t, e, o, n)) : (function (t, e, i, n) { const o = i.barThickness; let s, a; return $(o) ? (s = e.min * i.categoryPercentage, a = i.barPercentage) : (s = o * n, a = 1), { chunk: s / n, ratio: a, start: e.pixels[t] - s / 2 } }(t, e, o, n)); const h = i._getStackIndex(i.index, i._cachedMeta.stack, s ? t : void 0); r = c.start + c.chunk * h + c.chunk / 2, l = Math.min(a, c.chunk * c.ratio) } else { r = n.getPixelForValue(i.getParsed(t)[n.axis], t), l = Math.min(a, e.min * e.ratio) } return { base: r - l / 2, head: r + l / 2, center: r, size: l } }draw () { const t = this; const e = t.chart; const i = t._cachedMeta; const n = i.vScale; const o = i.data; const s = o.length; let a = 0; for (Zt(e.ctx, e.chartArea); a < s; ++a) { t.getParsed(a)[n.axis] !== null && o[a].draw(t._ctx) } Qt(e.ctx) }}co.id = 'bar', co.defaults = { datasetElementType: !1, dataElementType: 'bar', categoryPercentage: 0.8, barPercentage: 0.9, grouped: !0, animations: { numbers: { type: 'number', properties: ['x', 'y', 'base', 'width', 'height'] } } }, co.overrides = { interaction: { mode: 'index' }, scales: { _index_: { type: 'category', offset: !0, grid: { offset: !0 } }, _value_: { type: 'linear', beginAtZero: !0 } } }; class ho extends Li {initialize () { this.enableOptionSharing = !0, super.initialize() }parseObjectData (t, e, i, n) { const { xScale: o, yScale: s } = t; const { xAxisKey: a = 'x', yAxisKey: r = 'y' } = this._parsing; const l = []; let c, h, d; for (c = i, h = i + n; c < h; ++c) { d = e[c], l.push({ x: o.parse(lt(d, a), c), y: s.parse(lt(d, r), c), _custom: d && d.r && +d.r }) } return l }getMaxOverflow () { const { data: t, _parsed: e } = this._cachedMeta; let i = 0; for (let n = t.length - 1; n >= 0; --n) { i = Math.max(i, t[n].size() / 2, e[n]._custom) } return i > 0 && i }getLabelAndValue (t) { const e = this._cachedMeta; const { xScale: i, yScale: n } = e; const o = this.getParsed(t); const s = i.getLabelForValue(o.x); const a = n.getLabelForValue(o.y); const r = o._custom; return { label: e.label, value: '(' + s + ', ' + a + (r ? ', ' + r : '') + ')' } }update (t) { const e = this._cachedMeta.data; this.updateElements(e, 0, e.length, t) }updateElements (t, e, i, n) { const o = this; const s = n === 'reset'; const { xScale: a, yScale: r } = o._cachedMeta; const l = o.resolveDataElementOptions(e, n); const c = o.getSharedOptions(l); const h = o.includeOptions(n, c); for (let l = e; l < e + i; l++) { const e = t[l]; const i = !s && o.getParsed(l); const c = s ? a.getPixelForDecimal(0.5) : a.getPixelForValue(i.x); const d = s ? r.getBasePixel() : r.getPixelForValue(i.y); const u = { x: c, y: d, skip: isNaN(c) || isNaN(d) }; h && (u.options = o.resolveDataElementOptions(l, n), s && (u.options.radius = 0)), o.updateElement(e, l, u, n) }o.updateSharedOptions(c, n, l) }resolveDataElementOptions (t, e) { const i = this.getParsed(t); let n = super.resolveDataElementOptions(t, e); n.$shared && (n = Object.assign({}, n, { $shared: !1 })); const o = n.radius; return e !== 'active' && (n.radius = 0), n.radius += K(i && i._custom, o), n }}ho.id = 'bubble', ho.defaults = { datasetElementType: !1, dataElementType: 'point', animations: { numbers: { type: 'number', properties: ['x', 'y', 'borderWidth', 'radius'] } } }, ho.overrides = { scales: { x: { type: 'linear' }, y: { type: 'linear' } }, plugins: { tooltip: { callbacks: { title: () => '' } } } }; class uo extends Li {constructor (t, e) { super(t, e), this.enableOptionSharing = !0, this.innerRadius = void 0, this.outerRadius = void 0, this.offsetX = void 0, this.offsetY = void 0 }linkScales () {}parse (t, e) { const i = this.getDataset().data; const n = this._cachedMeta; let o, s; for (o = t, s = t + e; o < s; ++o) { n._parsed[o] = +i[o] } }_getRotation () { return Et(this.options.rotation - 90) }_getCircumference () { return Et(this.options.circumference) }_getRotationExtents () { let t = _t; let e = -_t; const i = this; for (let n = 0; n < i.chart.data.datasets.length; ++n) { if (i.chart.isDatasetVisible(n)) { const o = i.chart.getDatasetMeta(n).controller; const s = o._getRotation(); const a = o._getCircumference(); t = Math.min(t, s), e = Math.max(e, s + a) } } return { rotation: t, circumference: e - t } }update (t) { const e = this; const i = e.chart; const { chartArea: n } = i; const o = e._cachedMeta; const s = o.data; const a = e.getMaxBorderWidth() + e.getMaxOffset(s); const r = Math.max((Math.min(n.width, n.height) - a) / 2, 0); const l = Math.min(G(e.options.cutout, r), 1); const c = e._getRingWeight(e.index); const { circumference: h, rotation: d } = e._getRotationExtents(); const { ratioX: u, ratioY: f, offsetX: g, offsetY: p } = (function (t, e, i) { let n = 1; let o = 1; let s = 0; let a = 0; if (e < _t) { const r = t; const l = r + e; const c = Math.cos(r); const h = Math.sin(r); const d = Math.cos(l); const u = Math.sin(l); const f = (t, e, n) => Ht(t, r, l) ? 1 : Math.max(e, e * i, n, n * i); const g = (t, e, n) => Ht(t, r, l) ? -1 : Math.min(e, e * i, n, n * i); const p = f(0, c, d); const m = f(Mt, h, u); const x = g(bt, c, d); const b = g(bt + Mt, h, u); n = (p - x) / 2, o = (m - b) / 2, s = -(p + x) / 2, a = -(m + b) / 2 } return { ratioX: n, ratioY: o, offsetX: s, offsetY: a } }(d, h, l)); const m = (n.width - a) / u; const x = (n.height - a) / f; const b = Math.max(Math.min(m, x) / 2, 0); const _ = Z(e.options.radius, b); const y = (_ - Math.max(_ * l, 0)) / e._getVisibleDatasetWeightTotal(); e.offsetX = g * _, e.offsetY = p * _, o.total = e.calculateTotal(), e.outerRadius = _ - y * e._getRingWeightOffset(e.index), e.innerRadius = Math.max(e.outerRadius - y * c, 0), e.updateElements(s, 0, s.length, t) }_circumference (t, e) { const i = this; const n = i.options; const o = i._cachedMeta; const s = i._getCircumference(); return e && n.animation.animateRotate || !this.chart.getDataVisibility(t) || o._parsed[t] === null ? 0 : i.calculateCircumference(o._parsed[t] * s / _t) }updateElements (t, e, i, n) { const o = this; const s = n === 'reset'; const a = o.chart; const r = a.chartArea; const l = a.options.animation; const c = (r.left + r.right) / 2; const h = (r.top + r.bottom) / 2; const d = s && l.animateScale; const u = d ? 0 : o.innerRadius; const f = d ? 0 : o.outerRadius; const g = o.resolveDataElementOptions(e, n); const p = o.getSharedOptions(g); const m = o.includeOptions(n, p); let x; let b = o._getRotation(); for (x = 0; x < e; ++x) { b += o._circumference(x, s) } for (x = e; x < e + i; ++x) { const e = o._circumference(x, s); const i = t[x]; const a = { x: c + o.offsetX, y: h + o.offsetY, startAngle: b, endAngle: b + e, circumference: e, outerRadius: f, innerRadius: u }; m && (a.options = p || o.resolveDataElementOptions(x, n)), b += e, o.updateElement(i, x, a, n) }o.updateSharedOptions(p, n, g) }calculateTotal () { const t = this._cachedMeta; const e = t.data; let i; let n = 0; for (i = 0; i < e.length; i++) { const e = t._parsed[i]; e !== null && !isNaN(e) && this.chart.getDataVisibility(i) && (n += Math.abs(e)) } return n }calculateCircumference (t) { const e = this._cachedMeta.total; return e > 0 && !isNaN(t) ? _t * (Math.abs(t) / e) : 0 }getLabelAndValue (t) { const e = this._cachedMeta; const i = this.chart; const n = i.data.labels || []; const o = zi(e._parsed[t], i.options.locale); return { label: n[t] || '', value: o } }getMaxBorderWidth (t) { const e = this; let i = 0; const n = e.chart; let o, s, a, r, l; if (!t) { for (o = 0, s = n.data.datasets.length; o < s; ++o) { if (n.isDatasetVisible(o)) { a = n.getDatasetMeta(o), t = a.data, r = a.controller, r !== e && r.configure(); break } } } if (!t) { return 0 } for (o = 0, s = t.length; o < s; ++o) { l = r.resolveDataElementOptions(o), l.borderAlign !== 'inner' && (i = Math.max(i, l.borderWidth || 0, l.hoverBorderWidth || 0)) } return i }getMaxOffset (t) { let e = 0; for (let i = 0, n = t.length; i < n; ++i) { const t = this.resolveDataElementOptions(i); e = Math.max(e, t.offset || 0, t.hoverOffset || 0) } return e }_getRingWeightOffset (t) { let e = 0; for (let i = 0; i < t; ++i) { this.chart.isDatasetVisible(i) && (e += this._getRingWeight(i)) } return e }_getRingWeight (t) { return Math.max(K(this.chart.data.datasets[t].weight, 1), 0) }_getVisibleDatasetWeightTotal () { return this._getRingWeightOffset(this.chart.data.datasets.length) || 1 }}uo.id = 'doughnut', uo.defaults = { datasetElementType: !1, dataElementType: 'arc', animation: { animateRotate: !0, animateScale: !1 }, animations: { numbers: { type: 'number', properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth'] } }, cutout: '50%', rotation: 0, circumference: 360, radius: '100%', indexAxis: 'r' }, uo.overrides = { aspectRatio: 1, plugins: { legend: { labels: { generateLabels (t) { const e = t.data; return e.labels.length && e.datasets.length ? e.labels.map((e, i) => { const n = t.getDatasetMeta(0).controller.getStyle(i); return { text: e, fillStyle: n.backgroundColor, strokeStyle: n.borderColor, lineWidth: n.borderWidth, hidden: !t.getDataVisibility(i), index: i } }) : [] } }, onClick (t, e, i) { i.chart.toggleDataVisibility(e.index), i.chart.update() } }, tooltip: { callbacks: { title: () => '', label (t) { let e = t.label; const i = ': ' + t.formattedValue; return Y(e) ? (e = e.slice(), e[0] += i) : e += i, e } } } } }; class fo extends Li {initialize () { this.enableOptionSharing = !0, super.initialize() }update (t) { const e = this; const i = e._cachedMeta; const { dataset: n, data: o = [], _dataset: s } = i; const a = e.chart._animationsDisabled; let { start: r, count: l } = (function (t, e, i) { const n = e.length; let o = 0; let s = n; if (t._sorted) { const { iScale: a, _parsed: r } = t; const l = a.axis; const { min: c, max: h, minDefined: d, maxDefined: u } = a.getUserBounds(); d && (o = Nt(Math.min(oe(r, a.axis, c).lo, i ? n : oe(e, l, a.getPixelForValue(c)).lo), 0, n - 1)), s = u ? Nt(Math.max(oe(r, a.axis, h).hi + 1, i ? 0 : oe(e, l, a.getPixelForValue(h)).hi + 1), o, n) - o : n - o } return { start: o, count: s } }(i, o, a)); e._drawStart = r, e._drawCount = l, (function (t) { const { xScale: e, yScale: i, _scaleRanges: n } = t; const o = { xmin: e.min, xmax: e.max, ymin: i.min, ymax: i.max }; if (!n) { return t._scaleRanges = o, !0 } const s = n.xmin !== e.min || n.xmax !== e.max || n.ymin !== i.min || n.ymax !== i.max; return Object.assign(n, o), s }(i)) && (r = 0, l = o.length), n._decimated = !!s._decimated, n.points = o; const c = e.resolveDatasetElementOptions(t); e.options.showLine || (c.borderWidth = 0), c.segment = e.options.segment, e.updateElement(n, void 0, { animated: !a, options: c }, t), e.updateElements(o, r, l, t) }updateElements (t, e, i, n) { const o = this; const s = n === 'reset'; const { xScale: a, yScale: r, _stacked: l } = o._cachedMeta; const c = o.resolveDataElementOptions(e, n); const h = o.getSharedOptions(c); const d = o.includeOptions(n, h); const u = o.options.spanGaps; const f = At(u) ? u : Number.POSITIVE_INFINITY; const g = o.chart._animationsDisabled || s || n === 'none'; let p = e > 0 && o.getParsed(e - 1); for (let c = e; c < e + i; ++c) { const e = t[c]; const i = o.getParsed(c); const u = g ? e : {}; const m = $(i.y); const x = u.x = a.getPixelForValue(i.x, c); const b = u.y = s || m ? r.getBasePixel() : r.getPixelForValue(l ? o.applyStack(r, i, l) : i.y, c); u.skip = isNaN(x) || isNaN(b) || m, u.stop = c > 0 && i.x - p.x > f, u.parsed = i, d && (u.options = h || o.resolveDataElementOptions(c, n)), g || o.updateElement(e, c, u, n), p = i }o.updateSharedOptions(h, n, c) }getMaxOverflow () { const t = this; const e = t._cachedMeta; const i = e.dataset; const n = i.options && i.options.borderWidth || 0; const o = e.data || []; if (!o.length) { return n } const s = o[0].size(t.resolveDataElementOptions(0)); const a = o[o.length - 1].size(t.resolveDataElementOptions(o.length - 1)); return Math.max(n, s, a) / 2 }draw () { this._cachedMeta.dataset.updateControlPoints(this.chart.chartArea), super.draw() }}fo.id = 'line', fo.defaults = { datasetElementType: 'line', dataElementType: 'point', showLine: !0, spanGaps: !1 }, fo.overrides = { scales: { _index_: { type: 'category' }, _value_: { type: 'linear' } } }; class go extends Li {constructor (t, e) { super(t, e), this.innerRadius = void 0, this.outerRadius = void 0 }update (t) { const e = this._cachedMeta.data; this._updateRadius(), this.updateElements(e, 0, e.length, t) }_updateRadius () { const t = this; const e = t.chart; const i = e.chartArea; const n = e.options; const o = Math.min(i.right - i.left, i.bottom - i.top); const s = Math.max(o / 2, 0); const a = (s - Math.max(n.cutoutPercentage ? s / 100 * n.cutoutPercentage : 1, 0)) / e.getVisibleDatasetCount(); t.outerRadius = s - a * t.index, t.innerRadius = t.outerRadius - a }updateElements (t, e, i, n) { const o = this; const s = n === 'reset'; const a = o.chart; const r = o.getDataset(); const l = a.options.animation; const c = o._cachedMeta.rScale; const h = c.xCenter; const d = c.yCenter; const u = c.getIndexAngle(0) - 0.5 * bt; let f; let g = u; const p = 360 / o.countVisibleElements(); for (f = 0; f < e; ++f) { g += o._computeAngle(f, n, p) } for (f = e; f < e + i; f++) { const e = t[f]; let i = g; let m = g + o._computeAngle(f, n, p); let x = a.getDataVisibility(f) ? c.getDistanceFromCenterForValue(r.data[f]) : 0; g = m, s && (l.animateScale && (x = 0), l.animateRotate && (i = m = u)); const b = { x: h, y: d, innerRadius: 0, outerRadius: x, startAngle: i, endAngle: m, options: o.resolveDataElementOptions(f, n) }; o.updateElement(e, f, b, n) } }countVisibleElements () { const t = this.getDataset(); const e = this._cachedMeta; let i = 0; return e.data.forEach((e, n) => { !isNaN(t.data[n]) && this.chart.getDataVisibility(n) && i++ }), i }_computeAngle (t, e, i) { return this.chart.getDataVisibility(t) ? Et(this.resolveDataElementOptions(t, e).angle || i) : 0 }}go.id = 'polarArea', go.defaults = { dataElementType: 'arc', animation: { animateRotate: !0, animateScale: !0 }, animations: { numbers: { type: 'number', properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'] } }, indexAxis: 'r', startAngle: 0 }, go.overrides = { aspectRatio: 1, plugins: { legend: { labels: { generateLabels (t) { const e = t.data; return e.labels.length && e.datasets.length ? e.labels.map((e, i) => { const n = t.getDatasetMeta(0).controller.getStyle(i); return { text: e, fillStyle: n.backgroundColor, strokeStyle: n.borderColor, lineWidth: n.borderWidth, hidden: !t.getDataVisibility(i), index: i } }) : [] } }, onClick (t, e, i) { i.chart.toggleDataVisibility(e.index), i.chart.update() } }, tooltip: { callbacks: { title: () => '', label: t => t.chart.data.labels[t.dataIndex] + ': ' + t.formattedValue } } }, scales: { r: { type: 'radialLinear', angleLines: { display: !1 }, beginAtZero: !0, grid: { circular: !0 }, pointLabels: { display: !1 }, startAngle: 0 } } }; class po extends uo {}po.id = 'pie', po.defaults = { cutout: 0, rotation: 0, circumference: 360, radius: '100%' }; class mo extends Li {getLabelAndValue (t) { const e = this._cachedMeta.vScale; const i = this.getParsed(t); return { label: e.getLabels()[t], value: '' + e.getLabelForValue(i[e.axis]) } }update (t) { const e = this; const i = e._cachedMeta; const n = i.dataset; const o = i.data || []; const s = i.iScale.getLabels(); if (n.points = o, t !== 'resize') { const i = e.resolveDatasetElementOptions(t); e.options.showLine || (i.borderWidth = 0); const a = { _loop: !0, _fullLoop: s.length === o.length, options: i }; e.updateElement(n, void 0, a, t) }e.updateElements(o, 0, o.length, t) }updateElements (t, e, i, n) { const o = this; const s = o.getDataset(); const a = o._cachedMeta.rScale; const r = n === 'reset'; for (let l = e; l < e + i; l++) { const e = t[l]; const i = o.resolveDataElementOptions(l, n); const c = a.getPointPositionForValue(l, s.data[l]); const h = r ? a.xCenter : c.x; const d = r ? a.yCenter : c.y; const u = { x: h, y: d, angle: c.angle, skip: isNaN(h) || isNaN(d), options: i }; o.updateElement(e, l, u, n) } }}mo.id = 'radar', mo.defaults = { datasetElementType: 'line', dataElementType: 'point', indexAxis: 'r', showLine: !0, elements: { line: { fill: 'start' } } }, mo.overrides = { aspectRatio: 1, scales: { r: { type: 'radialLinear' } } }; class xo extends fo {}xo.id = 'scatter', xo.defaults = { showLine: !1, fill: !1 }, xo.overrides = { interaction: { mode: 'point' }, plugins: { tooltip: { callbacks: { title: () => '', label: t => '(' + t.label + ', ' + t.formattedValue + ')' } } }, scales: { x: { type: 'linear' }, y: { type: 'linear' } } }; const bo = Object.freeze({ __proto__: null, BarController: co, BubbleController: ho, DoughnutController: uo, LineController: fo, PolarAreaController: go, PieController: po, RadarController: mo, ScatterController: xo }); function _o (t, e) { const { startAngle: i, endAngle: n, pixelMargin: o, x: s, y: a, outerRadius: r, innerRadius: l } = e; let c = o / r; t.beginPath(), t.arc(s, a, r, i - c, n + c), l > o ? (c = o / l, t.arc(s, a, l, n + c, i - c, !0)) : t.arc(s, a, o, n + Mt, i - Mt), t.closePath(), t.clip() } function yo (t, e, i, n) { const o = Le(t.options.borderRadius, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']); const s = (i - e) / 2; const a = Math.min(s, n * e / 2); const r = t => { const e = (i - Math.min(s, t)) * n / 2; return Nt(t, 0, Math.min(s, e)) }; return { outerStart: r(o.outerStart), outerEnd: r(o.outerEnd), innerStart: Nt(o.innerStart, 0, a), innerEnd: Nt(o.innerEnd, 0, a) } } function vo (t, e, i, n) { return { x: i + t * Math.cos(e), y: n + t * Math.sin(e) } } function wo (t, e) { const { x: i, y: n, startAngle: o, endAngle: s, pixelMargin: a } = e; const r = Math.max(e.outerRadius - a, 0); const l = e.innerRadius + a; const { outerStart: c, outerEnd: h, innerStart: d, innerEnd: u } = yo(e, l, r, s - o); const f = r - c; const g = r - h; const p = o + c / f; const m = s - h / g; const x = l + d; const b = l + u; const _ = o + d / x; const y = s - u / b; if (t.beginPath(), t.arc(i, n, r, p, m), h > 0) { const e = vo(g, m, i, n); t.arc(e.x, e.y, h, m, s + Mt) } const v = vo(b, s, i, n); if (t.lineTo(v.x, v.y), u > 0) { const e = vo(b, y, i, n); t.arc(e.x, e.y, u, s + Mt, y + Math.PI) } if (t.arc(i, n, l, s - u / l, o + d / l, !0), d > 0) { const e = vo(x, _, i, n); t.arc(e.x, e.y, d, _ + Math.PI, o - Mt) } const w = vo(f, o, i, n); if (t.lineTo(w.x, w.y), c > 0) { const e = vo(f, p, i, n); t.arc(e.x, e.y, c, o - Mt, p) }t.closePath() } function Mo (t, e) { const { options: i } = e; const n = i.borderAlign === 'inner'; i.borderWidth && (n ? (t.lineWidth = 2 * i.borderWidth, t.lineJoin = 'round') : (t.lineWidth = i.borderWidth, t.lineJoin = 'bevel'), e.fullCircles && (function (t, e, i) { const { x: n, y: o, startAngle: s, endAngle: a, pixelMargin: r } = e; const l = Math.max(e.outerRadius - r, 0); const c = e.innerRadius + r; let h; for (i && (e.endAngle = e.startAngle + _t, _o(t, e), e.endAngle = a, e.endAngle === e.startAngle && (e.endAngle += _t, e.fullCircles--)), t.beginPath(), t.arc(n, o, c, s + _t, s, !0), h = 0; h < e.fullCircles; ++h) { t.stroke() } for (t.beginPath(), t.arc(n, o, l, s, s + _t), h = 0; h < e.fullCircles; ++h) { t.stroke() } }(t, e, n)), n && _o(t, e), wo(t, e), t.stroke()) } class ko extends Ei {constructor (t) { super(), this.options = void 0, this.circumference = void 0, this.startAngle = void 0, this.endAngle = void 0, this.innerRadius = void 0, this.outerRadius = void 0, this.pixelMargin = 0, this.fullCircles = 0, t && Object.assign(this, t) }inRange (t, e, i) { const n = this.getProps(['x', 'y'], i); const { angle: o, distance: s } = Ft(n, { x: t, y: e }); const { startAngle: a, endAngle: r, innerRadius: l, outerRadius: c, circumference: h } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], i); return (h >= _t || Ht(o, a, r)) && (s >= l && s <= c) }getCenterPoint (t) { const { x: e, y: i, startAngle: n, endAngle: o, innerRadius: s, outerRadius: a } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], t); const r = (n + o) / 2; const l = (s + a) / 2; return { x: e + Math.cos(r) * l, y: i + Math.sin(r) * l } }tooltipPosition (t) { return this.getCenterPoint(t) }draw (t) { const e = this; const i = e.options; const n = i.offset || 0; if (e.pixelMargin = i.borderAlign === 'inner' ? 0.33 : 0, e.fullCircles = Math.floor(e.circumference / _t), !(e.circumference === 0 || e.innerRadius < 0 || e.outerRadius < 0)) { if (t.save(), n && e.circumference < _t) { const i = (e.startAngle + e.endAngle) / 2; t.translate(Math.cos(i) * n, Math.sin(i) * n) }t.fillStyle = i.backgroundColor, t.strokeStyle = i.borderColor, (function (t, e) { if (e.fullCircles) { e.endAngle = e.startAngle + _t, wo(t, e); for (let i = 0; i < e.fullCircles; ++i) { t.fill() } }isNaN(e.circumference) || (e.endAngle = e.startAngle + e.circumference % _t), wo(t, e), t.fill() }(t, e)), Mo(t, e), t.restore() } }} function So (t, e, i = e) { t.lineCap = K(i.borderCapStyle, e.borderCapStyle), t.setLineDash(K(i.borderDash, e.borderDash)), t.lineDashOffset = K(i.borderDashOffset, e.borderDashOffset), t.lineJoin = K(i.borderJoinStyle, e.borderJoinStyle), t.lineWidth = K(i.borderWidth, e.borderWidth), t.strokeStyle = K(i.borderColor, e.borderColor) } function Po (t, e, i) { t.lineTo(i.x, i.y) } function Do (t, e, i = {}) { const n = t.length; const { start: o = 0, end: s = n - 1 } = i; const { start: a, end: r } = e; const l = Math.max(o, a); const c = Math.min(s, r); const h = o < a && s < a || o > r && s > r; return { count: n, start: l, loop: e.loop, ilen: c < l && !h ? n + c - l : c - l } } function Co (t, e, i, n) { const { points: o, options: s } = e; const { count: a, start: r, loop: l, ilen: c } = Do(o, i, n); const h = (function (t) { return t.stepped ? Jt : t.tension || t.cubicInterpolationMode === 'monotone' ? te : Po }(s)); let d; let u; let f; let { move: g = !0, reverse: p } = n || {}; for (d = 0; d <= c; ++d) { u = o[(r + (p ? c - d : d)) % a], u.skip || (g ? (t.moveTo(u.x, u.y), g = !1) : h(t, f, u, p, s.stepped), f = u) } return l && (u = o[(r + (p ? c : 0)) % a], h(t, f, u, p, s.stepped)), !!l } function Oo (t, e, i, n) { const o = e.points; const { count: s, start: a, ilen: r } = Do(o, i, n); const { move: l = !0, reverse: c } = n || {}; let h; let d; let u; let f; let g; let p; let m = 0; let x = 0; const b = t => (a + (c ? r - t : t)) % s; const _ = () => { f !== g && (t.lineTo(m, g), t.lineTo(m, f), t.lineTo(m, p)) }; for (l && (d = o[b(0)], t.moveTo(d.x, d.y)), h = 0; h <= r; ++h) { if (d = o[b(h)], d.skip) { continue } const e = d.x; const i = d.y; const n = 0 | e; n === u ? (i < f ? f = i : i > g && (g = i), m = (x * m + e) / ++x) : (_(), t.lineTo(e, i), u = n, x = 0, f = g = i), p = i }_() } function Ao (t) { const e = t.options; const i = e.borderDash && e.borderDash.length; return !(t._decimated || t._loop || e.tension || e.cubicInterpolationMode === 'monotone' || e.stepped || i) ? Oo : Co }ko.id = 'arc', ko.defaults = { borderAlign: 'center', borderColor: '#fff', borderRadius: 0, borderWidth: 2, offset: 0, angle: void 0 }, ko.defaultRoutes = { backgroundColor: 'backgroundColor' }; const To = typeof Path2D === 'function'; function Ro (t, e, i, n) { To && e.segments.length === 1 ? (function (t, e, i, n) { let o = e._path; o || (o = e._path = new Path2D(), e.path(o, i, n) && o.closePath()), So(t, e.options), t.stroke(o) }(t, e, i, n)) : (function (t, e, i, n) { const { segments: o, options: s } = e; const a = Ao(e); for (const r of o) { So(t, s, r.style), t.beginPath(), a(t, e, r, { start: i, end: i + n - 1 }) && t.closePath(), t.stroke() } }(t, e, i, n)) } class Lo extends Ei {constructor (t) { super(), this.animated = !0, this.options = void 0, this._loop = void 0, this._fullLoop = void 0, this._path = void 0, this._points = void 0, this._segments = void 0, this._decimated = !1, this._pointsUpdated = !1, t && Object.assign(this, t) }updateControlPoints (t) { const e = this; const i = e.options; if ((i.tension || i.cubicInterpolationMode === 'monotone') && !i.stepped && !e._pointsUpdated) { const n = i.spanGaps ? e._loop : e._fullLoop; fn(e._points, i, t, n), e._pointsUpdated = !0 } } set points (t) { const e = this; e._points = t, delete e._segments, delete e._path, e._pointsUpdated = !1 } get points () { return this._points } get segments () { return this._segments || (this._segments = kn(this, this.options.segment)) }first () { const t = this.segments; const e = this.points; return t.length && e[t[0].start] }last () { const t = this.segments; const e = this.points; const i = t.length; return i && e[t[i - 1].end] }interpolate (t, e) { const i = this; const n = i.options; const o = t[e]; const s = i.points; const a = Mn(i, { property: e, start: o, end: o }); if (!a.length) { return } const r = []; const l = (function (t) { return t.stepped ? pn : t.tension || t.cubicInterpolationMode === 'monotone' ? mn : gn }(n)); let c, h; for (c = 0, h = a.length; c < h; ++c) { const { start: i, end: h } = a[c]; const d = s[i]; const u = s[h]; if (d === u) { r.push(d); continue } const f = l(d, u, Math.abs((o - d[e]) / (u[e] - d[e])), n.stepped); f[e] = t[e], r.push(f) } return r.length === 1 ? r[0] : r }pathSegment (t, e, i) { return Ao(this)(t, this, e, i) }path (t, e, i) { const n = this; const o = n.segments; const s = Ao(n); let a = n._loop; e = e || 0, i = i || n.points.length - e; for (const r of o) { a &= s(t, n, r, { start: e, end: e + i - 1 }) } return !!a }draw (t, e, i, n) { const o = this; const s = o.options || {}; (o.points || []).length && s.borderWidth && (t.save(), Ro(t, o, i, n), t.restore(), o.animated && (o._pointsUpdated = !1, o._path = void 0)) }} function Eo (t, e, i, n) { const o = t.options; const { [i]: s } = t.getProps([i], n); return Math.abs(e - s) < o.radius + o.hitRadius }Lo.id = 'line', Lo.defaults = { borderCapStyle: 'butt', borderDash: [], borderDashOffset: 0, borderJoinStyle: 'miter', borderWidth: 3, capBezierPoints: !0, cubicInterpolationMode: 'default', fill: !1, spanGaps: !1, stepped: !1, tension: 0 }, Lo.defaultRoutes = { backgroundColor: 'backgroundColor', borderColor: 'borderColor' }, Lo.descriptors = { _scriptable: !0, _indexable: t => t !== 'borderDash' && t !== 'fill' }; class Io extends Ei {constructor (t) { super(), this.options = void 0, this.parsed = void 0, this.skip = void 0, this.stop = void 0, t && Object.assign(this, t) }inRange (t, e, i) { const n = this.options; const { x: o, y: s } = this.getProps(['x', 'y'], i); return Math.pow(t - o, 2) + Math.pow(e - s, 2) < Math.pow(n.hitRadius + n.radius, 2) }inXRange (t, e) { return Eo(this, t, 'x', e) }inYRange (t, e) { return Eo(this, t, 'y', e) }getCenterPoint (t) { const { x: e, y: i } = this.getProps(['x', 'y'], t); return { x: e, y: i } }size (t) { let e = (t = t || this.options || {}).radius || 0; e = Math.max(e, e && t.hoverRadius || 0); return 2 * (e + (e && t.borderWidth || 0)) }draw (t) { const e = this; const i = e.options; e.skip || i.radius < 0.1 || (t.strokeStyle = i.borderColor, t.lineWidth = i.borderWidth, t.fillStyle = i.backgroundColor, Kt(t, i, e.x, e.y)) }getRange () { const t = this.options || {}; return t.radius + t.hitRadius }} function zo (t, e) { const { x: i, y: n, base: o, width: s, height: a } = t.getProps(['x', 'y', 'base', 'width', 'height'], e); let r, l, c, h, d; return t.horizontal ? (d = a / 2, r = Math.min(i, o), l = Math.max(i, o), c = n - d, h = n + d) : (d = s / 2, r = i - d, l = i + d, c = Math.min(n, o), h = Math.max(n, o)), { left: r, top: c, right: l, bottom: h } } function Fo (t) { let e = t.options.borderSkipped; const i = {}; return e ? (e = t.horizontal ? Vo(e, 'left', 'right', t.base > t.x) : Vo(e, 'bottom', 'top', t.base < t.y), i[e] = !0, i) : i } function Vo (t, e, i, n) { let o, s, a; return n ? (a = i, t = Bo(t = (o = t) === (s = e) ? a : o === a ? s : o, i, e)) : t = Bo(t, e, i), t } function Bo (t, e, i) { return t === 'start' ? e : t === 'end' ? i : t } function Wo (t, e, i, n) { return t ? 0 : Math.max(Math.min(e, n), i) } function Ho (t) { const e = zo(t); const i = e.right - e.left; const n = e.bottom - e.top; const o = (function (t, e, i) { const n = t.options.borderWidth; const o = Fo(t); const s = Ee(n); return { t: Wo(o.top, s.top, 0, i), r: Wo(o.right, s.right, 0, e), b: Wo(o.bottom, s.bottom, 0, i), l: Wo(o.left, s.left, 0, e) } }(t, i / 2, n / 2)); const s = (function (t, e, i) { const { enableBorderRadius: n } = t.getProps(['enableBorderRadius']); const o = t.options.borderRadius; const s = Ie(o); const a = Math.min(e, i); const r = Fo(t); const l = n || U(o); return { topLeft: Wo(!l || r.top || r.left, s.topLeft, 0, a), topRight: Wo(!l || r.top || r.right, s.topRight, 0, a), bottomLeft: Wo(!l || r.bottom || r.left, s.bottomLeft, 0, a), bottomRight: Wo(!l || r.bottom || r.right, s.bottomRight, 0, a) } }(t, i / 2, n / 2)); return { outer: { x: e.left, y: e.top, w: i, h: n, radius: s }, inner: { x: e.left + o.l, y: e.top + o.t, w: i - o.l - o.r, h: n - o.t - o.b, radius: { topLeft: Math.max(0, s.topLeft - Math.max(o.t, o.l)), topRight: Math.max(0, s.topRight - Math.max(o.t, o.r)), bottomLeft: Math.max(0, s.bottomLeft - Math.max(o.b, o.l)), bottomRight: Math.max(0, s.bottomRight - Math.max(o.b, o.r)) } } } } function No (t, e, i, n) { const o = e === null; const s = i === null; const a = t && !(o && s) && zo(t, n); return a && (o || e >= a.left && e <= a.right) && (s || i >= a.top && i <= a.bottom) } function jo (t, e) { t.rect(e.x, e.y, e.w, e.h) }Io.id = 'point', Io.defaults = { borderWidth: 1, hitRadius: 1, hoverBorderWidth: 1, hoverRadius: 4, pointStyle: 'circle', radius: 3, rotation: 0 }, Io.defaultRoutes = { backgroundColor: 'backgroundColor', borderColor: 'borderColor' }; class $o extends Ei {constructor (t) { super(), this.options = void 0, this.horizontal = void 0, this.base = void 0, this.width = void 0, this.height = void 0, t && Object.assign(this, t) }draw (t) { const e = this.options; const { inner: i, outer: n } = Ho(this); const o = (s = n.radius).topLeft || s.topRight || s.bottomLeft || s.bottomRight ? ie : jo; let s; t.save(), n.w === i.w && n.h === i.h || (t.beginPath(), o(t, n), t.clip(), o(t, i), t.fillStyle = e.borderColor, t.fill('evenodd')), t.beginPath(), o(t, i), t.fillStyle = e.backgroundColor, t.fill(), t.restore() }inRange (t, e, i) { return No(this, t, e, i) }inXRange (t, e) { return No(this, t, null, e) }inYRange (t, e) { return No(this, null, t, e) }getCenterPoint (t) { const { x: e, y: i, base: n, horizontal: o } = this.getProps(['x', 'y', 'base', 'horizontal'], t); return { x: o ? (e + n) / 2 : e, y: o ? i : (i + n) / 2 } }getRange (t) { return t === 'x' ? this.width / 2 : this.height / 2 }}$o.id = 'bar', $o.defaults = { borderSkipped: 'start', borderWidth: 0, borderRadius: 0, enableBorderRadius: !0, pointStyle: void 0 }, $o.defaultRoutes = { backgroundColor: 'backgroundColor', borderColor: 'borderColor' }; const Yo = Object.freeze({ __proto__: null, ArcElement: ko, LineElement: Lo, PointElement: Io, BarElement: $o }); function Uo (t) { if (t._decimated) { const e = t._data; delete t._decimated, delete t._data, Object.defineProperty(t, 'data', { value: e }) } } function Xo (t) { t.data.datasets.forEach(t => { Uo(t) }) } const qo = { id: 'decimation', defaults: { algorithm: 'min-max', enabled: !1 }, beforeElementsUpdate: (t, e, i) => { if (!i.enabled) { return void Xo(t) } const n = t.width; t.data.datasets.forEach((e, o) => { const { _data: s, indexAxis: a } = e; const r = t.getDatasetMeta(o); const l = s || e.data; if (Ve([a, t.options.indexAxis]) === 'y') { return } if (r.type !== 'line') { return } const c = t.scales[r.xAxisID]; if (c.type !== 'linear' && c.type !== 'time') { return } if (t.options.parsing) { return } let h; const { start: d, count: u } = (function (t, e) { const i = e.length; let n; let o = 0; const { iScale: s } = t; const { min: a, max: r, minDefined: l, maxDefined: c } = s.getUserBounds(); return l && (o = Nt(oe(e, s.axis, a).lo, 0, i - 1)), n = c ? Nt(oe(e, s.axis, r).hi + 1, o, i) - o : i - o, { start: o, count: n } }(r, l)); if (u <= 4 * n) { Uo(e) } else { switch ($(s) && (e._data = l, delete e.data, Object.defineProperty(e, 'data', { configurable: !0, enumerable: !0, get: function () { return this._decimated }, set: function (t) { this._data = t } })), i.algorithm) { case 'lttb':h = (function (t, e, i, n, o) { const s = o.samples || n; if (s >= i) { return t.slice(e, e + i) } const a = []; const r = (i - 2) / (s - 2); let l = 0; const c = e + i - 1; let h; let d; let u; let f; let g; let p = e; for (a[l++] = t[p], h = 0; h < s - 2; h++) { let n; let o = 0; let s = 0; const c = Math.floor((h + 1) * r) + 1 + e; const m = Math.min(Math.floor((h + 2) * r) + 1, i) + e; const x = m - c; for (n = c; n < m; n++) { o += t[n].x, s += t[n].y }o /= x, s /= x; const b = Math.floor(h * r) + 1 + e; const _ = Math.floor((h + 1) * r) + 1 + e; const { x: y, y: v } = t[p]; for (u = f = -1, n = b; n < _; n++) { f = 0.5 * Math.abs((y - o) * (t[n].y - v) - (y - t[n].x) * (s - v)), f > u && (u = f, d = t[n], g = n) }a[l++] = d, p = g } return a[l++] = t[c], a }(l, d, u, n, i)); break; case 'min-max':h = (function (t, e, i, n) { let o; let s; let a; let r; let l; let c; let h; let d; let u; let f; let g = 0; let p = 0; const m = []; const x = e + i - 1; const b = t[e].x; const _ = t[x].x - b; for (o = e; o < e + i; ++o) { s = t[o], a = (s.x - b) / _ * n, r = s.y; const e = 0 | a; if (e === l) { r < u ? (u = r, c = o) : r > f && (f = r, h = o), g = (p * g + s.x) / ++p } else { const i = o - 1; if (!$(c) && !$(h)) { const e = Math.min(c, h); const n = Math.max(c, h); e !== d && e !== i && m.push({ ...t[e], x: g }), n !== d && n !== i && m.push({ ...t[n], x: g }) }o > 0 && i !== d && m.push(t[i]), m.push(s), l = e, p = 0, u = f = r, c = h = d = o } } return m }(l, d, u, n)); break; default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`) }e._decimated = h } }) }, destroy (t) { Xo(t) } }; function Ko (t, e, i) { const n = (function (t) { const e = t.options; const i = e.fill; let n = K(i && i.target, i); return void 0 === n && (n = !!e.backgroundColor), !1 !== n && n !== null && (!0 === n ? 'origin' : n) }(t)); if (U(n)) { return !isNaN(n.value) && n } let o = parseFloat(n); return X(o) && Math.floor(o) === o ? (n[0] !== '-' && n[0] !== '+' || (o = e + o), !(o === e || o < 0 || o >= i) && o) : ['origin', 'start', 'end', 'stack'].indexOf(n) >= 0 && n } class Go {constructor (t) { this.x = t.x, this.y = t.y, this.radius = t.radius }pathSegment (t, e, i) { const { x: n, y: o, radius: s } = this; return e = e || { start: 0, end: _t }, t.arc(n, o, s, e.end, e.start, !0), !i.bounds }interpolate (t) { const { x: e, y: i, radius: n } = this; const o = t.angle; return { x: e + Math.cos(o) * n, y: i + Math.sin(o) * n, angle: o } }} function Zo (t) { return (t.scale || {}).getPointPositionForValue ? (function (t) { const { scale: e, fill: i } = t; const n = e.options; const o = e.getLabels().length; const s = []; const a = n.reverse ? e.max : e.min; const r = n.reverse ? e.min : e.max; let l, c, h; if (h = i === 'start' ? a : i === 'end' ? r : U(i) ? i.value : e.getBaseValue(), n.grid.circular) { return c = e.getPointPositionForValue(0, a), new Go({ x: c.x, y: c.y, radius: e.getDistanceFromCenterForValue(h) }) } for (l = 0; l < o; ++l) { s.push(e.getPointPositionForValue(l, h)) } return s }(t)) : (function (t) { const { scale: e = {}, fill: i } = t; let n; let o = null; return i === 'start' ? o = e.bottom : i === 'end' ? o = e.top : U(i) ? o = e.getPixelForValue(i.value) : e.getBasePixel && (o = e.getBasePixel()), X(o) ? (n = e.isHorizontal(), { x: n ? o : null, y: n ? null : o }) : null }(t)) } function Qo (t) { const { chart: e, scale: i, index: n, line: o } = t; const s = []; const a = o.segments; const r = o.points; const l = (function (t, e) { const i = []; const n = t.getSortedVisibleDatasetMetas(); for (let t = 0; t < n.length; t++) { const o = n[t]; if (o.index === e) { break } Jo(o) && i.unshift(o.dataset) } return i }(e, n)); l.push(is({ x: null, y: i.bottom }, o)); for (let t = 0; t < a.length; t++) { const e = a[t]; for (let t = e.start; t <= e.end; t++) { ts(s, r[t], l) } } return new Lo({ points: s, options: {} }) } const Jo = t => t.type === 'line' && !t.hidden; function ts (t, e, i) { const n = []; for (let o = 0; o < i.length; o++) { const s = i[o]; const { first: a, last: r, point: l } = es(s, e, 'x'); if (!(!l || a && r)) { if (a) { n.unshift(l) } else if (t.push(l), !r) { break } } }t.push(...n) } function es (t, e, i) { const n = t.interpolate(e, i); if (!n) { return {} } const o = n[i]; const s = t.segments; const a = t.points; let r = !1; let l = !1; for (let t = 0; t < s.length; t++) { const e = s[t]; const n = a[e.start][i]; const c = a[e.end][i]; if (o >= n && o <= c) { r = o === n, l = o === c; break } } return { first: r, last: l, point: n } } function is (t, e) { let i = []; let n = !1; return Y(t) ? (n = !0, i = t) : i = (function (t, e) { const { x: i = null, y: n = null } = t || {}; const o = e.points; const s = []; return e.segments.forEach(t => { const e = o[t.start]; const a = o[t.end]; n !== null ? (s.push({ x: e.x, y: n }), s.push({ x: a.x, y: n })) : i !== null && (s.push({ x: i, y: e.y }), s.push({ x: i, y: a.y })) }), s }(t, e)), i.length ? new Lo({ points: i, options: { tension: 0 }, _loop: n, _fullLoop: n }) : null } function ns (t, e, i) { let n = t[e].fill; const o = [e]; let s; if (!i) { return n } for (;!1 !== n && o.indexOf(n) === -1;) { if (!X(n)) { return n } if (s = t[n], !s) { return !1 } if (s.visible) { return n } o.push(n), n = s.fill } return !1 } function os (t, e, i) { t.beginPath(), e.path(t), t.lineTo(e.last().x, i), t.lineTo(e.first().x, i), t.closePath(), t.clip() } function ss (t, e, i, n) { if (n) { return } let o = e[t]; let s = i[t]; return t === 'angle' && (o = Wt(o), s = Wt(s)), { property: t, start: o, end: s } } function as (t, e, i, n) { return t && e ? n(t[i], e[i]) : t ? t[i] : e ? e[i] : 0 } function rs (t, e, i) { const { top: n, bottom: o } = e.chart.chartArea; const { property: s, start: a, end: r } = i || {}; s === 'x' && (t.beginPath(), t.rect(a, n, r - a, o - n), t.clip()) } function ls (t, e, i, n) { const o = e.interpolate(i, n); o && t.lineTo(o.x, o.y) } function cs (t, e) { const { line: i, target: n, property: o, color: s, scale: a } = e; const r = (function (t, e, i) { const n = t.segments; const o = t.points; const s = e.points; const a = []; for (const t of n) { const n = ss(i, o[t.start], o[t.end], t.loop); if (!e.segments) { a.push({ source: t, target: n, start: o[t.start], end: o[t.end] }); continue } const r = Mn(e, n); for (const e of r) { const r = ss(i, s[e.start], s[e.end], e.loop); const l = wn(t, o, r); for (const t of l) { a.push({ source: t, target: e, start: { [i]: as(n, r, 'start', Math.max) }, end: { [i]: as(n, r, 'end', Math.min) } }) } } } return a }(i, n, o)); for (const { source: e, target: l, start: c, end: h } of r) { const { style: { backgroundColor: r = s } = {} } = e; t.save(), t.fillStyle = r, rs(t, a, ss(o, c, h)), t.beginPath(); const d = !!i.pathSegment(t, e); d ? t.closePath() : ls(t, n, h, o); const u = !!n.pathSegment(t, l, { move: d, reverse: !0 }); const f = d && u; f || ls(t, n, c, o), t.closePath(), t.fill(f ? 'evenodd' : 'nonzero'), t.restore() } } function hs (t, e, i) { const n = (function (t) { const { chart: e, fill: i, line: n } = t; if (X(i)) { return (function (t, e) { const i = t.getDatasetMeta(e); return i && t.isDatasetVisible(e) ? i.dataset : null }(e, i)) } if (i === 'stack') { return Qo(t) } const o = Zo(t); return o instanceof Go ? o : is(o, n) }(e)); const { line: o, scale: s, axis: a } = e; const r = o.options; const l = r.fill; const c = r.backgroundColor; const { above: h = c, below: d = c } = l || {}; n && o.points.length && (Zt(t, i), (function (t, e) { const { line: i, target: n, above: o, below: s, area: a, scale: r } = e; const l = i._loop ? 'angle' : e.axis; t.save(), l === 'x' && s !== o && (os(t, n, a.top), cs(t, { line: i, target: n, color: o, scale: r, property: l }), t.restore(), t.save(), os(t, n, a.bottom)), cs(t, { line: i, target: n, color: s, scale: r, property: l }), t.restore() }(t, { line: o, target: n, above: h, below: d, area: i, scale: s, axis: a })), Qt(t)) } const ds = { id: 'filler', afterDatasetsUpdate (t, e, i) { const n = (t.data.datasets || []).length; const o = []; let s, a, r, l; for (a = 0; a < n; ++a) { s = t.getDatasetMeta(a), r = s.dataset, l = null, r && r.options && r instanceof Lo && (l = { visible: t.isDatasetVisible(a), index: a, fill: Ko(r, a, n), chart: t, axis: s.controller.options.indexAxis, scale: s.vScale, line: r }), s.$filler = l, o.push(l) } for (a = 0; a < n; ++a) { l = o[a], l && !1 !== l.fill && (l.fill = ns(o, a, i.propagate)) } }, beforeDraw (t, e, i) { const n = i.drawTime === 'beforeDraw'; const o = t.getSortedVisibleDatasetMetas(); const s = t.chartArea; for (let e = o.length - 1; e >= 0; --e) { const i = o[e].$filler; i && (i.line.updateControlPoints(s), n && hs(t.ctx, i, s)) } }, beforeDatasetsDraw (t, e, i) { if (i.drawTime !== 'beforeDatasetsDraw') { return } const n = t.getSortedVisibleDatasetMetas(); for (let e = n.length - 1; e >= 0; --e) { const i = n[e].$filler; i && hs(t.ctx, i, t.chartArea) } }, beforeDatasetDraw (t, e, i) { const n = e.meta.$filler; n && !1 !== n.fill && i.drawTime === 'beforeDatasetDraw' && hs(t.ctx, n, t.chartArea) }, defaults: { propagate: !0, drawTime: 'beforeDatasetDraw' } }; const us = (t, e) => { let { boxHeight: i = e, boxWidth: n = e } = t; return t.usePointStyle && (i = Math.min(i, e), n = Math.min(n, e)), { boxWidth: n, boxHeight: i, itemHeight: Math.max(e, i) } }; class fs extends Ei {constructor (t) { super(), this._added = !1, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1, this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this.legendItems = void 0, this.columnSizes = void 0, this.lineWidths = void 0, this.maxHeight = void 0, this.maxWidth = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.height = void 0, this.width = void 0, this._margins = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0 }update (t, e, i) { const n = this; n.maxWidth = t, n.maxHeight = e, n._margins = i, n.setDimensions(), n.buildLabels(), n.fit() }setDimensions () { const t = this; t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height) }buildLabels () { const t = this; const e = t.options.labels || {}; let i = Q(e.generateLabels, [t.chart], t) || []; e.filter && (i = i.filter(i => e.filter(i, t.chart.data))), e.sort && (i = i.sort((i, n) => e.sort(i, n, t.chart.data))), t.options.reverse && i.reverse(), t.legendItems = i }fit () { const t = this; const { options: e, ctx: i } = t; if (!e.display) { return void (t.width = t.height = 0) } const n = e.labels; const o = Fe(n.font); const s = o.size; const a = t._computeTitleHeight(); const { boxWidth: r, itemHeight: l } = us(n, s); let c, h; i.font = o.string, t.isHorizontal() ? (c = t.maxWidth, h = t._fitRows(a, s, r, l) + 10) : (h = t.maxHeight, c = t._fitCols(a, s, r, l) + 10), t.width = Math.min(c, e.maxWidth || t.maxWidth), t.height = Math.min(h, e.maxHeight || t.maxHeight) }_fitRows (t, e, i, n) { const o = this; const { ctx: s, maxWidth: a, options: { labels: { padding: r } } } = o; const l = o.legendHitBoxes = []; const c = o.lineWidths = [0]; const h = n + r; let d = t; s.textAlign = 'left', s.textBaseline = 'middle'; let u = -1; let f = -h; return o.legendItems.forEach((t, o) => { const g = i + e / 2 + s.measureText(t.text).width; (o === 0 || c[c.length - 1] + g + 2 * r > a) && (d += h, c[c.length - (o > 0 ? 0 : 1)] = 0, f += h, u++), l[o] = { left: 0, top: f, row: u, width: g, height: n }, c[c.length - 1] += g + r }), d }_fitCols (t, e, i, n) { const o = this; const { ctx: s, maxHeight: a, options: { labels: { padding: r } } } = o; const l = o.legendHitBoxes = []; const c = o.columnSizes = []; const h = a - t; let d = r; let u = 0; let f = 0; let g = 0; let p = 0; let m = 0; return o.legendItems.forEach((t, o) => { const a = i + e / 2 + s.measureText(t.text).width; o > 0 && f + e + 2 * r > h && (d += u + r, c.push({ width: u, height: f }), g += u + r, m++, p = 0, u = f = 0), u = Math.max(u, a), f += e + r, l[o] = { left: g, top: p, col: m, width: a, height: n }, p += n + r }), d += u, c.push({ width: u, height: f }), d }adjustHitBoxes () { const t = this; if (!t.options.display) { return } const e = t._computeTitleHeight(); const { legendHitBoxes: i, options: { align: n, labels: { padding: s } } } = t; if (this.isHorizontal()) { let a = 0; let r = o(n, t.left + s, t.right - t.lineWidths[a]); for (const l of i) { a !== l.row && (a = l.row, r = o(n, t.left + s, t.right - t.lineWidths[a])), l.top += t.top + e + s, l.left = r, r += l.width + s } } else { let a = 0; let r = o(n, t.top + e + s, t.bottom - t.columnSizes[a].height); for (const l of i) { l.col !== a && (a = l.col, r = o(n, t.top + e + s, t.bottom - t.columnSizes[a].height)), l.top = r, l.left += t.left + s, r += l.height + s } } }isHorizontal () { return this.options.position === 'top' || this.options.position === 'bottom' }draw () { const t = this; if (t.options.display) { const e = t.ctx; Zt(e, t), t._draw(), Qt(e) } }_draw () { const t = this; const { options: e, columnSizes: i, lineWidths: n, ctx: a } = t; const { align: r, labels: l } = e; const c = xt.color; const h = xn(e.rtl, t.left, t.width); const d = Fe(l.font); const { color: u, padding: f } = l; const g = d.size; const p = g / 2; let m; t.drawTitle(), a.textAlign = h.textAlign('left'), a.textBaseline = 'middle', a.lineWidth = 0.5, a.font = d.string; const { boxWidth: x, boxHeight: b, itemHeight: _ } = us(l, g); const y = t.isHorizontal(); const v = this._computeTitleHeight(); m = y ? { x: o(r, t.left + f, t.right - n[0]), y: t.top + f + v, line: 0 } : { x: t.left + f, y: o(r, t.top + v + f, t.bottom - i[0].height), line: 0 }, bn(t.ctx, e.textDirection); const w = _ + f; t.legendItems.forEach((e, M) => { a.strokeStyle = e.fontColor || u, a.fillStyle = e.fontColor || u; const k = a.measureText(e.text).width; const S = h.textAlign(e.textAlign || (e.textAlign = l.textAlign)); const P = x + g / 2 + k; let D = m.x; let C = m.y; h.setWidth(t.width), y ? M > 0 && D + P + f > t.right && (C = m.y += w, m.line++, D = m.x = o(r, t.left + f, t.right - n[m.line])) : M > 0 && C + w > t.bottom && (D = m.x = D + i[m.line].width + f, m.line++, C = m.y = o(r, t.top + v + f, t.bottom - i[m.line].height)); !(function (t, e, i) { if (isNaN(x) || x <= 0 || isNaN(b) || b < 0) { return } a.save(); const n = K(i.lineWidth, 1); if (a.fillStyle = K(i.fillStyle, c), a.lineCap = K(i.lineCap, 'butt'), a.lineDashOffset = K(i.lineDashOffset, 0), a.lineJoin = K(i.lineJoin, 'miter'), a.lineWidth = n, a.strokeStyle = K(i.strokeStyle, c), a.setLineDash(K(i.lineDash, [])), l.usePointStyle) { const o = { radius: x * Math.SQRT2 / 2, pointStyle: i.pointStyle, rotation: i.rotation, borderWidth: n }; const s = h.xPlus(t, x / 2); Kt(a, o, s, e + p) } else { const o = e + Math.max((g - b) / 2, 0); const s = h.leftForLtr(t, x); const r = Ie(i.borderRadius); a.beginPath(), Object.values(r).some(t => t !== 0) ? ie(a, { x: s, y: o, w: x, h: b, radius: r }) : a.rect(s, o, x, b), a.fill(), n !== 0 && a.stroke() }a.restore() }(h.x(D), C, e)), D = s(S, D + x + p, t.right), (function (t, e, i) { ee(a, i.text, t, e + _ / 2, d, { strikethrough: i.hidden, textAlign: i.textAlign }) }(h.x(D), C, e)), y ? m.x += P + f : m.y += w }), _n(t.ctx, e.textDirection) }drawTitle () { const t = this; const e = t.options; const i = e.title; const s = Fe(i.font); const a = ze(i.padding); if (!i.display) { return } const r = xn(e.rtl, t.left, t.width); const l = t.ctx; const c = i.position; const h = s.size / 2; const d = a.top + h; let u; let f = t.left; let g = t.width; if (this.isHorizontal()) { g = Math.max(...t.lineWidths), u = t.top + d, f = o(e.align, f, t.right - g) } else { const i = t.columnSizes.reduce((t, e) => Math.max(t, e.height), 0); u = d + o(e.align, t.top, t.bottom - i - e.labels.padding - t._computeTitleHeight()) } const p = o(c, f, f + g); l.textAlign = r.textAlign(n(c)), l.textBaseline = 'middle', l.strokeStyle = i.color, l.fillStyle = i.color, l.font = s.string, ee(l, i.text, p, u, s) }_computeTitleHeight () { const t = this.options.title; const e = Fe(t.font); const i = ze(t.padding); return t.display ? e.lineHeight + i.height : 0 }_getLegendItemAt (t, e) { const i = this; let n, o, s; if (t >= i.left && t <= i.right && e >= i.top && e <= i.bottom) { for (s = i.legendHitBoxes, n = 0; n < s.length; ++n) { if (o = s[n], t >= o.left && t <= o.left + o.width && e >= o.top && e <= o.top + o.height) { return i.legendItems[n] } } } return null }handleEvent (t) { const e = this; const i = e.options; if (!(function (t, e) { if (t === 'mousemove' && (e.onHover || e.onLeave)) { return !0 } if (e.onClick && (t === 'click' || t === 'mouseup')) { return !0 } return !1 }(t.type, i))) { return } const n = e._getLegendItemAt(t.x, t.y); if (t.type === 'mousemove') { const a = e._hoveredItem; const r = (s = n, (o = a) !== null && s !== null && o.datasetIndex === s.datasetIndex && o.index === s.index); a && !r && Q(i.onLeave, [t, a, e], e), e._hoveredItem = n, n && !r && Q(i.onHover, [t, n, e], e) } else { n && Q(i.onClick, [t, n, e], e) } let o, s }} const gs = { id: 'legend', _element: fs, start (t, e, i) { const n = t.legend = new fs({ ctx: t.ctx, options: i, chart: t }); Ge.configure(t, n, i), Ge.addBox(t, n) }, stop (t) { Ge.removeBox(t, t.legend), delete t.legend }, beforeUpdate (t, e, i) { const n = t.legend; Ge.configure(t, n, i), n.options = i }, afterUpdate (t) { const e = t.legend; e.buildLabels(), e.adjustHitBoxes() }, afterEvent (t, e) { e.replay || t.legend.handleEvent(e.event) }, defaults: { display: !0, position: 'top', align: 'center', fullSize: !0, reverse: !1, weight: 1e3, onClick (t, e, i) { const n = e.datasetIndex; const o = i.chart; o.isDatasetVisible(n) ? (o.hide(n), e.hidden = !0) : (o.show(n), e.hidden = !1) }, onHover: null, onLeave: null, labels: { color: t => t.chart.options.color, boxWidth: 40, padding: 10, generateLabels (t) { const e = t.data.datasets; const { labels: { usePointStyle: i, pointStyle: n, textAlign: o, color: s } } = t.legend.options; return t._getSortedDatasetMetas().map(t => { const a = t.controller.getStyle(i ? 0 : void 0); const r = ze(a.borderWidth); return { text: e[t.index].label, fillStyle: a.backgroundColor, fontColor: s, hidden: !t.visible, lineCap: a.borderCapStyle, lineDash: a.borderDash, lineDashOffset: a.borderDashOffset, lineJoin: a.borderJoinStyle, lineWidth: (r.width + r.height) / 4, strokeStyle: a.borderColor, pointStyle: n || a.pointStyle, rotation: a.rotation, textAlign: o || a.textAlign, borderRadius: 0, datasetIndex: t.index } }, this) } }, title: { color: t => t.chart.options.color, display: !1, position: 'center', text: '' } }, descriptors: { _scriptable: t => !t.startsWith('on'), labels: { _scriptable: t => !['generateLabels', 'filter', 'sort'].includes(t) } } }; class ps extends Ei {constructor (t) { super(), this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this._padding = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0 }update (t, e) { const i = this; const n = i.options; if (i.left = 0, i.top = 0, !n.display) { return void (i.width = i.height = i.right = i.bottom = 0) } i.width = i.right = t, i.height = i.bottom = e; const o = Y(n.text) ? n.text.length : 1; i._padding = ze(n.padding); const s = o * Fe(n.font).lineHeight + i._padding.height; i.isHorizontal() ? i.height = s : i.width = s }isHorizontal () { const t = this.options.position; return t === 'top' || t === 'bottom' }_drawArgs (t) { const { top: e, left: i, bottom: n, right: s, options: a } = this; const r = a.align; let l; let c; let h; let d = 0; return this.isHorizontal() ? (c = o(r, i, s), h = e + t, l = s - i) : (a.position === 'left' ? (c = i + t, h = o(r, n, e), d = -0.5 * bt) : (c = s - t, h = o(r, e, n), d = 0.5 * bt), l = n - e), { titleX: c, titleY: h, maxWidth: l, rotation: d } }draw () { const t = this; const e = t.ctx; const i = t.options; if (!i.display) { return } const o = Fe(i.font); const s = o.lineHeight / 2 + t._padding.top; const { titleX: a, titleY: r, maxWidth: l, rotation: c } = t._drawArgs(s); ee(e, i.text, 0, 0, o, { color: i.color, maxWidth: l, rotation: c, textAlign: n(i.align), textBaseline: 'middle', translation: [a, r] }) }} const ms = { id: 'title', _element: ps, start (t, e, i) { !(function (t, e) { const i = new ps({ ctx: t.ctx, options: e, chart: t }); Ge.configure(t, i, e), Ge.addBox(t, i), t.titleBlock = i }(t, i)) }, stop (t) { const e = t.titleBlock; Ge.removeBox(t, e), delete t.titleBlock }, beforeUpdate (t, e, i) { const n = t.titleBlock; Ge.configure(t, n, i), n.options = i }, defaults: { align: 'center', display: !1, font: { weight: 'bold' }, fullSize: !0, padding: 10, position: 'top', text: '', weight: 2e3 }, defaultRoutes: { color: 'color' }, descriptors: { _scriptable: !0, _indexable: !1 } }; const xs = { average (t) { if (!t.length) { return !1 } let e; let i; let n = 0; let o = 0; let s = 0; for (e = 0, i = t.length; e < i; ++e) { const i = t[e].element; if (i && i.hasValue()) { const t = i.tooltipPosition(); n += t.x, o += t.y, ++s } } return { x: n / s, y: o / s } }, nearest (t, e) { if (!t.length) { return !1 } let i; let n; let o; let s = e.x; let a = e.y; let r = Number.POSITIVE_INFINITY; for (i = 0, n = t.length; i < n; ++i) { const n = t[i].element; if (n && n.hasValue()) { const t = Vt(e, n.getCenterPoint()); t < r && (r = t, o = n) } } if (o) { const t = o.tooltipPosition(); s = t.x, a = t.y } return { x: s, y: a } } }; function bs (t, e) { return e && (Y(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t } function _s (t) { return (typeof t === 'string' || t instanceof String) && t.indexOf('\n') > -1 ? t.split('\n') : t } function ys (t, e) { const { element: i, datasetIndex: n, index: o } = e; const s = t.getDatasetMeta(n).controller; const { label: a, value: r } = s.getLabelAndValue(o); return { chart: t, label: a, parsed: s.getParsed(o), raw: t.data.datasets[n].data[o], formattedValue: r, dataset: s.getDataset(), dataIndex: o, datasetIndex: n, element: i } } function vs (t, e) { const i = t._chart.ctx; const { body: n, footer: o, title: s } = t; const { boxWidth: a, boxHeight: r } = e; const l = Fe(e.bodyFont); const c = Fe(e.titleFont); const h = Fe(e.footerFont); const d = s.length; const u = o.length; const f = n.length; const g = ze(e.padding); let p = g.height; let m = 0; let x = n.reduce((t, e) => t + e.before.length + e.lines.length + e.after.length, 0); if (x += t.beforeBody.length + t.afterBody.length, d && (p += d * c.lineHeight + (d - 1) * e.titleSpacing + e.titleMarginBottom), x) { p += f * (e.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) + (x - f) * l.lineHeight + (x - 1) * e.bodySpacing }u && (p += e.footerMarginTop + u * h.lineHeight + (u - 1) * e.footerSpacing); let b = 0; const _ = function (t) { m = Math.max(m, i.measureText(t).width + b) }; return i.save(), i.font = c.string, J(t.title, _), i.font = l.string, J(t.beforeBody.concat(t.afterBody), _), b = e.displayColors ? a + 2 : 0, J(n, t => { J(t.before, _), J(t.lines, _), J(t.after, _) }), b = 0, i.font = h.string, J(t.footer, _), i.restore(), m += g.width, { width: m, height: p } } function ws (t, e, i, n) { const { x: o, width: s } = i; const { width: a, chartArea: { left: r, right: l } } = t; let c = 'center'; return n === 'center' ? c = o <= (r + l) / 2 ? 'left' : 'right' : o <= s / 2 ? c = 'left' : o >= a - s / 2 && (c = 'right'), (function (t, e, i, n) { const { x: o, width: s } = n; const a = i.caretSize + i.caretPadding; return t === 'left' && o + s + a > e.width || t === 'right' && o - s - a < 0 || void 0 }(c, t, e, i)) && (c = 'center'), c } function Ms (t, e, i) { const n = e.yAlign || (function (t, e) { const { y: i, height: n } = e; return i < n / 2 ? 'top' : i > t.height - n / 2 ? 'bottom' : 'center' }(t, i)); return { xAlign: e.xAlign || ws(t, e, i, n), yAlign: n } } function ks (t, e, i, n) { const { caretSize: o, caretPadding: s, cornerRadius: a } = t; const { xAlign: r, yAlign: l } = i; const c = o + s; const h = a + s; let d = (function (t, e) { let { x: i, width: n } = t; return e === 'right' ? i -= n : e === 'center' && (i -= n / 2), i }(e, r)); const u = (function (t, e, i) { let { y: n, height: o } = t; return e === 'top' ? n += i : n -= e === 'bottom' ? o + i : o / 2, n }(e, l, c)); return l === 'center' ? r === 'left' ? d += c : r === 'right' && (d -= c) : r === 'left' ? d -= h : r === 'right' && (d += h), { x: Nt(d, 0, n.width - e.width), y: Nt(u, 0, n.height - e.height) } } function Ss (t, e, i) { const n = ze(i.padding); return e === 'center' ? t.x + t.width / 2 : e === 'right' ? t.x + t.width - n.right : t.x + n.left } function Ps (t) { return bs([], _s(t)) } function Ds (t, e) { const i = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks; return i ? t.override(i) : t } class Cs extends Ei {constructor (t) { super(), this.opacity = 0, this._active = [], this._chart = t._chart, this._eventPosition = void 0, this._size = void 0, this._cachedAnimations = void 0, this._tooltipItems = [], this.$animations = void 0, this.$context = void 0, this.options = t.options, this.dataPoints = void 0, this.title = void 0, this.beforeBody = void 0, this.body = void 0, this.afterBody = void 0, this.footer = void 0, this.xAlign = void 0, this.yAlign = void 0, this.x = void 0, this.y = void 0, this.height = void 0, this.width = void 0, this.caretX = void 0, this.caretY = void 0, this.labelColors = void 0, this.labelPointStyles = void 0, this.labelTextColors = void 0 }initialize (t) { this.options = t, this._cachedAnimations = void 0, this.$context = void 0 }_resolveAnimations () { const t = this; const e = t._cachedAnimations; if (e) { return e } const i = t._chart; const n = t.options.setContext(t.getContext()); const o = n.enabled && i.options.animation && n.animations; const s = new vi(t._chart, o); return o._cacheable && (t._cachedAnimations = Object.freeze(s)), s }getContext () { const t = this; return t.$context || (t.$context = (e = t._chart.getContext(), i = t, n = t._tooltipItems, Object.assign(Object.create(e), { tooltip: i, tooltipItems: n, type: 'tooltip' }))); let e, i, n }getTitle (t, e) { const i = this; const { callbacks: n } = e; const o = n.beforeTitle.apply(i, [t]); const s = n.title.apply(i, [t]); const a = n.afterTitle.apply(i, [t]); let r = []; return r = bs(r, _s(o)), r = bs(r, _s(s)), r = bs(r, _s(a)), r }getBeforeBody (t, e) { return Ps(e.callbacks.beforeBody.apply(this, [t])) }getBody (t, e) { const i = this; const { callbacks: n } = e; const o = []; return J(t, t => { const e = { before: [], lines: [], after: [] }; const s = Ds(n, t); bs(e.before, _s(s.beforeLabel.call(i, t))), bs(e.lines, s.label.call(i, t)), bs(e.after, _s(s.afterLabel.call(i, t))), o.push(e) }), o }getAfterBody (t, e) { return Ps(e.callbacks.afterBody.apply(this, [t])) }getFooter (t, e) { const i = this; const { callbacks: n } = e; const o = n.beforeFooter.apply(i, [t]); const s = n.footer.apply(i, [t]); const a = n.afterFooter.apply(i, [t]); let r = []; return r = bs(r, _s(o)), r = bs(r, _s(s)), r = bs(r, _s(a)), r }_createItems (t) { const e = this; const i = e._active; const n = e._chart.data; const o = []; const s = []; const a = []; let r; let l; let c = []; for (r = 0, l = i.length; r < l; ++r) { c.push(ys(e._chart, i[r])) } return t.filter && (c = c.filter((e, i, o) => t.filter(e, i, o, n))), t.itemSort && (c = c.sort((e, i) => t.itemSort(e, i, n))), J(c, i => { const n = Ds(t.callbacks, i); o.push(n.labelColor.call(e, i)), s.push(n.labelPointStyle.call(e, i)), a.push(n.labelTextColor.call(e, i)) }), e.labelColors = o, e.labelPointStyles = s, e.labelTextColors = a, e.dataPoints = c, c }update (t, e) { const i = this; const n = i.options.setContext(i.getContext()); const o = i._active; let s; let a = []; if (o.length) { const t = xs[n.position].call(i, o, i._eventPosition); a = i._createItems(n), i.title = i.getTitle(a, n), i.beforeBody = i.getBeforeBody(a, n), i.body = i.getBody(a, n), i.afterBody = i.getAfterBody(a, n), i.footer = i.getFooter(a, n); const e = i._size = vs(i, n); const r = Object.assign({}, t, e); const l = Ms(i._chart, n, r); const c = ks(n, r, l, i._chart); i.xAlign = l.xAlign, i.yAlign = l.yAlign, s = { opacity: 1, x: c.x, y: c.y, width: e.width, height: e.height, caretX: t.x, caretY: t.y } } else { i.opacity !== 0 && (s = { opacity: 0 }) } i._tooltipItems = a, i.$context = void 0, s && i._resolveAnimations().update(i, s), t && n.external && n.external.call(i, { chart: i._chart, tooltip: i, replay: e }) }drawCaret (t, e, i, n) { const o = this.getCaretPosition(t, i, n); e.lineTo(o.x1, o.y1), e.lineTo(o.x2, o.y2), e.lineTo(o.x3, o.y3) }getCaretPosition (t, e, i) { const { xAlign: n, yAlign: o } = this; const { cornerRadius: s, caretSize: a } = i; const { x: r, y: l } = t; const { width: c, height: h } = e; let d, u, f, g, p, m; return o === 'center' ? (p = l + h / 2, n === 'left' ? (d = r, u = d - a, g = p + a, m = p - a) : (d = r + c, u = d + a, g = p - a, m = p + a), f = d) : (u = n === 'left' ? r + s + a : n === 'right' ? r + c - s - a : this.caretX, o === 'top' ? (g = l, p = g - a, d = u - a, f = u + a) : (g = l + h, p = g + a, d = u + a, f = u - a), m = g), { x1: d, x2: u, x3: f, y1: g, y2: p, y3: m } }drawTitle (t, e, i) { const n = this; const o = n.title; const s = o.length; let a, r, l; if (s) { const c = xn(i.rtl, n.x, n.width); for (t.x = Ss(n, i.titleAlign, i), e.textAlign = c.textAlign(i.titleAlign), e.textBaseline = 'middle', a = Fe(i.titleFont), r = i.titleSpacing, e.fillStyle = i.titleColor, e.font = a.string, l = 0; l < s; ++l) { e.fillText(o[l], c.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + r, l + 1 === s && (t.y += i.titleMarginBottom - r) } } }_drawColorBox (t, e, i, n, o) { const s = this; const a = s.labelColors[i]; const r = s.labelPointStyles[i]; const { boxHeight: l, boxWidth: c } = o; const h = Fe(o.bodyFont); const d = Ss(s, 'left', o); const u = n.x(d); const f = l < h.lineHeight ? (h.lineHeight - l) / 2 : 0; const g = e.y + f; if (o.usePointStyle) { const e = { radius: Math.min(c, l) / 2, pointStyle: r.pointStyle, rotation: r.rotation, borderWidth: 1 }; const i = n.leftForLtr(u, c) + c / 2; const s = g + l / 2; t.strokeStyle = o.multiKeyBackground, t.fillStyle = o.multiKeyBackground, Kt(t, e, i, s), t.strokeStyle = a.borderColor, t.fillStyle = a.backgroundColor, Kt(t, e, i, s) } else { t.lineWidth = a.borderWidth || 1, t.strokeStyle = a.borderColor, t.setLineDash(a.borderDash || []), t.lineDashOffset = a.borderDashOffset || 0; const e = n.leftForLtr(u, c); const i = n.leftForLtr(n.xPlus(u, 1), c - 2); const s = Ie(a.borderRadius); Object.values(s).some(t => t !== 0) ? (t.beginPath(), t.fillStyle = o.multiKeyBackground, ie(t, { x: e, y: g, w: c, h: l, radius: s }), t.fill(), t.stroke(), t.fillStyle = a.backgroundColor, t.beginPath(), ie(t, { x: i, y: g + 1, w: c - 2, h: l - 2, radius: s }), t.fill()) : (t.fillStyle = o.multiKeyBackground, t.fillRect(e, g, c, l), t.strokeRect(e, g, c, l), t.fillStyle = a.backgroundColor, t.fillRect(i, g + 1, c - 2, l - 2)) }t.fillStyle = s.labelTextColors[i] }drawBody (t, e, i) { const n = this; const { body: o } = n; const { bodySpacing: s, bodyAlign: a, displayColors: r, boxHeight: l, boxWidth: c } = i; const h = Fe(i.bodyFont); let d = h.lineHeight; let u = 0; const f = xn(i.rtl, n.x, n.width); const g = function (i) { e.fillText(i, f.x(t.x + u), t.y + d / 2), t.y += d + s }; const p = f.textAlign(a); let m, x, b, _, y, v, w; for (e.textAlign = a, e.textBaseline = 'middle', e.font = h.string, t.x = Ss(n, p, i), e.fillStyle = i.bodyColor, J(n.beforeBody, g), u = r && p !== 'right' ? a === 'center' ? c / 2 + 1 : c + 2 : 0, _ = 0, v = o.length; _ < v; ++_) { for (m = o[_], x = n.labelTextColors[_], e.fillStyle = x, J(m.before, g), b = m.lines, r && b.length && (n._drawColorBox(e, t, _, f, i), d = Math.max(h.lineHeight, l)), y = 0, w = b.length; y < w; ++y) { g(b[y]), d = h.lineHeight }J(m.after, g) }u = 0, d = h.lineHeight, J(n.afterBody, g), t.y -= s }drawFooter (t, e, i) { const n = this; const o = n.footer; const s = o.length; let a, r; if (s) { const l = xn(i.rtl, n.x, n.width); for (t.x = Ss(n, i.footerAlign, i), t.y += i.footerMarginTop, e.textAlign = l.textAlign(i.footerAlign), e.textBaseline = 'middle', a = Fe(i.footerFont), e.fillStyle = i.footerColor, e.font = a.string, r = 0; r < s; ++r) { e.fillText(o[r], l.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + i.footerSpacing } } }drawBackground (t, e, i, n) { const { xAlign: o, yAlign: s } = this; const { x: a, y: r } = t; const { width: l, height: c } = i; const h = n.cornerRadius; e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.beginPath(), e.moveTo(a + h, r), s === 'top' && this.drawCaret(t, e, i, n), e.lineTo(a + l - h, r), e.quadraticCurveTo(a + l, r, a + l, r + h), s === 'center' && o === 'right' && this.drawCaret(t, e, i, n), e.lineTo(a + l, r + c - h), e.quadraticCurveTo(a + l, r + c, a + l - h, r + c), s === 'bottom' && this.drawCaret(t, e, i, n), e.lineTo(a + h, r + c), e.quadraticCurveTo(a, r + c, a, r + c - h), s === 'center' && o === 'left' && this.drawCaret(t, e, i, n), e.lineTo(a, r + h), e.quadraticCurveTo(a, r, a + h, r), e.closePath(), e.fill(), n.borderWidth > 0 && e.stroke() }_updateAnimationTarget (t) { const e = this; const i = e._chart; const n = e.$animations; const o = n && n.x; const s = n && n.y; if (o || s) { const n = xs[t.position].call(e, e._active, e._eventPosition); if (!n) { return } const a = e._size = vs(e, t); const r = Object.assign({}, n, e._size); const l = Ms(i, t, r); const c = ks(t, r, l, i); o._to === c.x && s._to === c.y || (e.xAlign = l.xAlign, e.yAlign = l.yAlign, e.width = a.width, e.height = a.height, e.caretX = n.x, e.caretY = n.y, e._resolveAnimations().update(e, c)) } }draw (t) { const e = this; const i = e.options.setContext(e.getContext()); let n = e.opacity; if (!n) { return } e._updateAnimationTarget(i); const o = { width: e.width, height: e.height }; const s = { x: e.x, y: e.y }; n = Math.abs(n) < 0.001 ? 0 : n; const a = ze(i.padding); const r = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length; i.enabled && r && (t.save(), t.globalAlpha = n, e.drawBackground(s, t, o, i), bn(t, i.textDirection), s.y += a.top, e.drawTitle(s, t, i), e.drawBody(s, t, i), e.drawFooter(s, t, i), _n(t, i.textDirection), t.restore()) }getActiveElements () { return this._active || [] }setActiveElements (t, e) { const i = this; const n = i._active; const o = t.map(({ datasetIndex: t, index: e }) => { const n = i._chart.getDatasetMeta(t); if (!n) { throw new Error('Cannot find a dataset at index ' + t) } return { datasetIndex: t, element: n.data[e], index: e } }); const s = !tt(n, o); const a = i._positionChanged(o, e); (s || a) && (i._active = o, i._eventPosition = e, i.update(!0)) }handleEvent (t, e) { const i = this; const n = i.options; const o = i._active || []; let s = !1; let a = []; t.type !== 'mouseout' && (a = i._chart.getElementsAtEventForMode(t, n.mode, n, e), n.reverse && a.reverse()); const r = i._positionChanged(a, t); return s = e || !tt(a, o) || r, s && (i._active = a, (n.enabled || n.external) && (i._eventPosition = { x: t.x, y: t.y }, i.update(!0, e))), s }_positionChanged (t, e) { const { caretX: i, caretY: n, options: o } = this; const s = xs[o.position].call(this, t, e); return !1 !== s && (i !== s.x || n !== s.y) }}Cs.positioners = xs; const Os = { id: 'tooltip', _element: Cs, positioners: xs, afterInit (t, e, i) { i && (t.tooltip = new Cs({ _chart: t, options: i })) }, beforeUpdate (t, e, i) { t.tooltip && t.tooltip.initialize(i) }, reset (t, e, i) { t.tooltip && t.tooltip.initialize(i) }, afterDraw (t) { const e = t.tooltip; const i = { tooltip: e }; !1 !== t.notifyPlugins('beforeTooltipDraw', i) && (e && e.draw(t.ctx), t.notifyPlugins('afterTooltipDraw', i)) }, afterEvent (t, e) { if (t.tooltip) { const i = e.replay; t.tooltip.handleEvent(e.event, i) && (e.changed = !0) } }, defaults: { enabled: !0, external: null, position: 'average', backgroundColor: 'rgba(0,0,0,0.8)', titleColor: '#fff', titleFont: { weight: 'bold' }, titleSpacing: 2, titleMarginBottom: 6, titleAlign: 'left', bodyColor: '#fff', bodySpacing: 2, bodyFont: {}, bodyAlign: 'left', footerColor: '#fff', footerSpacing: 2, footerMarginTop: 6, footerFont: { weight: 'bold' }, footerAlign: 'left', padding: 6, caretPadding: 2, caretSize: 5, cornerRadius: 6, boxHeight: (t, e) => e.bodyFont.size, boxWidth: (t, e) => e.bodyFont.size, multiKeyBackground: '#fff', displayColors: !0, borderColor: 'rgba(0,0,0,0)', borderWidth: 0, animation: { duration: 400, easing: 'easeOutQuart' }, animations: { numbers: { type: 'number', properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'] }, opacity: { easing: 'linear', duration: 200 } }, callbacks: { beforeTitle: N, title (t) { if (t.length > 0) { const e = t[0]; const i = e.chart.data.labels; const n = i ? i.length : 0; if (this && this.options && this.options.mode === 'dataset') { return e.dataset.label || '' } if (e.label) { return e.label } if (n > 0 && e.dataIndex < n) { return i[e.dataIndex] } } return '' }, afterTitle: N, beforeBody: N, beforeLabel: N, label (t) { if (this && this.options && this.options.mode === 'dataset') { return t.label + ': ' + t.formattedValue || t.formattedValue } let e = t.dataset.label || ''; e && (e += ': '); const i = t.formattedValue; return $(i) || (e += i), e }, labelColor (t) { const e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex); return { borderColor: e.borderColor, backgroundColor: e.backgroundColor, borderWidth: e.borderWidth, borderDash: e.borderDash, borderDashOffset: e.borderDashOffset, borderRadius: 0 } }, labelTextColor () { return this.options.bodyColor }, labelPointStyle (t) { const e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex); return { pointStyle: e.pointStyle, rotation: e.rotation } }, afterLabel: N, afterBody: N, beforeFooter: N, footer: N, afterFooter: N } }, defaultRoutes: { bodyFont: 'font', footerFont: 'font', titleFont: 'font' }, descriptors: { _scriptable: t => t !== 'filter' && t !== 'itemSort' && t !== 'external', _indexable: !1, callbacks: { _scriptable: !1, _indexable: !1 }, animation: { _fallback: !1 }, animations: { _fallback: 'animation' } }, additionalOptionScopes: ['interaction'] }; const As = Object.freeze({ __proto__: null, Decimation: qo, Filler: ds, Legend: gs, Title: ms, Tooltip: Os }); function Ts (t, e, i) { const n = t.indexOf(e); if (n === -1) { return ((t, e, i) => typeof e === 'string' ? t.push(e) - 1 : isNaN(e) ? null : i)(t, e, i) } return n !== t.lastIndexOf(e) ? i : n } class Rs extends Xi {constructor (t) { super(t), this._startValue = void 0, this._valueRange = 0 }parse (t, e) { if ($(t)) { return null } const i = this.getLabels(); return ((t, e) => t === null ? null : Nt(Math.round(t), 0, e))(e = isFinite(e) && i[e] === t ? e : Ts(i, t, K(e, t)), i.length - 1) }determineDataLimits () { const t = this; const { minDefined: e, maxDefined: i } = t.getUserBounds(); let { min: n, max: o } = t.getMinMax(!0); t.options.bounds === 'ticks' && (e || (n = 0), i || (o = t.getLabels().length - 1)), t.min = n, t.max = o }buildTicks () { const t = this; const e = t.min; const i = t.max; const n = t.options.offset; const o = []; let s = t.getLabels(); s = e === 0 && i === s.length - 1 ? s : s.slice(e, i + 1), t._valueRange = Math.max(s.length - (n ? 0 : 1), 1), t._startValue = t.min - (n ? 0.5 : 0); for (let t = e; t <= i; t++) { o.push({ value: t }) } return o }getLabelForValue (t) { const e = this.getLabels(); return t >= 0 && t < e.length ? e[t] : t }configure () { const t = this; super.configure(), t.isHorizontal() || (t._reversePixels = !t._reversePixels) }getPixelForValue (t) { const e = this; return typeof t !== 'number' && (t = e.parse(t)), t === null ? NaN : e.getPixelForDecimal((t - e._startValue) / e._valueRange) }getPixelForTick (t) { const e = this.ticks; return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value) }getValueForPixel (t) { const e = this; return Math.round(e._startValue + e.getDecimalForPixel(t) * e._valueRange) }getBasePixel () { return this.bottom }}Rs.id = 'category', Rs.defaults = { ticks: { callback: Rs.prototype.getLabelForValue } }; class Ls extends Xi {constructor (t) { super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._endValue = void 0, this._valueRange = 0 }parse (t, e) { return $(t) || (typeof t === 'number' || t instanceof Number) && !isFinite(+t) ? null : +t }handleTickRangeOptions () { const t = this; const { beginAtZero: e, stacked: i } = t.options; const { minDefined: n, maxDefined: o } = t.getUserBounds(); let { min: s, max: a } = t; const r = t => s = n ? s : t; const l = t => a = o ? a : t; if (e || i) { const t = Dt(s); const e = Dt(a); t < 0 && e < 0 ? l(0) : t > 0 && e > 0 && r(0) }s === a && (l(a + 1), e || r(s - 1)), t.min = s, t.max = a }getTickLimit () { const t = this; const e = t.options.ticks; let i; let { maxTicksLimit: n, stepSize: o } = e; return o ? i = Math.ceil(t.max / o) - Math.floor(t.min / o) + 1 : (i = t.computeTickLimit(), n = n || 11), n && (i = Math.min(n, i)), i }computeTickLimit () { return Number.POSITIVE_INFINITY }buildTicks () { const t = this; const e = t.options; const i = e.ticks; let n = t.getTickLimit(); n = Math.max(2, n); const o = (function (t, e) { const i = []; const { step: n, min: o, max: s, precision: a, count: r, maxTicks: l, maxDigits: c, horizontal: h } = t; const d = n || 1; const u = l - 1; const { min: f, max: g } = e; const p = !$(o); const m = !$(s); const x = !$(r); const b = (g - f) / c; let _; let y; let v; let w; let M = Ct((g - f) / u / d) * d; if (M < 1e-14 && !p && !m) { return [{ value: f }, { value: g }] } w = Math.ceil(g / M) - Math.floor(f / M), w > u && (M = Ct(w * M / u / d) * d), $(a) || (_ = Math.pow(10, a), M = Math.ceil(M * _) / _), y = Math.floor(f / M) * M, v = Math.ceil(g / M) * M, p && m && n && Rt((s - o) / n, M / 1e3) ? (w = Math.min((s - o) / M, l), M = (s - o) / w, y = o, v = s) : x ? (y = p ? o : y, v = m ? s : v, w = r - 1, M = (v - y) / w) : (w = (v - y) / M, w = Tt(w, Math.round(w), M / 1e3) ? Math.round(w) : Math.ceil(w)), _ = Math.pow(10, $(a) ? zt(M) : a), y = Math.round(y * _) / _, v = Math.round(v * _) / _; let k = 0; for (p && (i.push({ value: o }), y <= o && k++, Tt(Math.round((y + k * M) * _) / _, o, b * (h ? ('' + o).length : 1)) && k++); k < w; ++k) { i.push({ value: Math.round((y + k * M) * _) / _ }) } return m ? Tt(i[i.length - 1].value, s, b * (h ? ('' + s).length : 1)) ? i[i.length - 1].value = s : i.push({ value: s }) : i.push({ value: v }), i }({ maxTicks: n, min: e.min, max: e.max, precision: i.precision, step: i.stepSize, count: i.count, maxDigits: t._maxDigits(), horizontal: t.isHorizontal() }, t._range || t)); return e.bounds === 'ticks' && Lt(o, t, 'value'), e.reverse ? (o.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), o }configure () { const t = this; const e = t.ticks; let i = t.min; let n = t.max; if (super.configure(), t.options.offset && e.length) { const t = (n - i) / Math.max(e.length - 1, 1) / 2; i -= t, n += t }t._startValue = i, t._endValue = n, t._valueRange = n - i }getLabelForValue (t) { return zi(t, this.chart.options.locale) }} class Es extends Ls {determineDataLimits () { const t = this; const { min: e, max: i } = t.getMinMax(!0); t.min = X(e) ? e : 0, t.max = X(i) ? i : 1, t.handleTickRangeOptions() }computeTickLimit () { const t = this; if (t.isHorizontal()) { return Math.ceil(t.width / 40) } const e = t._resolveTickFontOptions(0); return Math.ceil(t.height / e.lineHeight) }getPixelForValue (t) { return t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange) }getValueForPixel (t) { return this._startValue + this.getDecimalForPixel(t) * this._valueRange }} function Is (t) { return t / Math.pow(10, Math.floor(Pt(t))) === 1 }Es.id = 'linear', Es.defaults = { ticks: { callback: Vi.formatters.numeric } }; class zs extends Xi {constructor (t) { super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._valueRange = 0 }parse (t, e) { const i = Ls.prototype.parse.apply(this, [t, e]); if (i !== 0) { return X(i) && i > 0 ? i : null } this._zero = !0 }determineDataLimits () { const t = this; const { min: e, max: i } = t.getMinMax(!0); t.min = X(e) ? Math.max(0, e) : null, t.max = X(i) ? Math.max(0, i) : null, t.options.beginAtZero && (t._zero = !0), t.handleTickRangeOptions() }handleTickRangeOptions () { const t = this; const { minDefined: e, maxDefined: i } = t.getUserBounds(); let n = t.min; let o = t.max; const s = t => n = e ? n : t; const a = t => o = i ? o : t; const r = (t, e) => Math.pow(10, Math.floor(Pt(t)) + e); n === o && (n <= 0 ? (s(1), a(10)) : (s(r(n, -1)), a(r(o, 1)))), n <= 0 && s(r(o, -1)), o <= 0 && a(r(n, 1)), t._zero && t.min !== t._suggestedMin && n === r(t.min, 0) && s(r(n, -1)), t.min = n, t.max = o }buildTicks () { const t = this; const e = t.options; const i = (function (t, e) { const i = Math.floor(Pt(e.max)); const n = Math.ceil(e.max / Math.pow(10, i)); const o = []; let s = q(t.min, Math.pow(10, Math.floor(Pt(e.min)))); let a = Math.floor(Pt(s)); let r = Math.floor(s / Math.pow(10, a)); let l = a < 0 ? Math.pow(10, Math.abs(a)) : 1; do { o.push({ value: s, major: Is(s) }), ++r, r === 10 && (r = 1, ++a, l = a >= 0 ? 1 : l), s = Math.round(r * Math.pow(10, a) * l) / l } while (a < i || a === i && r < n); const c = q(t.max, s); return o.push({ value: c, major: Is(s) }), o }({ min: t._userMin, max: t._userMax }, t)); return e.bounds === 'ticks' && Lt(i, t, 'value'), e.reverse ? (i.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), i }getLabelForValue (t) { return void 0 === t ? '0' : zi(t, this.chart.options.locale) }configure () { const t = this; const e = t.min; super.configure(), t._startValue = Pt(e), t._valueRange = Pt(t.max) - Pt(e) }getPixelForValue (t) { const e = this; return void 0 !== t && t !== 0 || (t = e.min), t === null || isNaN(t) ? NaN : e.getPixelForDecimal(t === e.min ? 0 : (Pt(t) - e._startValue) / e._valueRange) }getValueForPixel (t) { const e = this; const i = e.getDecimalForPixel(t); return Math.pow(10, e._startValue + i * e._valueRange) }} function Fs (t) { const e = t.ticks; if (e.display && t.display) { const t = ze(e.backdropPadding); return K(e.font && e.font.size, xt.font.size) + t.height } return 0 } function Vs (t, e, i, n, o) { return t === n || t === o ? { start: e - i / 2, end: e + i / 2 } : t < n || t > o ? { start: e - i, end: e } : { start: e, end: e + i } } function Bs (t) { return t === 0 || t === 180 ? 'center' : t < 180 ? 'left' : 'right' } function Ws (t, e, i) { t === 90 || t === 270 ? i.y -= e.h / 2 : (t > 270 || t < 90) && (i.y -= e.h) } function Hs (t, e, i, n) { const { ctx: o } = t; if (i) { o.arc(t.xCenter, t.yCenter, e, 0, _t) } else { let i = t.getPointPosition(0, e); o.moveTo(i.x, i.y); for (let s = 1; s < n; s++) { i = t.getPointPosition(s, e), o.lineTo(i.x, i.y) } } } function Ns (t) { return At(t) ? t : 0 }zs.id = 'logarithmic', zs.defaults = { ticks: { callback: Vi.formatters.logarithmic, major: { enabled: !0 } } }; class js extends Ls {constructor (t) { super(t), this.xCenter = void 0, this.yCenter = void 0, this.drawingArea = void 0, this._pointLabels = [], this._pointLabelItems = [] }setDimensions () { const t = this; t.width = t.maxWidth, t.height = t.maxHeight, t.paddingTop = Fs(t.options) / 2, t.xCenter = Math.floor(t.width / 2), t.yCenter = Math.floor((t.height - t.paddingTop) / 2), t.drawingArea = Math.min(t.height - t.paddingTop, t.width) / 2 }determineDataLimits () { const t = this; const { min: e, max: i } = t.getMinMax(!1); t.min = X(e) && !isNaN(e) ? e : 0, t.max = X(i) && !isNaN(i) ? i : 0, t.handleTickRangeOptions() }computeTickLimit () { return Math.ceil(this.drawingArea / Fs(this.options)) }generateTickLabels (t) { const e = this; Ls.prototype.generateTickLabels.call(e, t), e._pointLabels = e.getLabels().map((t, i) => { const n = Q(e.options.pointLabels.callback, [t, i], e); return n || n === 0 ? n : '' }) }fit () { const t = this; const e = t.options; e.display && e.pointLabels.display ? (function (t) { const e = { l: 0, r: t.width, t: 0, b: t.height - t.paddingTop }; const i = {}; let n, o, s; const a = []; const r = []; const l = t.getLabels().length; for (n = 0; n < l; n++) { const l = t.options.pointLabels.setContext(t.getContext(n)); r[n] = l.padding, s = t.getPointPosition(n, t.drawingArea + r[n]); const u = Fe(l.font); t.ctx.font = u.string, c = t.ctx, h = u.lineHeight, o = Y(d = t._pointLabels[n]) ? { w: Ut(c, c.font, d), h: d.length * h } : { w: c.measureText(d).width, h: h }, a[n] = o; const f = t.getIndexAngle(n); const g = It(f); const p = Vs(g, s.x, o.w, 0, 180); const m = Vs(g, s.y, o.h, 90, 270); p.start < e.l && (e.l = p.start, i.l = f), p.end > e.r && (e.r = p.end, i.r = f), m.start < e.t && (e.t = m.start, i.t = f), m.end > e.b && (e.b = m.end, i.b = f) } let c, h, d; t._setReductions(t.drawingArea, e, i), t._pointLabelItems = []; const u = t.options; const f = Fs(u); const g = t.getDistanceFromCenterForValue(u.ticks.reverse ? t.min : t.max); for (n = 0; n < l; n++) { const e = n === 0 ? f / 2 : 0; const i = t.getPointPosition(n, g + e + r[n]); const o = It(t.getIndexAngle(n)); const s = a[n]; Ws(o, s, i); const l = Bs(o); let c; c = l === 'left' ? i.x : l === 'center' ? i.x - s.w / 2 : i.x - s.w; const h = c + s.w; t._pointLabelItems[n] = { x: i.x, y: i.y, textAlign: l, left: c, top: i.y, right: h, bottom: i.y + s.h } } }(t)) : t.setCenterPoint(0, 0, 0, 0) }_setReductions (t, e, i) { const n = this; let o = e.l / Math.sin(i.l); let s = Math.max(e.r - n.width, 0) / Math.sin(i.r); let a = -e.t / Math.cos(i.t); let r = -Math.max(e.b - (n.height - n.paddingTop), 0) / Math.cos(i.b); o = Ns(o), s = Ns(s), a = Ns(a), r = Ns(r), n.drawingArea = Math.max(t / 2, Math.min(Math.floor(t - (o + s) / 2), Math.floor(t - (a + r) / 2))), n.setCenterPoint(o, s, a, r) }setCenterPoint (t, e, i, n) { const o = this; const s = o.width - e - o.drawingArea; const a = t + o.drawingArea; const r = i + o.drawingArea; const l = o.height - o.paddingTop - n - o.drawingArea; o.xCenter = Math.floor((a + s) / 2 + o.left), o.yCenter = Math.floor((r + l) / 2 + o.top + o.paddingTop) }getIndexAngle (t) { return Wt(t * (_t / this.getLabels().length) + Et(this.options.startAngle || 0)) }getDistanceFromCenterForValue (t) { const e = this; if ($(t)) { return NaN } const i = e.drawingArea / (e.max - e.min); return e.options.reverse ? (e.max - t) * i : (t - e.min) * i }getValueForDistanceFromCenter (t) { if ($(t)) { return NaN } const e = this; const i = t / (e.drawingArea / (e.max - e.min)); return e.options.reverse ? e.max - i : e.min + i }getPointPosition (t, e) { const i = this; const n = i.getIndexAngle(t) - Mt; return { x: Math.cos(n) * e + i.xCenter, y: Math.sin(n) * e + i.yCenter, angle: n } }getPointPositionForValue (t, e) { return this.getPointPosition(t, this.getDistanceFromCenterForValue(e)) }getBasePosition (t) { return this.getPointPositionForValue(t || 0, this.getBaseValue()) }getPointLabelPosition (t) { const { left: e, top: i, right: n, bottom: o } = this._pointLabelItems[t]; return { left: e, top: i, right: n, bottom: o } }drawBackground () { const t = this; const { backgroundColor: e, grid: { circular: i } } = t.options; if (e) { const n = t.ctx; n.save(), n.beginPath(), Hs(t, t.getDistanceFromCenterForValue(t._endValue), i, t.getLabels().length), n.closePath(), n.fillStyle = e, n.fill(), n.restore() } }drawGrid () { const t = this; const e = t.ctx; const i = t.options; const { angleLines: n, grid: o } = i; const s = t.getLabels().length; let a, r, l; if (i.pointLabels.display && (function (t, e) { const { ctx: i, options: { pointLabels: n } } = t; for (let o = e - 1; o >= 0; o--) { const e = n.setContext(t.getContext(o)); const s = Fe(e.font); const { x: a, y: r, textAlign: l, left: c, top: h, right: d, bottom: u } = t._pointLabelItems[o]; const { backdropColor: f } = e; if (!$(f)) { const t = ze(e.backdropPadding); i.fillStyle = f, i.fillRect(c - t.left, h - t.top, d - c + t.width, u - h + t.height) }ee(i, t._pointLabels[o], a, r + s.lineHeight / 2, s, { color: e.color, textAlign: l, textBaseline: 'middle' }) } }(t, s)), o.display && t.ticks.forEach((e, i) => { if (i !== 0) { r = t.getDistanceFromCenterForValue(e.value); const n = o.setContext(t.getContext(i - 1)); !(function (t, e, i, n) { const o = t.ctx; const s = e.circular; const { color: a, lineWidth: r } = e; !s && !n || !a || !r || i < 0 || (o.save(), o.strokeStyle = a, o.lineWidth = r, o.setLineDash(e.borderDash), o.lineDashOffset = e.borderDashOffset, o.beginPath(), Hs(t, i, s, n), o.closePath(), o.stroke(), o.restore()) }(t, n, r, s)) } }), n.display) { for (e.save(), a = t.getLabels().length - 1; a >= 0; a--) { const o = n.setContext(t.getContext(a)); const { color: s, lineWidth: c } = o; c && s && (e.lineWidth = c, e.strokeStyle = s, e.setLineDash(o.borderDash), e.lineDashOffset = o.borderDashOffset, r = t.getDistanceFromCenterForValue(i.ticks.reverse ? t.min : t.max), l = t.getPointPosition(a, r), e.beginPath(), e.moveTo(t.xCenter, t.yCenter), e.lineTo(l.x, l.y), e.stroke()) }e.restore() } }drawBorder () {}drawLabels () { const t = this; const e = t.ctx; const i = t.options; const n = i.ticks; if (!n.display) { return } const o = t.getIndexAngle(0); let s, a; e.save(), e.translate(t.xCenter, t.yCenter), e.rotate(o), e.textAlign = 'center', e.textBaseline = 'middle', t.ticks.forEach((o, r) => { if (r === 0 && !i.reverse) { return } const l = n.setContext(t.getContext(r)); const c = Fe(l.font); if (s = t.getDistanceFromCenterForValue(t.ticks[r].value), l.showLabelBackdrop) { a = e.measureText(o.label).width, e.fillStyle = l.backdropColor; const t = ze(l.backdropPadding); e.fillRect(-a / 2 - t.left, -s - c.size / 2 - t.top, a + t.width, c.size + t.height) }ee(e, o.label, 0, -s, c, { color: l.color }) }), e.restore() }drawTitle () {}}js.id = 'radialLinear', js.defaults = { display: !0, animate: !0, position: 'chartArea', angleLines: { display: !0, lineWidth: 1, borderDash: [], borderDashOffset: 0 }, grid: { circular: !1 }, startAngle: 0, ticks: { showLabelBackdrop: !0, callback: Vi.formatters.numeric }, pointLabels: { backdropColor: void 0, backdropPadding: 2, display: !0, font: { size: 10 }, callback: t => t, padding: 5 } }, js.defaultRoutes = { 'angleLines.color': 'borderColor', 'pointLabels.color': 'color', 'ticks.color': 'color' }, js.descriptors = { angleLines: { _fallback: 'grid' } }; const $s = { millisecond: { common: !0, size: 1, steps: 1e3 }, second: { common: !0, size: 1e3, steps: 60 }, minute: { common: !0, size: 6e4, steps: 60 }, hour: { common: !0, size: 36e5, steps: 24 }, day: { common: !0, size: 864e5, steps: 30 }, week: { common: !1, size: 6048e5, steps: 4 }, month: { common: !0, size: 2628e6, steps: 12 }, quarter: { common: !1, size: 7884e6, steps: 4 }, year: { common: !0, size: 3154e7 } }; const Ys = Object.keys($s); function Us (t, e) { return t - e } function Xs (t, e) { if ($(e)) { return null } const i = t._adapter; const { parser: n, round: o, isoWeekday: s } = t._parseOpts; let a = e; return typeof n === 'function' && (a = n(a)), X(a) || (a = typeof n === 'string' ? i.parse(a, n) : i.parse(a)), a === null ? null : (o && (a = o !== 'week' || !At(s) && !0 !== s ? i.startOf(a, o) : i.startOf(a, 'isoWeek', s)), +a) } function qs (t, e, i, n) { const o = Ys.length; for (let s = Ys.indexOf(t); s < o - 1; ++s) { const t = $s[Ys[s]]; const o = t.steps ? t.steps : Number.MAX_SAFE_INTEGER; if (t.common && Math.ceil((i - e) / (o * t.size)) <= n) { return Ys[s] } } return Ys[o - 1] } function Ks (t, e, i) { if (i) { if (i.length) { const { lo: n, hi: o } = ne(i, e); t[i[n] >= e ? i[n] : i[o]] = !0 } } else { t[e] = !0 } } function Gs (t, e, i) { const n = []; const o = {}; const s = e.length; let a, r; for (a = 0; a < s; ++a) { r = e[a], o[r] = a, n.push({ value: r, major: !1 }) } return s !== 0 && i ? (function (t, e, i, n) { const o = t._adapter; const s = +o.startOf(e[0].value, n); const a = e[e.length - 1].value; let r, l; for (r = s; r <= a; r = +o.add(r, 1, n)) { l = i[r], l >= 0 && (e[l].major = !0) } return e }(t, n, o, i)) : n } class Zs extends Xi {constructor (t) { super(t), this._cache = { data: [], labels: [], all: [] }, this._unit = 'day', this._majorUnit = void 0, this._offsets = {}, this._normalized = !1, this._parseOpts = void 0 }init (t, e) { const i = t.time || (t.time = {}); const n = this._adapter = new oo._date(t.adapters.date); st(i.displayFormats, n.formats()), this._parseOpts = { parser: i.parser, round: i.round, isoWeekday: i.isoWeekday }, super.init(t), this._normalized = e.normalized }parse (t, e) { return void 0 === t ? null : Xs(this, t) }beforeLayout () { super.beforeLayout(), this._cache = { data: [], labels: [], all: [] } }determineDataLimits () { const t = this; const e = t.options; const i = t._adapter; const n = e.time.unit || 'day'; let { min: o, max: s, minDefined: a, maxDefined: r } = t.getUserBounds(); function l (t) { a || isNaN(t.min) || (o = Math.min(o, t.min)), r || isNaN(t.max) || (s = Math.max(s, t.max)) }a && r || (l(t._getLabelBounds()), e.bounds === 'ticks' && e.ticks.source === 'labels' || l(t.getMinMax(!1))), o = X(o) && !isNaN(o) ? o : +i.startOf(Date.now(), n), s = X(s) && !isNaN(s) ? s : +i.endOf(Date.now(), n) + 1, t.min = Math.min(o, s - 1), t.max = Math.max(o + 1, s) }_getLabelBounds () { const t = this.getLabelTimestamps(); let e = Number.POSITIVE_INFINITY; let i = Number.NEGATIVE_INFINITY; return t.length && (e = t[0], i = t[t.length - 1]), { min: e, max: i } }buildTicks () { const t = this; const e = t.options; const i = e.time; const n = e.ticks; const o = n.source === 'labels' ? t.getLabelTimestamps() : t._generate(); e.bounds === 'ticks' && o.length && (t.min = t._userMin || o[0], t.max = t._userMax || o[o.length - 1]); const s = t.min; const a = ae(o, s, t.max); return t._unit = i.unit || (n.autoSkip ? qs(i.minUnit, t.min, t.max, t._getLabelCapacity(s)) : (function (t, e, i, n, o) { for (let s = Ys.length - 1; s >= Ys.indexOf(i); s--) { const i = Ys[s]; if ($s[i].common && t._adapter.diff(o, n, i) >= e - 1) { return i } } return Ys[i ? Ys.indexOf(i) : 0] }(t, a.length, i.minUnit, t.min, t.max))), t._majorUnit = n.major.enabled && t._unit !== 'year' ? (function (t) { for (let e = Ys.indexOf(t) + 1, i = Ys.length; e < i; ++e) { if ($s[Ys[e]].common) { return Ys[e] } } }(t._unit)) : void 0, t.initOffsets(o), e.reverse && a.reverse(), Gs(t, a, t._majorUnit) }initOffsets (t) { const e = this; let i; let n; let o = 0; let s = 0; e.options.offset && t.length && (i = e.getDecimalForValue(t[0]), o = t.length === 1 ? 1 - i : (e.getDecimalForValue(t[1]) - i) / 2, n = e.getDecimalForValue(t[t.length - 1]), s = t.length === 1 ? n : (n - e.getDecimalForValue(t[t.length - 2])) / 2); const a = t.length < 3 ? 0.5 : 0.25; o = Nt(o, 0, a), s = Nt(s, 0, a), e._offsets = { start: o, end: s, factor: 1 / (o + 1 + s) } }_generate () { const t = this; const e = t._adapter; const i = t.min; const n = t.max; const o = t.options; const s = o.time; const a = s.unit || qs(s.minUnit, i, n, t._getLabelCapacity(i)); const r = K(s.stepSize, 1); const l = a === 'week' && s.isoWeekday; const c = At(l) || !0 === l; const h = {}; let d; let u; let f = i; if (c && (f = +e.startOf(f, 'isoWeek', l)), f = +e.startOf(f, c ? 'day' : a), e.diff(n, i, a) > 1e5 * r) { throw new Error(i + ' and ' + n + ' are too far apart with stepSize of ' + r + ' ' + a) } const g = o.ticks.source === 'data' && t.getDataTimestamps(); for (d = f, u = 0; d < n; d = +e.add(d, r, a), u++) { Ks(h, d, g) } return d !== n && o.bounds !== 'ticks' && u !== 1 || Ks(h, d, g), Object.keys(h).sort((t, e) => t - e).map(t => +t) }getLabelForValue (t) { const e = this._adapter; const i = this.options.time; return i.tooltipFormat ? e.format(t, i.tooltipFormat) : e.format(t, i.displayFormats.datetime) }_tickFormatFunction (t, e, i, n) { const o = this; const s = o.options; const a = s.time.displayFormats; const r = o._unit; const l = o._majorUnit; const c = r && a[r]; const h = l && a[l]; const d = i[e]; const u = l && h && d && d.major; const f = o._adapter.format(t, n || (u ? h : c)); const g = s.ticks.callback; return g ? Q(g, [f, e, i], o) : f }generateTickLabels (t) { let e, i, n; for (e = 0, i = t.length; e < i; ++e) { n = t[e], n.label = this._tickFormatFunction(n.value, e, t) } }getDecimalForValue (t) { const e = this; return t === null ? NaN : (t - e.min) / (e.max - e.min) }getPixelForValue (t) { const e = this; const i = e._offsets; const n = e.getDecimalForValue(t); return e.getPixelForDecimal((i.start + n) * i.factor) }getValueForPixel (t) { const e = this; const i = e._offsets; const n = e.getDecimalForPixel(t) / i.factor - i.end; return e.min + n * (e.max - e.min) }_getLabelSize (t) { const e = this; const i = e.options.ticks; const n = e.ctx.measureText(t).width; const o = Et(e.isHorizontal() ? i.maxRotation : i.minRotation); const s = Math.cos(o); const a = Math.sin(o); const r = e._resolveTickFontOptions(0).size; return { w: n * s + r * a, h: n * a + r * s } }_getLabelCapacity (t) { const e = this; const i = e.options.time; const n = i.displayFormats; const o = n[i.unit] || n.millisecond; const s = e._tickFormatFunction(t, 0, Gs(e, [t], e._majorUnit), o); const a = e._getLabelSize(s); const r = Math.floor(e.isHorizontal() ? e.width / a.w : e.height / a.h) - 1; return r > 0 ? r : 1 }getDataTimestamps () { const t = this; let e; let i; let n = t._cache.data || []; if (n.length) { return n } const o = t.getMatchingVisibleMetas(); if (t._normalized && o.length) { return t._cache.data = o[0].controller.getAllParsedValues(t) } for (e = 0, i = o.length; e < i; ++e) { n = n.concat(o[e].controller.getAllParsedValues(t)) } return t._cache.data = t.normalize(n) }getLabelTimestamps () { const t = this; const e = t._cache.labels || []; let i, n; if (e.length) { return e } const o = t.getLabels(); for (i = 0, n = o.length; i < n; ++i) { e.push(Xs(t, o[i])) } return t._cache.labels = t._normalized ? e : t.normalize(e) }normalize (t) { return he(t.sort(Us)) }} function Qs (t, e, i) { let n, o, s, a; if (i) { n = Math.floor(e), o = Math.ceil(e), s = t[n], a = t[o] } else { const i = ne(t, e); s = i.lo, a = i.hi, n = t[s], o = t[a] } const r = o - n; return r ? s + (a - s) * (e - n) / r : s }Zs.id = 'time', Zs.defaults = { bounds: 'data', adapters: {}, time: { parser: !1, unit: !1, round: !1, isoWeekday: !1, minUnit: 'millisecond', displayFormats: {} }, ticks: { source: 'auto', major: { enabled: !1 } } }; class Js extends Zs {constructor (t) { super(t), this._table = [], this._maxIndex = void 0 }initOffsets () { const t = this; const e = t._getTimestampsForTable(); t._table = t.buildLookupTable(e), t._maxIndex = t._table.length - 1, super.initOffsets(e) }buildLookupTable (t) { const { min: e, max: i } = this; if (!t.length) { return [{ time: e, pos: 0 }, { time: i, pos: 1 }] } const n = [e]; let o, s, a; for (o = 0, s = t.length; o < s; ++o) { a = t[o], a > e && a < i && n.push(a) } return n.push(i), n }_getTimestampsForTable () { const t = this; let e = t._cache.all || []; if (e.length) { return e } const i = t.getDataTimestamps(); const n = t.getLabelTimestamps(); return e = i.length && n.length ? t.normalize(i.concat(n)) : i.length ? i : n, e = t._cache.all = e, e }getPixelForValue (t, e) { const i = this; const n = i._offsets; const o = i._normalized && i._maxIndex > 0 && !$(e) ? e / i._maxIndex : i.getDecimalForValue(t); return i.getPixelForDecimal((n.start + o) * n.factor) }getDecimalForValue (t) { return Qs(this._table, t) / this._maxIndex }getValueForPixel (t) { const e = this; const i = e._offsets; const n = e.getDecimalForPixel(t) / i.factor - i.end; return Qs(e._table, n * this._maxIndex, !0) }}Js.id = 'timeseries', Js.defaults = Zs.defaults; const ta = Object.freeze({ __proto__: null, CategoryScale: Rs, LinearScale: Es, LogarithmicScale: zs, RadialLinearScale: js, TimeScale: Zs, TimeSeriesScale: Js }); return Jn.register(bo, ta, Yo, As), Jn.helpers = { ...Cn }, Jn._adapters = oo, Jn.Animation = _i, Jn.Animations = vi, Jn.animator = a, Jn.controllers = An.controllers.items, Jn.DatasetController = Li, Jn.Element = Ei, Jn.elements = Yo, Jn.Interaction = Oe, Jn.layouts = Ge, Jn.platforms = ui, Jn.Scale = Xi, Jn.Ticks = Vi, Object.assign(Jn, bo, ta, Yo, As, ui), Jn.Chart = Jn, typeof window !== 'undefined' && (window.Chart = Jn), Jn
}))
