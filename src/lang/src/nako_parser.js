/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
    function ctor() {
        this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
    }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function (expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
                escapedParts += expectation.parts[i] instanceof Array
                    ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                    : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function (expectation) {
            return "any character";
        },

        end: function (expectation) {
            return "end of input";
        },

        other: function (expectation) {
            return expectation.description;
        }
    };

    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function (ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return '\\x' + hex(ch);
            });
    }

    function classEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/\]/g, '\\]')
            .replace(/\^/g, '\\^')
            .replace(/-/g, '\\-')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function (ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return '\\x' + hex(ch);
            });
    }

    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
        var descriptions = new Array(expected.length),
            i, j;

        for (i = 0; i < expected.length; i++) {
            descriptions[i] = describeExpectation(expected[i]);
        }

        descriptions.sort();

        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }

        switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + " or " + descriptions[1];

            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }

    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = {start: peg$parsestart},
        peg$startRuleFunction = peg$parsestart,

        peg$c0 = function () {
            return {"type": "EOS", "memo": "indent"};
        },
        peg$c1 = function () {
            return {"type": "EOS"};
        },
        peg$c2 = function () {
            return {type: "EOS", memo: "---"};
        },
        peg$c3 = function (s) {
            return s;
        },
        peg$c4 = "\u9055\u3048\u3070",
        peg$c5 = peg$literalExpectation("\u9055\u3048\u3070", false),
        peg$c6 = "\u3053\u3053\u307E\u3067",
        peg$c7 = peg$literalExpectation("\u3053\u3053\u307E\u3067", false),
        peg$c8 = "\u30FC\u30FC\u30FC",
        peg$c9 = peg$literalExpectation("\u30FC\u30FC\u30FC", false),
        peg$c10 = "\u30FC",
        peg$c11 = peg$literalExpectation("\u30FC", false),
        peg$c12 = "---",
        peg$c13 = peg$literalExpectation("---", false),
        peg$c14 = "-",
        peg$c15 = peg$literalExpectation("-", false),
        peg$c16 = "\u629C\u3051\u308B",
        peg$c17 = peg$literalExpectation("\u629C\u3051\u308B", false),
        peg$c18 = function () {
            return {type: "break"};
        },
        peg$c19 = "\u7D9A\u3051\u308B",
        peg$c20 = peg$literalExpectation("\u7D9A\u3051\u308B", false),
        peg$c21 = function () {
            return {type: "continue"};
        },
        peg$c22 = "\u7D42\u308F\u308B",
        peg$c23 = peg$literalExpectation("\u7D42\u308F\u308B", false),
        peg$c24 = "\u7D42\u4E86",
        peg$c25 = peg$literalExpectation("\u7D42\u4E86", false),
        peg$c26 = function () {
            return {type: "end"};
        },
        peg$c27 = "\u25CF",
        peg$c28 = peg$literalExpectation("\u25CF", false),
        peg$c29 = "(",
        peg$c30 = peg$literalExpectation("(", false),
        peg$c31 = ")",
        peg$c32 = peg$literalExpectation(")", false),
        peg$c33 = function (name, args, b) {
            return {type: "def_func", "name": name, "args": args, block: b};
        },
        peg$c34 = function (w, j) {
            return {"word": w, "josi": j};
        },
        peg$c35 = "\u3092",
        peg$c36 = peg$literalExpectation("\u3092", false),
        peg$c37 = "\u3067",
        peg$c38 = peg$literalExpectation("\u3067", false),
        peg$c39 = "\u304B\u3089",
        peg$c40 = peg$literalExpectation("\u304B\u3089", false),
        peg$c41 = "\u307E\u3067",
        peg$c42 = peg$literalExpectation("\u307E\u3067", false),
        peg$c43 = "\u7E70\u308A\u8FD4\u3059",
        peg$c44 = peg$literalExpectation("\u7E70\u308A\u8FD4\u3059", false),
        peg$c45 = "\u7E70\u308A\u8FD4\u3057",
        peg$c46 = peg$literalExpectation("\u7E70\u308A\u8FD4\u3057", false),
        peg$c47 = function (i, kara, made, b) {
            return {"type": "for", "from": kara, "to": made, "block": b, "word": i};
        },
        peg$c48 = "\u56DE",
        peg$c49 = peg$literalExpectation("\u56DE", false),
        peg$c50 = function (cnt, b) {
            return {"type": "repeat_times", "value": cnt, "block": b};
        },
        peg$c51 = "\u306E\u9593",
        peg$c52 = peg$literalExpectation("\u306E\u9593", false),
        peg$c53 = function (expr, b) {
            return {"type": "while", "cond": expr, "block": b};
        },
        peg$c54 = "\u3082\u3057",
        peg$c55 = peg$literalExpectation("\u3082\u3057", false),
        peg$c56 = function (expr, tb, fb) {
            return {"type": "if", "expr": expr, "block": tb, "false_block": fb};
        },
        peg$c57 = function (expr, tb) {
            return {"type": "if", "expr": expr, "block": tb, "false_block": []};
        },
        peg$c58 = function (expr, t, f) {
            return {"type": "if", "expr": expr, "block": t, "false_block": f};
        },
        peg$c59 = function (expr, t) {
            return {"type": "if", "expr": expr, "block": t, false_block: []};
        },
        peg$c60 = "\u304C",
        peg$c61 = peg$literalExpectation("\u304C", false),
        peg$c62 = function (a, b) {
            return {type: "calc", left: a, right: b, operator: "=="};
        },
        peg$c63 = function (a, b, op) {
            return {type: "calc", left: a, right: b, operator: op};
        },
        peg$c64 = "\u7B49\u3057\u3044",
        peg$c65 = peg$literalExpectation("\u7B49\u3057\u3044", false),
        peg$c66 = function () {
            return "==";
        },
        peg$c67 = "\u8D85",
        peg$c68 = peg$literalExpectation("\u8D85", false),
        peg$c69 = function () {
            return ">";
        },
        peg$c70 = "\u672A\u6E80",
        peg$c71 = peg$literalExpectation("\u672A\u6E80", false),
        peg$c72 = function () {
            return "<";
        },
        peg$c73 = "\u4EE5\u4E0A",
        peg$c74 = peg$literalExpectation("\u4EE5\u4E0A", false),
        peg$c75 = function () {
            return ">=";
        },
        peg$c76 = "\u4EE5\u4E0B",
        peg$c77 = peg$literalExpectation("\u4EE5\u4E0B", false),
        peg$c78 = function () {
            return "<=";
        },
        peg$c79 = "\u7570\u306A\u308B",
        peg$c80 = peg$literalExpectation("\u7570\u306A\u308B", false),
        peg$c81 = function () {
            return "!=";
        },
        peg$c82 = function (v) {
            return v;
        },
        peg$c83 = function (v, j) {
            return {"type": "arg", "value": v, "josi": j}
        },
        peg$c84 = function (args, name) {
            return {type: "func", "args": args, "name": name};
        },
        peg$c85 = "=",
        peg$c86 = peg$literalExpectation("=", false),
        peg$c87 = "\uFF1D",
        peg$c88 = peg$literalExpectation("\uFF1D", false),
        peg$c89 = function (name, value) {
            return {"type": "let", "name": name, "value": value};
        },
        peg$c90 = "[",
        peg$c91 = peg$literalExpectation("[", false),
        peg$c92 = "]",
        peg$c93 = peg$literalExpectation("]", false),
        peg$c94 = function (name, i, value) {
            return {
                "type": "let_array", "name": name, "index": i.map(e => {
                    return e[1];
                }), "value": value
            };
        },
        peg$c95 = "\u306B",
        peg$c96 = peg$literalExpectation("\u306B", false),
        peg$c97 = "\u3078",
        peg$c98 = peg$literalExpectation("\u3078", false),
        peg$c99 = "\u4EE3\u5165",
        peg$c100 = peg$literalExpectation("\u4EE3\u5165", false),
        peg$c101 = function (name, value) {
            const v = value ? value[0] : {type: "variable", value: "それ"};
            return {"type": "let", "name": name, "value": v};
        },
        peg$c102 = "\n",
        peg$c103 = peg$literalExpectation("\n", false),
        peg$c104 = function () {
            return {type: "EOS"};
        },
        peg$c105 = ";",
        peg$c106 = peg$literalExpectation(";", false),
        peg$c107 = "\u3002",
        peg$c108 = peg$literalExpectation("\u3002", false),
        peg$c109 = function (n) {
            return {type: "EOS"};
        },
        peg$c110 = /^[ \t\r\u3001\u3000,]/,
        peg$c111 = peg$classExpectation([" ", "\t", "\r", "\u3001", "\u3000", ","], false, false),
        peg$c112 = /^[\t\r\n \u3000]/,
        peg$c113 = peg$classExpectation(["\t", "\r", "\n", " ", "\u3000"], false, false),
        peg$c114 = /^[ \u3000\t\u30FB]/,
        peg$c115 = peg$classExpectation([" ", "\u3000", "\t", "\u30FB"], false, false),
        peg$c116 = "/*",
        peg$c117 = peg$literalExpectation("/*", false),
        peg$c118 = "*/",
        peg$c119 = peg$literalExpectation("*/", false),
        peg$c120 = peg$anyExpectation(),
        peg$c121 = "//",
        peg$c122 = peg$literalExpectation("//", false),
        peg$c123 = "#",
        peg$c124 = peg$literalExpectation("#", false),
        peg$c125 = "\uFF03",
        peg$c126 = peg$literalExpectation("\uFF03", false),
        peg$c127 = "\u203B",
        peg$c128 = peg$literalExpectation("\u203B", false),
        peg$c129 = /^[^\n]/,
        peg$c130 = peg$classExpectation(["\n"], true, false),
        peg$c131 = function (n) {
            return {type: "comment", value: n};
        },
        peg$c132 = function (f, v) {
            if (f === "-") {
                v *= -1;
            }
            return {"type": "number", "value": v};
        },
        peg$c133 = "0x",
        peg$c134 = peg$literalExpectation("0x", false),
        peg$c135 = /^[0-9a-z]/i,
        peg$c136 = peg$classExpectation([["0", "9"], ["a", "z"]], false, true),
        peg$c137 = function (x) {
            return parseInt("0x" + x, 16);
        },
        peg$c138 = /^[0-9]/,
        peg$c139 = peg$classExpectation([["0", "9"]], false, false),
        peg$c140 = ".",
        peg$c141 = peg$literalExpectation(".", false),
        peg$c142 = function (d1, d2) {
            return parseFloat(d1 + "." + d2);
        },
        peg$c143 = function (n) {
            return parseInt(n, 10);
        },
        peg$c144 = /^[\uFF10-\uFF19]/,
        peg$c145 = peg$classExpectation([["\uFF10", "\uFF19"]], false, false),
        peg$c146 = function (n) {
            return parseInt(convToHalfS(n), 10);
        },
        peg$c147 = "\u5186",
        peg$c148 = peg$literalExpectation("\u5186", false),
        peg$c149 = "\u500B",
        peg$c150 = peg$literalExpectation("\u500B", false),
        peg$c151 = "\u4EBA",
        peg$c152 = peg$literalExpectation("\u4EBA", false),
        peg$c153 = "\u518A",
        peg$c154 = peg$literalExpectation("\u518A", false),
        peg$c155 = "\u5339",
        peg$c156 = peg$literalExpectation("\u5339", false),
        peg$c157 = "\u672C",
        peg$c158 = peg$literalExpectation("\u672C", false),
        peg$c159 = "\u679A",
        peg$c160 = peg$literalExpectation("\u679A", false),
        peg$c161 = "\u53F0",
        peg$c162 = peg$literalExpectation("\u53F0", false),
        peg$c163 = "\u4F4D",
        peg$c164 = peg$literalExpectation("\u4F4D", false),
        peg$c165 = "\u624D",
        peg$c166 = peg$literalExpectation("\u624D", false),
        peg$c167 = "\u4EF6",
        peg$c168 = peg$literalExpectation("\u4EF6", false),
        peg$c169 = "\u7FBD",
        peg$c170 = peg$literalExpectation("\u7FBD", false),
        peg$c171 = "\u982D",
        peg$c172 = peg$literalExpectation("\u982D", false),
        peg$c173 = "\u90E8",
        peg$c174 = peg$literalExpectation("\u90E8", false),
        peg$c175 = "\u5DFB",
        peg$c176 = peg$literalExpectation("\u5DFB", false),
        peg$c177 = "\"",
        peg$c178 = peg$literalExpectation("\"", false),
        peg$c179 = /^[^"]/,
        peg$c180 = peg$classExpectation(["\""], true, false),
        peg$c181 = "'",
        peg$c182 = peg$literalExpectation("'", false),
        peg$c183 = /^[^']/,
        peg$c184 = peg$classExpectation(["'"], true, false),
        peg$c185 = "\u300E",
        peg$c186 = peg$literalExpectation("\u300E", false),
        peg$c187 = /^[^\u300F]/,
        peg$c188 = peg$classExpectation(["\u300F"], true, false),
        peg$c189 = "\u300F",
        peg$c190 = peg$literalExpectation("\u300F", false),
        peg$c191 = function (s) {
            return {type: "string", value: s, mode: "raw"};
        },
        peg$c192 = "\u300C",
        peg$c193 = peg$literalExpectation("\u300C", false),
        peg$c194 = "\u300D",
        peg$c195 = peg$literalExpectation("\u300D", false),
        peg$c196 = function () {
            return chars.join("");
        },
        peg$c197 = /^[^\u300D]/,
        peg$c198 = peg$classExpectation(["\u300D"], true, false),
        peg$c199 = function (s) {
            return {type: "string", value: s, mode: "ex"};
        },
        peg$c200 = "null",
        peg$c201 = peg$literalExpectation("null", false),
        peg$c202 = "\u7A7A",
        peg$c203 = peg$literalExpectation("\u7A7A", false),
        peg$c204 = function () {
            return {type: "null"};
        },
        peg$c205 = function (b) {
            return {type: "bool", value: b};
        },
        peg$c206 = "\u306F\u3044",
        peg$c207 = peg$literalExpectation("\u306F\u3044", false),
        peg$c208 = "\u771F",
        peg$c209 = peg$literalExpectation("\u771F", false),
        peg$c210 = function () {
            return true;
        },
        peg$c211 = "\u3044\u3044\u3048",
        peg$c212 = peg$literalExpectation("\u3044\u3044\u3048", false),
        peg$c213 = "\u507D",
        peg$c214 = peg$literalExpectation("\u507D", false),
        peg$c215 = function () {
            return false;
        },
        peg$c216 = "\u306F",
        peg$c217 = peg$literalExpectation("\u306F", false),
        peg$c218 = "\u3057\u3066",
        peg$c219 = peg$literalExpectation("\u3057\u3066", false),
        peg$c220 = "\u3066",
        peg$c221 = peg$literalExpectation("\u3066", false),
        peg$c222 = "\u306B\u3064\u3044\u3066",
        peg$c223 = peg$literalExpectation("\u306B\u3064\u3044\u3066", false),
        peg$c224 = "\u306A\u3089\u3070",
        peg$c225 = peg$literalExpectation("\u306A\u3089\u3070", false),
        peg$c226 = "\u306A\u3089",
        peg$c227 = peg$literalExpectation("\u306A\u3089", false),
        peg$c228 = "\u3068\u306F",
        peg$c229 = peg$literalExpectation("\u3068\u306F", false),
        peg$c230 = "\u3060\u3051",
        peg$c231 = peg$literalExpectation("\u3060\u3051", false),
        peg$c232 = "\u3068",
        peg$c233 = peg$literalExpectation("\u3068", false),
        peg$c234 = "\u306E",
        peg$c235 = peg$literalExpectation("\u306E", false),
        peg$c236 = function (josi_name) {
            return josi_name;
        },
        peg$c237 = /^[\u4E00-\u9FCF]/,
        peg$c238 = peg$classExpectation([["\u4E00", "\u9FCF"]], false, false),
        peg$c239 = /^[\u3041-\u3093]/,
        peg$c240 = peg$classExpectation([["\u3041", "\u3093"]], false, false),
        peg$c241 = /^[\u30A1-\u30F6\u30FC]/,
        peg$c242 = peg$classExpectation([["\u30A1", "\u30F6"], "\u30FC"], false, false),
        peg$c243 = /^[_a-zA-Z]/,
        peg$c244 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"]], false, false),
        peg$c245 = /^[\uFF41-\uFF5A\uFF21-\uFF3A\uFF3F]/,
        peg$c246 = peg$classExpectation([["\uFF41", "\uFF5A"], ["\uFF21", "\uFF3A"], "\uFF3F"], false, false),
        peg$c247 = function (w) {
            return w;
        },
        peg$c248 = peg$otherExpectation("\u5358\u8A9E"),
        peg$c249 = function (chars) {
            return {type: "variable", value: convToHalfS(chars)};
        },
        peg$c250 = /^[0-9a-zA-Z_\uFF10-\uFF19\uFF41-\uFF5A\uFF21-\uFF3A\uFF3F]/,
        peg$c251 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], "_", ["\uFF10", "\uFF19"], ["\uFF41", "\uFF5A"], ["\uFF21", "\uFF3A"], "\uFF3F"], false, false),
        peg$c252 = function (a, b) {
            return convToHalfS(a + b ? b : "");
        },
        peg$c253 = function (w, i) {
            return {
                type: "ref_array", name: w, index: i.map(e => {
                    return e[1];
                })
            };
        },
        peg$c254 = function (w, ar) {
            return {type: "calc_func", args: ar, name: w};
        },
        peg$c255 = ",",
        peg$c256 = peg$literalExpectation(",", false),
        peg$c257 = function (v1, v2) {
            const a = [v1];
            if (v2) v2.forEach(e => {
                a.push(e[2]);
            });
            return a;
        },
        peg$c258 = "||",
        peg$c259 = peg$literalExpectation("||", false),
        peg$c260 = function (left, right) {
            return {type: "calc", operator: "||", "left": left, "right": right};
        },
        peg$c261 = "&&",
        peg$c262 = peg$literalExpectation("&&", false),
        peg$c263 = function (left, right) {
            return {type: "calc", operator: "&&", "left": left, "right": right};
        },
        peg$c264 = "<",
        peg$c265 = peg$literalExpectation("<", false),
        peg$c266 = "\uFF1C",
        peg$c267 = peg$literalExpectation("\uFF1C", false),
        peg$c268 = function (left, right) {
            return {type: "calc", operator: "<", "left": left, "right": right};
        },
        peg$c269 = "<=",
        peg$c270 = peg$literalExpectation("<=", false),
        peg$c271 = "\uFF1C\uFF1D",
        peg$c272 = peg$literalExpectation("\uFF1C\uFF1D", false),
        peg$c273 = "\u2266",
        peg$c274 = peg$literalExpectation("\u2266", false),
        peg$c275 = function (left, right) {
            return {type: "calc", operator: "<=", "left": left, "right": right};
        },
        peg$c276 = ">",
        peg$c277 = peg$literalExpectation(">", false),
        peg$c278 = "\uFF1E",
        peg$c279 = peg$literalExpectation("\uFF1E", false),
        peg$c280 = function (left, right) {
            return {type: "calc", operator: ">", "left": left, "right": right};
        },
        peg$c281 = ">=",
        peg$c282 = peg$literalExpectation(">=", false),
        peg$c283 = "\uFF1E\uFF1D",
        peg$c284 = peg$literalExpectation("\uFF1E\uFF1D", false),
        peg$c285 = "\u2267",
        peg$c286 = peg$literalExpectation("\u2267", false),
        peg$c287 = function (left, right) {
            return {type: "calc", operator: ">=", "left": left, "right": right};
        },
        peg$c288 = "==",
        peg$c289 = peg$literalExpectation("==", false),
        peg$c290 = function (left, right) {
            return {type: "calc", operator: "==", "left": left, "right": right};
        },
        peg$c291 = "!=",
        peg$c292 = peg$literalExpectation("!=", false),
        peg$c293 = "\uFF01\uFF1D",
        peg$c294 = peg$literalExpectation("\uFF01\uFF1D", false),
        peg$c295 = "<>",
        peg$c296 = peg$literalExpectation("<>", false),
        peg$c297 = "\uFF1C\uFF1E",
        peg$c298 = peg$literalExpectation("\uFF1C\uFF1E", false),
        peg$c299 = "\u2260",
        peg$c300 = peg$literalExpectation("\u2260", false),
        peg$c301 = function (left, right) {
            return {type: "calc", operator: "!=", "left": left, "right": right};
        },
        peg$c302 = "+",
        peg$c303 = peg$literalExpectation("+", false),
        peg$c304 = "\uFF0B",
        peg$c305 = peg$literalExpectation("\uFF0B", false),
        peg$c306 = function (left, right) {
            return {type: "calc", operator: "+", "left": left, "right": right};
        },
        peg$c307 = "\u2212",
        peg$c308 = peg$literalExpectation("\u2212", false),
        peg$c309 = function (left, right) {
            return {type: "calc", operator: "-", "left": left, "right": right};
        },
        peg$c310 = "&",
        peg$c311 = peg$literalExpectation("&", false),
        peg$c312 = "\uFF06",
        peg$c313 = peg$literalExpectation("\uFF06", false),
        peg$c314 = function (left, right) {
            return {type: "calc", operator: "&", "left": left, "right": right};
        },
        peg$c315 = "*",
        peg$c316 = peg$literalExpectation("*", false),
        peg$c317 = "\uFF0A",
        peg$c318 = peg$literalExpectation("\uFF0A", false),
        peg$c319 = "\xD7",
        peg$c320 = peg$literalExpectation("\xD7", false),
        peg$c321 = function (left, right) {
            return {type: "calc", operator: "*", "left": left, "right": right};
        },
        peg$c322 = "/",
        peg$c323 = peg$literalExpectation("/", false),
        peg$c324 = "\uFF0F",
        peg$c325 = peg$literalExpectation("\uFF0F", false),
        peg$c326 = "\xF7",
        peg$c327 = peg$literalExpectation("\xF7", false),
        peg$c328 = function (left, right) {
            return {type: "calc", operator: "/", "left": left, "right": right};
        },
        peg$c329 = "%",
        peg$c330 = peg$literalExpectation("%", false),
        peg$c331 = "\uFF05",
        peg$c332 = peg$literalExpectation("\uFF05", false),
        peg$c333 = "\uFF08",
        peg$c334 = peg$literalExpectation("\uFF08", false),
        peg$c335 = "\uFF09",
        peg$c336 = peg$literalExpectation("\uFF09", false),
        peg$c337 = function (a) {
            return {type: "json_array", value: a};
        },
        peg$c338 = "{",
        peg$c339 = peg$literalExpectation("{", false),
        peg$c340 = "}",
        peg$c341 = peg$literalExpectation("}", false),
        peg$c342 = function (a) {
            return {type: "json_obj", value: a};
        },
        peg$c343 = function () {
            return {type: "json_array", value: []};
        },
        peg$c344 = function () {
            return {type: "json_obj", value: []};
        },
        peg$c345 = function (a1, a2) {
            const a = [a1];
            a2.forEach(e => {
                a.push(e[2]);
            });
            return a;
        },
        peg$c346 = function (a1, a2) {
            const a = a2.map(e => {
                return e[2];
            });
            a.unshift(a1);
            return a;
        },
        peg$c347 = function (a) {
            return [a]
        },
        peg$c348 = ":",
        peg$c349 = peg$literalExpectation(":", false),
        peg$c350 = function (key, value) {
            return {"key": key, "value": value};
        },

        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{line: 1, column: 1}],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location
        );
    }

    function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
        return {type: "literal", text: text, ignoreCase: ignoreCase};
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
        return {type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase};
    }

    function peg$anyExpectation() {
        return {type: "any"};
    }

    function peg$endExpectation() {
        return {type: "end"};
    }

    function peg$otherExpectation(description) {
        return {type: "other", description: description};
    }

    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p;

        if (details) {
            return details;
        } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }

            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };

            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                } else {
                    details.column++;
                }

                p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
        }
    }

    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails = peg$computePosDetails(endPos);

        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
            peg$SyntaxError.buildMessage(expected, found),
            expected,
            found,
            location
        );
    }

    function peg$parsestart() {
        var s0, s1;

        var key = peg$currPos * 74 + 0,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = [];
        s1 = peg$parsesentence();
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsesentence();
            }
        } else {
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsesentence() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 1,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsecomment();
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseindent();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseEOS();
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parseEOS();
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c1();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$parseend();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsecontinue();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsebreak();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsedef_func();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseif_stmt();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parsewhie_stmt();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parserepeat_times_stmt();
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parsefor_stmt();
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parselet_stmt();
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsekokomade();
                                                        if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c2();
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$parsefunc_call_stmt();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsesentence2() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 2,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseblock_end();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
            s1 = void 0;
        } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsesentence();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseblock() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 3,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesentence2();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesentence2();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseblock_end() {
        var s0;

        var key = peg$currPos * 74 + 4,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsekokomade();
        if (s0 === peg$FAILED) {
            s0 = peg$parseelse();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseelse() {
        var s0;

        var key = peg$currPos * 74 + 5,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 3) === peg$c4) {
            s0 = peg$c4;
            peg$currPos += 3;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c5);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsekokomade() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 6,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c6) {
            s1 = peg$c6;
            peg$currPos += 4;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c8) {
                s2 = peg$c8;
                peg$currPos += 3;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                if (input.charCodeAt(peg$currPos) === 12540) {
                    s4 = peg$c10;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c11);
                    }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (input.charCodeAt(peg$currPos) === 12540) {
                        s4 = peg$c10;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c11);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c12) {
                    s2 = peg$c12;
                    peg$currPos += 3;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s4 = peg$c14;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s4 = peg$c14;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c15);
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS();
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsebreak() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 7,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c17);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c18();
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsecontinue() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 8,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c19) {
            s1 = peg$c19;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c20);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21();
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseend() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 9,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c23);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c24) {
                s1 = peg$c24;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c25);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOS();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26();
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsedef_func() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        var key = peg$currPos * 74 + 10,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 9679) {
            s1 = peg$c27;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c28);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseword();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s4 = peg$c29;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c30);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parsedef_func_arg();
                        while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parsedef_func_arg();
                        }
                        if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s6 = peg$c31;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c32);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse__();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseLF();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseblock();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parsekokomade();
                                            if (s10 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c33(s2, s5, s9);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsedef_func_arg() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 11,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseword();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsejosi();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c34(s1, s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsefor_stmt() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

        var key = peg$currPos * 74 + 12,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseword();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12434) {
                s2 = peg$c35;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c36);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 12391) {
                    s2 = peg$c37;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c38);
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseand_or();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c39) {
                            s5 = peg$c39;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c40);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseand_or();
                                if (s7 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c41) {
                                        s8 = peg$c41;
                                        peg$currPos += 2;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c42);
                                        }
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse__();
                                        if (s9 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 4) === peg$c43) {
                                                s10 = peg$c43;
                                                peg$currPos += 4;
                                            } else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c44);
                                                }
                                            }
                                            if (s10 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c45) {
                                                    s10 = peg$c45;
                                                    peg$currPos += 4;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c46);
                                                    }
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseLF();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseblock();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseblock_end();
                                                        if (s13 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c47(s1, s4, s7, s12);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parserepeat_times_stmt() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        var key = peg$currPos * 74 + 13,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseint();
        if (s1 === peg$FAILED) {
            s1 = peg$parseintz();
        }
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 22238) {
                s2 = peg$c48;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parsesentence();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEOS();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c50(s1, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseint();
            if (s1 === peg$FAILED) {
                s1 = peg$parseintz();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 22238) {
                    s2 = peg$c48;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c49);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse__();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseLF();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseblock();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseblock_end();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c50(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseparenL();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseand_or();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseparenR();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 22238) {
                                s4 = peg$c48;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c49);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse__();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsesentence();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseEOS();
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c50(s2, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseparenL();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseand_or();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseparenR();
                            if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 22238) {
                                    s4 = peg$c48;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c49);
                                    }
                                }
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse__();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parseLF();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseblock();
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parseblock_end();
                                                if (s8 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c50(s2, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsewhie_stmt() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 74 + 14,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseparenL();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseand_or();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseparenR();
                if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c51) {
                        s4 = peg$c51;
                        peg$currPos += 2;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c52);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseLF();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseblock();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseblock_end();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c53(s2, s6);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseif_stmt() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

        var key = peg$currPos * 74 + 15,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c54) {
            s1 = peg$c54;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c55);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseif_expr();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsejosi_naraba();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseLF();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseblock();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse__();
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseelse();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse__();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseLF();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parse__();
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parseblock();
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parseblock_end();
                                                                    if (s16 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c56(s3, s9, s15);
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c54) {
                s1 = peg$c54;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c55);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseif_expr();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsejosi_naraba();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse__();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseLF();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse__();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseblock();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseblock_end();
                                                if (s10 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c57(s3, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c54) {
                    s1 = peg$c54;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c55);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseif_expr();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsejosi_naraba();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse__();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsesentence();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseEOS();
                                            if (s8 === peg$FAILED) {
                                                s8 = null;
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseelse();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsesentence();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseEOS();
                                                        if (s11 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c58(s3, s7, s10);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c54) {
                        s1 = peg$c54;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c55);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse__();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseif_expr();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parse__();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsejosi_naraba();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parse__();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parsesentence();
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parseEOS();
                                                if (s8 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c59(s3, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseif_expr() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 74 + 16,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseif_value();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12364) {
                s2 = peg$c60;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c61);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseif_value();
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    peg$silentFails++;
                    s5 = peg$parsejosi_naraba();
                    peg$silentFails--;
                    if (s5 !== peg$FAILED) {
                        peg$currPos = s4;
                        s4 = void 0;
                    } else {
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c62(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseif_value();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsejosi();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse__();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseif_value();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            s6 = peg$parsejosi();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse__();
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseif_jop();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c63(s1, s4, s6);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseand_or();
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseif_jop() {
        var s0, s1;

        var key = peg$currPos * 74 + 17,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c64) {
            s1 = peg$c64;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c65);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c66();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 36229) {
                s1 = peg$c67;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c68);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c69();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c70) {
                    s1 = peg$c70;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c71);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c72();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c73) {
                        s1 = peg$c73;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c75();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c76) {
                            s1 = peg$c76;
                            peg$currPos += 2;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c77);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c78();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c79) {
                                s1 = peg$c79;
                                peg$currPos += 3;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c80);
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c81();
                            }
                            s0 = s1;
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseif_value() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 18,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 === peg$FAILED) {
            s1 = peg$parsestring();
            if (s1 === peg$FAILED) {
                s1 = peg$parseword();
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c82(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseparenL();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseand_or();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseparenR();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c82(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsefunc_arg() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 19,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseand_or();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsejosi();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c83(s1, s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsefunc_call_stmt() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 20,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsefunc_arg();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsefunc_arg();
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseword();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseEOS();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c84(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parselet_stmt() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 74 + 21,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseword();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c85;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c86);
                    }
                }
                if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 65309) {
                        s3 = peg$c87;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c88);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$parsejosi_eq();
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseand_or();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseEOS();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c89(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseword();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s4 = peg$c90;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseand_or();
                    if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s6 = peg$c92;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c93);
                            }
                        }
                        if (s6 !== peg$FAILED) {
                            s4 = [s4, s5, s6];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                            s4 = peg$c90;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c91);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseand_or();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s6 = peg$c92;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c93);
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    s4 = [s4, s5, s6];
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                } else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse__();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s4 = peg$c85;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c86);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65309) {
                                s4 = peg$c87;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c88);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                s4 = peg$parsejosi_eq();
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse__();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseand_or();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseEOS();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c94(s1, s2, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseword();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 12395) {
                        s2 = peg$c95;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c96);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 12408) {
                            s2 = peg$c97;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c98);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = peg$parseand_or();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 12434) {
                                s5 = peg$c35;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c36);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c99) {
                                s4 = peg$c99;
                                peg$currPos += 2;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c100);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseEOS();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c101(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parse__() {
        var s0, s1;

        var key = peg$currPos * 74 + 22,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = [];
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
            s1 = peg$parserange_comment();
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsewhitespace();
            if (s1 === peg$FAILED) {
                s1 = peg$parserange_comment();
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseLF() {
        var s0, s1;

        var key = peg$currPos * 74 + 23,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 10) {
            s1 = peg$c102;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c103);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c104();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseEOS() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 24,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parse__();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
                s2 = peg$c105;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c106);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = peg$parseLF();
                if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 12290) {
                        s2 = peg$c107;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c108);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$parsejosi_continue();
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c109(s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsewhitespace() {
        var s0;

        var key = peg$currPos * 74 + 25,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c110.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c111);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSPC() {
        var s0, s1;

        var key = peg$currPos * 74 + 26,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = [];
        if (peg$c112.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c113);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c112.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c113);
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseindent() {
        var s0, s1;

        var key = peg$currPos * 74 + 27,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = [];
        if (peg$c114.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c115);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c114.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c115);
                    }
                }
            }
        } else {
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parserange_comment() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 74 + 28,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c116) {
            s1 = peg$c116;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c117);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c118) {
                s6 = peg$c118;
                peg$currPos += 2;
            } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c119);
                }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
                s5 = void 0;
            } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c120);
                    }
                }
                if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2) === peg$c118) {
                    s6 = peg$c118;
                    peg$currPos += 2;
                } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c119);
                    }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                    s5 = void 0;
                } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c120);
                        }
                    }
                    if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c118) {
                    s3 = peg$c118;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c119);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseline_comment() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 29,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c121) {
            s1 = peg$c121;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c122);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c123;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c124);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65283) {
                    s1 = peg$c125;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c126);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 8251) {
                        s1 = peg$c127;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c128);
                        }
                    }
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c129.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c130);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c129.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c130);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                    s3 = peg$c102;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c103);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsecomment() {
        var s0, s1;

        var key = peg$currPos * 74 + 30,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parserange_comment();
        if (s1 === peg$FAILED) {
            s1 = peg$parseline_comment();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c131(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsenumber() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 31,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c14;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c15);
            }
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsehex();
            if (s2 === peg$FAILED) {
                s2 = peg$parsefloat();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseint();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseintz();
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsejosuusi();
                if (s3 === peg$FAILED) {
                    s3 = null;
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c132(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsehex() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 32,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c133) {
            s1 = peg$c133;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c134);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c135.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c136);
                }
            }
            if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c135.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c136);
                        }
                    }
                }
            } else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c137(s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsefloat() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 33,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$c138.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c139);
            }
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c138.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c139);
                    }
                }
            }
        } else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        } else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c140;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c141);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                if (peg$c138.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c139);
                    }
                }
                if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c138.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c139);
                            }
                        }
                    }
                } else {
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                } else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c142(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseint() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 34,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$c138.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c139);
            }
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c138.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c139);
                    }
                }
            }
        } else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        } else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c143(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseintz() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 35,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$c144.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c145);
            }
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c144.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c145);
                    }
                }
            }
        } else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        } else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c146(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosuusi() {
        var s0;

        var key = peg$currPos * 74 + 36,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 20870) {
            s0 = peg$c147;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c148);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 20491) {
                s0 = peg$c149;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c150);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 20154) {
                    s0 = peg$c151;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c152);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 20874) {
                        s0 = peg$c153;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c154);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 21305) {
                            s0 = peg$c155;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c156);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 26412) {
                                s0 = peg$c157;
                                peg$currPos++;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c158);
                                }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 26522) {
                                    s0 = peg$c159;
                                    peg$currPos++;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c160);
                                    }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 21488) {
                                        s0 = peg$c161;
                                        peg$currPos++;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c162);
                                        }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 20301) {
                                            s0 = peg$c163;
                                            peg$currPos++;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c164);
                                            }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 25165) {
                                                s0 = peg$c165;
                                                peg$currPos++;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c166);
                                                }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 20214) {
                                                    s0 = peg$c167;
                                                    peg$currPos++;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c168);
                                                    }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 32701) {
                                                        s0 = peg$c169;
                                                        peg$currPos++;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c170);
                                                        }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 38957) {
                                                            s0 = peg$c171;
                                                            peg$currPos++;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c172);
                                                            }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 37096) {
                                                                s0 = peg$c173;
                                                                peg$currPos++;
                                                            } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c174);
                                                                }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 24059) {
                                                                    s0 = peg$c175;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c176);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parserawstring_pat() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 37,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c177;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c178);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c179.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c180);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c179.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c180);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c177;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c178);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c181;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c182);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = [];
                if (peg$c183.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c184);
                    }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c183.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c184);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = input.substring(s2, peg$currPos);
                } else {
                    s2 = s3;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s3 = peg$c181;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c182);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c3(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 12302) {
                    s1 = peg$c185;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c186);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = [];
                    if (peg$c187.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c188);
                        }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c187.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c188);
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = input.substring(s2, peg$currPos);
                    } else {
                        s2 = s3;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 12303) {
                            s3 = peg$c189;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c190);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c3(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parserawstring() {
        var s0, s1;

        var key = peg$currPos * 74 + 38,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parserawstring_pat();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c191(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseexstring_pat() {
        var s0, s1, s2;

        var key = peg$currPos * 74 + 39,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 12300) {
            s1 = peg$c192;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c193);
            }
        }
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12301) {
                s2 = peg$c194;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c195);
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c196();
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseexstring() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 40,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 12300) {
            s1 = peg$c192;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c193);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c197.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c198);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c197.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c198);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 12301) {
                    s3 = peg$c194;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c195);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c199(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsestring() {
        var s0;

        var key = peg$currPos * 74 + 41,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parserawstring();
        if (s0 === peg$FAILED) {
            s0 = peg$parseexstring();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsenull() {
        var s0, s1;

        var key = peg$currPos * 74 + 42,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c200) {
            s1 = peg$c200;
            peg$currPos += 4;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c201);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 31354) {
                s1 = peg$c202;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c203);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c204();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsebool() {
        var s0, s1;

        var key = peg$currPos * 74 + 43,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseTRUE();
        if (s1 === peg$FAILED) {
            s1 = peg$parseFALSE();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c205(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTRUE() {
        var s0, s1;

        var key = peg$currPos * 74 + 44,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c206) {
            s0 = peg$c206;
            peg$currPos += 2;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c207);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 30495) {
                s1 = peg$c208;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c209);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c210();
            }
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseFALSE() {
        var s0, s1;

        var key = peg$currPos * 74 + 45,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 3) === peg$c211) {
            s0 = peg$c211;
            peg$currPos += 3;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c212);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 20605) {
                s1 = peg$c213;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c214);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c215();
            }
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi() {
        var s0;

        var key = peg$currPos * 74 + 46,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsejosi_arg();
        if (s0 === peg$FAILED) {
            s0 = peg$parsejosi_eq();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi_eq() {
        var s0;

        var key = peg$currPos * 74 + 47,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 12399) {
            s0 = peg$c216;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c217);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi_continue() {
        var s0;

        var key = peg$currPos * 74 + 48,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c218) {
            s0 = peg$c218;
            peg$currPos += 2;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c219);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12390) {
                s0 = peg$c220;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c221);
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi_arg() {
        var s0, s1;

        var key = peg$currPos * 74 + 49,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c222) {
            s1 = peg$c222;
            peg$currPos += 4;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c223);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c224) {
                s1 = peg$c224;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c225);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c226) {
                    s1 = peg$c226;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c227);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c228) {
                        s1 = peg$c228;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c229);
                        }
                    }
                    if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c39) {
                            s1 = peg$c39;
                            peg$currPos += 2;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c40);
                            }
                        }
                        if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c41) {
                                s1 = peg$c41;
                                peg$currPos += 2;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c42);
                                }
                            }
                            if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c230) {
                                    s1 = peg$c230;
                                    peg$currPos += 2;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c231);
                                    }
                                }
                                if (s1 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 12434) {
                                        s1 = peg$c35;
                                        peg$currPos++;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c36);
                                        }
                                    }
                                    if (s1 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 12395) {
                                            s1 = peg$c95;
                                            peg$currPos++;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c96);
                                            }
                                        }
                                        if (s1 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 12408) {
                                                s1 = peg$c97;
                                                peg$currPos++;
                                            } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c98);
                                                }
                                            }
                                            if (s1 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 12391) {
                                                    s1 = peg$c37;
                                                    peg$currPos++;
                                                } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c38);
                                                    }
                                                }
                                                if (s1 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 12392) {
                                                        s1 = peg$c232;
                                                        peg$currPos++;
                                                    } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c233);
                                                        }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 12364) {
                                                            s1 = peg$c60;
                                                            peg$currPos++;
                                                        } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c61);
                                                            }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 12398) {
                                                                s1 = peg$c234;
                                                                peg$currPos++;
                                                            } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c235);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c236(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi_naraba() {
        var s0;

        var key = peg$currPos * 74 + 50,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 3) === peg$c224) {
            s0 = peg$c224;
            peg$currPos += 3;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c225);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejosi_word_split() {
        var s0;

        var key = peg$currPos * 74 + 51,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsejosi_eq();
        if (s0 === peg$FAILED) {
            s0 = peg$parsejosi_arg();
            if (s0 === peg$FAILED) {
                s0 = peg$parsejosi_continue();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsejosi_naraba();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsekanji() {
        var s0;

        var key = peg$currPos * 74 + 52,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c237.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c238);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsehiragana() {
        var s0;

        var key = peg$currPos * 74 + 53,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c239.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c240);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsekatakana() {
        var s0;

        var key = peg$currPos * 74 + 54,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c241.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c242);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsealphabet() {
        var s0;

        var key = peg$currPos * 74 + 55,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c243.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c244);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsealphaz() {
        var s0;

        var key = peg$currPos * 74 + 56,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (peg$c245.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c246);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsewordchar() {
        var s0, s1;

        var key = peg$currPos * 74 + 57,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsekanji();
        if (s1 === peg$FAILED) {
            s1 = peg$parsehiragana();
            if (s1 === peg$FAILED) {
                s1 = peg$parsekatakana();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsealphabet();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parsealphaz();
                    }
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c247(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseword() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 58,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsejosi_word_split();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
            s4 = void 0;
        } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
            s5 = peg$parsewordchar();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
        } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsejosi_word_split();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = void 0;
                } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parsewordchar();
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
        } else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        } else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c249(s1);
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c248);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsealphachars() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 74 + 59,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsealphabet();
        if (s3 === peg$FAILED) {
            s3 = peg$parsealphaz();
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsealphabet();
                if (s3 === peg$FAILED) {
                    s3 = peg$parsealphaz();
                }
            }
        } else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        } else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c250.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c251);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c250.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c251);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c252(s1, s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsevalue() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 74 + 60,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseword();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s4 = peg$c90;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c91);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseand_or();
                        if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s6 = peg$c92;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c93);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s4 = [s4, s5, s6];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 91) {
                                s4 = peg$c90;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c91);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseand_or();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s6 = peg$c92;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c93);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s4 = [s4, s5, s6];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c253(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseword();
                    if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s2 = peg$c29;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c30);
                            }
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsecalc_func_args();
                            if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s4 = peg$c31;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c32);
                                    }
                                }
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c254(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseword();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsejson_data();
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsecalc_func_args() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        var key = peg$currPos * 74 + 61,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseSPC();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseand_or();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseSPC();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s6 = peg$c255;
                        peg$currPos++;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c256);
                        }
                    }
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseSPC();
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parseand_or();
                            if (s8 !== peg$FAILED) {
                                s6 = [s6, s7, s8];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s6 = peg$c255;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c256);
                            }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseSPC();
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseand_or();
                                if (s8 !== peg$FAILED) {
                                    s6 = [s6, s7, s8];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c257(s2, s4);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseand_or() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 62,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecomp();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c258) {
                    s3 = peg$c258;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c259);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsecomp();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c260(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecomp();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c261) {
                        s3 = peg$c261;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c262);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsecomp();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c263(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parsecomp();
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsecomp() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 63,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseaddsub();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                    s3 = peg$c264;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c265);
                    }
                }
                if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 65308) {
                        s3 = peg$c266;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c267);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseaddsub();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c268(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseaddsub();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c269) {
                        s3 = peg$c269;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c270);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c271) {
                            s3 = peg$c271;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c272);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 8806) {
                                s3 = peg$c273;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c274);
                                }
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseaddsub();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c275(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseaddsub();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s3 = peg$c276;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c277);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65310) {
                                s3 = peg$c278;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c279);
                                }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseaddsub();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c280(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseaddsub();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse__();
                        if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c281) {
                                s3 = peg$c281;
                                peg$currPos += 2;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c282);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c283) {
                                    s3 = peg$c283;
                                    peg$currPos += 2;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c284);
                                    }
                                }
                                if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 8807) {
                                        s3 = peg$c285;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c286);
                                        }
                                    }
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parse__();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseaddsub();
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c287(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseaddsub();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            if (s2 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c288) {
                                    s3 = peg$c288;
                                    peg$currPos += 2;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c289);
                                    }
                                }
                                if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                        s3 = peg$c85;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c86);
                                        }
                                    }
                                    if (s3 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 65309) {
                                            s3 = peg$c87;
                                            peg$currPos++;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c88);
                                            }
                                        }
                                    }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parse__();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parseaddsub();
                                        if (s5 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c290(s1, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseaddsub();
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parse__();
                                if (s2 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c291) {
                                        s3 = peg$c291;
                                        peg$currPos += 2;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c292);
                                        }
                                    }
                                    if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c293) {
                                            s3 = peg$c293;
                                            peg$currPos += 2;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c294);
                                            }
                                        }
                                        if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c295) {
                                                s3 = peg$c295;
                                                peg$currPos += 2;
                                            } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c296);
                                                }
                                            }
                                            if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c297) {
                                                    s3 = peg$c297;
                                                    peg$currPos += 2;
                                                } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c298);
                                                    }
                                                }
                                                if (s3 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 8800) {
                                                        s3 = peg$c299;
                                                        peg$currPos++;
                                                    } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c300);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parse__();
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parseaddsub();
                                            if (s5 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c301(s1, s5);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseaddsub();
                            }
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseaddsub() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 64,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsemuldiv();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                    s3 = peg$c302;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c303);
                    }
                }
                if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 65291) {
                        s3 = peg$c304;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c305);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseaddsub();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c306(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemuldiv();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s3 = peg$c14;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 8722) {
                            s3 = peg$c307;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c308);
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseaddsub();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c309(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsemuldiv();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 38) {
                            s3 = peg$c310;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c311);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65286) {
                                s3 = peg$c312;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c313);
                                }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseaddsub();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c314(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsemuldiv();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsemuldiv() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 65,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseprimary();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                    s3 = peg$c315;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c316);
                    }
                }
                if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 65290) {
                        s3 = peg$c317;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c318);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 215) {
                            s3 = peg$c319;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c320);
                            }
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsemuldiv();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c321(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseprimary();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s3 = peg$c322;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c323);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 65295) {
                            s3 = peg$c324;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c325);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 247) {
                                s3 = peg$c326;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c327);
                                }
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsemuldiv();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c328(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseprimary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 37) {
                            s3 = peg$c329;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65285) {
                                s3 = peg$c331;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c332);
                                }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse__();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsemuldiv();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c328(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseprimary();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseprimary() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 74 + 66,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseparenL();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseand_or();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseparenR();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c82(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parsevalue();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseparenL() {
        var s0;

        var key = peg$currPos * 74 + 67,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 40) {
            s0 = peg$c29;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c30);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 65288) {
                s0 = peg$c333;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c334);
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseparenR() {
        var s0;

        var key = peg$currPos * 74 + 68,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 41) {
            s0 = peg$c31;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c32);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 65289) {
                s0 = peg$c335;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c336);
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejson_data() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 69,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c90;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c91);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSPC();
            if (s2 !== peg$FAILED) {
                s3 = peg$parsejson_array();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseSPC();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s5 = peg$c92;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c93);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c337(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c338;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c339);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSPC();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsejson_obj();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseSPC();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c340;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c341);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c342(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c90;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseSPC();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s3 = peg$c92;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c93);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c343();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s1 = peg$c338;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c339);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseSPC();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s3 = peg$c340;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c341);
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c344();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejson_array() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        var key = peg$currPos * 74 + 70,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsejson_value();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSPC();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c255;
                    peg$currPos++;
                } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c256);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseSPC();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsejson_value();
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parseSPC();
                            if (s8 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8];
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c255;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c256);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseSPC();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsejson_value();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseSPC();
                                    if (s8 !== peg$FAILED) {
                                        s5 = [s5, s6, s7, s8];
                                        s4 = s5;
                                    } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                } else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c345(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsejson_value();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c82(s1);
            }
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejson_value() {
        var s0;

        var key = peg$currPos * 74 + 71,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
                s0 = peg$parsenull();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsebool();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsejson_data();
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejson_obj() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 74 + 72,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsejson_key_value();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSPC();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c255;
                    peg$currPos++;
                } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c256);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseSPC();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsejson_key_value();
                        if (s7 !== peg$FAILED) {
                            s5 = [s5, s6, s7];
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c255;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c256);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseSPC();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsejson_key_value();
                                if (s7 !== peg$FAILED) {
                                    s5 = [s5, s6, s7];
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                } else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c346(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsejson_key_value();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c347(s1);
            }
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parsejson_key_value() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 74 + 73,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsestring();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSPC();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c348;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c349);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseSPC();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsejson_value();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c350(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }


    // ------------------------------------------------
    //   なでしこの文法をPEGで定義したもの
    // -- https://pegjs.org/online を利用して編集すると良い感じ
    // ------------------------------------------------
    function convToHalfS(s) {
        return s.replace(/[Ａ-Ｚａ-ｚ０-９＿]/g, function (s) {
            return String.fromCharCode(s.charCodeAt(0) - 65248);
        });
    }

    // ------------------------------------------------


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
    }
}

module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
};
